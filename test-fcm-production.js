#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FCM –≤ production —Ä–µ–∂–∏–º–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Service Account Key –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

const https = require('https');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º google-services.json
let googleServices;
try {
  googleServices = JSON.parse(fs.readFileSync('./google-services.json', 'utf8'));
  console.log('‚úÖ google-services.json –Ω–∞–π–¥–µ–Ω');
  console.log('üì± Project ID:', googleServices.project_info.project_id);
  console.log('üì± Package Name:', googleServices.client[0].client_info.android_client_info.package_name);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è google-services.json:', error.message);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function getAccessToken() {
  console.log('\nüîë –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FCM –Ω—É–∂–µ–Ω Service Account Key');
  console.log('üí° –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ EAS credentials');
  console.log('üí° –í production —Å–±–æ—Ä–∫–µ FCM –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Expo Push —Å production —Ç–æ–∫–µ–Ω–æ–º
async function testExpoProductionPush(pushToken) {
  console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Expo Push —Å production –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...');
  
  const message = {
    to: pushToken,
    sound: 'default',
    title: 'Production Test',
    body: `–¢–µ—Å—Ç production: ${new Date().toLocaleTimeString()}`,
    data: { 
      test: true, 
      production: true,
      projectId: googleServices.project_info.project_id
    },
    priority: 'high',
    channelId: 'default',
  };

  try {
    const response = await fetch('https://exp.host/--/api/v2/push/send', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Accept-encoding': 'gzip, deflate',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    });

    const result = await response.json();
    
    console.log('üì° –û—Ç–≤–µ—Ç Expo —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(JSON.stringify(result, null, 2));
    
    if (result.data && result.data.status === 'ok') {
      console.log('‚úÖ Production —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
      console.log('üí° –í production —Å–±–æ—Ä–∫–µ —ç—Ç–æ –±—É–¥–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ production —Ç–µ—Å—Ç–∞:', result);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkProductionConfig() {
  console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê PRODUCTION –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º google-services.json
  console.log('\nüì± Google Services:');
  console.log('  ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω');
  console.log('  ‚úÖ Project ID:', googleServices.project_info.project_id);
  console.log('  ‚úÖ Package Name:', googleServices.client[0].client_info.android_client_info.package_name);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º app.json
  let appConfig;
  try {
    appConfig = JSON.parse(fs.readFileSync('./app.json', 'utf8'));
    console.log('\nüìã App.json:');
    console.log('  ‚úÖ EAS Project ID:', appConfig.expo.extra.eas.projectId);
    console.log('  ‚úÖ Android Package:', appConfig.expo.android.package);
    console.log('  ‚úÖ iOS Bundle ID:', appConfig.expo.ios.bundleIdentifier);
    console.log('  ‚úÖ Notifications Plugin:', appConfig.expo.plugins.some(p => 
      Array.isArray(p) && p[0] === 'expo-notifications') ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  ‚úÖ POST_NOTIFICATIONS:', appConfig.expo.android.permissions.includes('android.permission.POST_NOTIFICATIONS') ? '–ï—Å—Ç—å' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('  ‚úÖ Background Modes:', appConfig.expo.ios.infoPlist.UIBackgroundModes.includes('remote-notification') ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.json:', error.message);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Package Names
  const appPackage = appConfig?.expo?.android?.package;
  const googlePackage = googleServices.client[0].client_info.android_client_info.package_name;
  
  console.log('\nüîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Package Names:');
  if (appPackage === googlePackage) {
    console.log('  ‚úÖ Package Names —Å–æ–≤–ø–∞–¥–∞—é—Ç:', appPackage);
  } else {
    console.log('  ‚ùå Package Names –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
    console.log('    App.json:', appPackage);
    console.log('    Google Services:', googlePackage);
    console.log('  üí° –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å FCM –≤ production');
  }
  
  return appPackage === googlePackage;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const pushToken = process.argv[2];
  
  console.log('üîî === –¢–ï–°–¢ FCM PRODUCTION –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const configOk = checkProductionConfig();
  
  if (!configOk) {
    console.log('\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ production —Å–±–æ—Ä–∫–æ–π');
    process.exit(1);
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  if (pushToken) {
    if (!pushToken.startsWith('ExponentPushToken[')) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç push —Ç–æ–∫–µ–Ω–∞');
      process.exit(1);
    }
    
    await testExpoProductionPush(pushToken);
  } else {
    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ push —Ç–æ–∫–µ–Ω:');
    console.log('   node test-fcm-production.js "ExponentPushToken[–≤–∞—à-—Ç–æ–∫–µ–Ω]"');
  }
  
  console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
  console.log('üí° –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, FCM –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ production');
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
