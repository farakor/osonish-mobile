#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ push —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö Metro
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

console.log('üîç === –ü–û–ò–°–ö PUSH –¢–û–ö–ï–ù–ê ===\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ
function extractToken(line) {
  const tokenRegex = /ExponentPushToken\[[^\]]+\]/g;
  const matches = line.match(tokenRegex);
  return matches ? matches[0] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ Metro –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function monitorMetroLogs() {
  console.log('üì± –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Metro...');
  console.log('üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  console.log('‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');

  const metro = spawn('npx', ['expo', 'start', '--no-dev', '--minify'], {
    stdio: ['pipe', 'pipe', 'pipe'],
    shell: true
  });

  let foundTokens = new Set();

  metro.stdout.on('data', (data) => {
    const lines = data.toString().split('\n');
    
    lines.forEach(line => {
      const token = extractToken(line);
      if (token && !foundTokens.has(token)) {
        foundTokens.add(token);
        console.log('üéØ –ù–ê–ô–î–ï–ù –¢–û–ö–ï–ù:', token);
        console.log('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        testToken(token);
      }
    });
  });

  metro.stderr.on('data', (data) => {
    const lines = data.toString().split('\n');
    
    lines.forEach(line => {
      const token = extractToken(line);
      if (token && !foundTokens.has(token)) {
        foundTokens.add(token);
        console.log('üéØ –ù–ê–ô–î–ï–ù –¢–û–ö–ï–ù:', token);
        console.log('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        testToken(token);
      }
    });
  });

  metro.on('close', (code) => {
    console.log(`\nüì± Metro –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
    
    if (foundTokens.size === 0) {
      console.log('\n‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
      console.log('   1. –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Expo Go');
      console.log('   2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (Debug mode)');
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${foundTokens.size}`);
      foundTokens.forEach(token => {
        console.log(`   ${token}`);
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    metro.kill();
    process.exit(0);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async function testToken(token) {
  console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const { spawn } = require('child_process');
    
    const test = spawn('node', ['test-fcm-production.js', token], {
      stdio: 'inherit'
    });
    
    test.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n');
      } else {
        console.log('‚ùå –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π\n');
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–∞—Ö
function searchExistingLogs() {
  console.log('üîç –ü–æ–∏—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö –ª–æ–≥–æ–≤...\n');
  
  const logPaths = [
    '.expo/logs',
    'node_modules/.cache/expo',
    '/tmp/expo-logs'
  ];
  
  let foundAny = false;
  
  logPaths.forEach(logPath => {
    if (fs.existsSync(logPath)) {
      console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${logPath}`);
      
      try {
        const files = fs.readdirSync(logPath);
        
        files.forEach(file => {
          if (file.includes('log') || file.includes('metro')) {
            const filePath = path.join(logPath, file);
            
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              const token = extractToken(content);
              
              if (token) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ ${filePath}:`);
                console.log(`   ${token}\n`);
                foundAny = true;
              }
            } catch (error) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            }
          }
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      }
    }
  });
  
  if (!foundAny) {
    console.log('‚ùå –¢–æ–∫–µ–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const command = process.argv[2];
  
  if (command === 'monitor') {
    monitorMetroLogs();
  } else if (command === 'search') {
    searchExistingLogs();
  } else {
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('');
    console.log('üîç –ü–æ–∏—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–∞—Ö:');
    console.log('   node find-token.js search');
    console.log('');
    console.log('üì± –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤:');
    console.log('   node find-token.js monitor');
    console.log('');
    console.log('üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:');
    console.log('   1. –ö–Ω–æ–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    console.log('   2. –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (Debug mode)');
    console.log('   3. –õ–æ–≥–∏ Metro –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
    console.log('');
  }
}

main();
