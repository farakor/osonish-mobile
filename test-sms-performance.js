/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SMS Input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π OptimizedSmsInput
 * –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
 */

console.log('üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SMS Input');
console.log('=====================================');

// –°–∏–º—É–ª—è—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞
function simulateRapidInput() {
  console.log('\nüì± –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞:');
  
  const testCodes = [
    '123456',
    '987654',
    '555555',
    '111111',
    '999999'
  ];
  
  testCodes.forEach((code, index) => {
    console.log(`  ${index + 1}. –í–≤–æ–¥ –∫–æ–¥–∞: ${code}`);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–æ–¥–∞ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
    const inputTimes = [];
    for (let i = 0; i < code.length; i++) {
      const startTime = performance.now();
      
      // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
      setTimeout(() => {
        const endTime = performance.now();
        inputTimes.push(endTime - startTime);
        
        if (i === code.length - 1) {
          const avgTime = inputTimes.reduce((a, b) => a + b, 0) / inputTimes.length;
          console.log(`     ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${avgTime.toFixed(2)}ms`);
        }
      }, i * 50); // 50ms –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ)
    }
  });
}

// –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
function testMemoryUsage() {
  console.log('\nüß† –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:');
  
  if (typeof performance !== 'undefined' && performance.memory) {
    const memBefore = performance.memory.usedJSHeapSize;
    console.log(`  –ü–∞–º—è—Ç—å –¥–æ —Ç–µ—Å—Ç–∞: ${(memBefore / 1024 / 1024).toFixed(2)} MB`);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
    for (let i = 0; i < 1000; i++) {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const mockComponent = {
        code: Math.random().toString().slice(2, 8),
        focused: Math.random() > 0.5,
        timestamp: Date.now()
      };
    }
    
    setTimeout(() => {
      const memAfter = performance.memory.usedJSHeapSize;
      const memDiff = memAfter - memBefore;
      console.log(`  –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: ${(memAfter / 1024 / 1024).toFixed(2)} MB`);
      console.log(`  –†–∞–∑–Ω–∏—Ü–∞: ${(memDiff / 1024 / 1024).toFixed(2)} MB`);
    }, 100);
  } else {
    console.log('  ‚ö†Ô∏è  Performance API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å—Ä–µ–¥–µ');
  }
}

// –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
function testResponsiveness() {
  console.log('\n‚ö° –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏:');
  
  const responseTimes = [];
  
  for (let i = 0; i < 10; i++) {
    const startTime = performance.now();
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
    setTimeout(() => {
      const responseTime = performance.now() - startTime;
      responseTimes.push(responseTime);
      
      if (i === 9) {
        const avgResponse = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
        const maxResponse = Math.max(...responseTimes);
        const minResponse = Math.min(...responseTimes);
        
        console.log(`  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏:`);
        console.log(`     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgResponse.toFixed(2)}ms`);
        console.log(`     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${maxResponse.toFixed(2)}ms`);
        console.log(`     –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: ${minResponse.toFixed(2)}ms`);
        
        if (avgResponse < 16.67) {
          console.log('     ‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 60 FPS');
        } else if (avgResponse < 33.33) {
          console.log('     ‚ö†Ô∏è  –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ (30 FPS)');
        } else {
          console.log('     ‚ùå –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
        }
      }
    }, i * 10);
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
function showTestingRecommendations() {
  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:');
  console.log('================================');
  
  console.log('\n1. üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:');
  console.log('   ‚Ä¢ iPhone 12/13/14 (iOS)');
  console.log('   ‚Ä¢ Samsung Galaxy S21/22 (Android)');
  console.log('   ‚Ä¢ –ë—é–¥–∂–µ—Ç–Ω—ã–µ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
  
  console.log('\n2. üîß –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   ‚Ä¢ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ (< 100ms –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏)');
  console.log('   ‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ (200-500ms –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏)');
  console.log('   ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥ (> 1s –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏)');
  console.log('   ‚Ä¢ –í–≤–æ–¥ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏');
  console.log('   ‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ SMS');
  
  console.log('\n3. üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:');
  console.log('   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–≤–æ–¥ (< 16ms –¥–ª—è 60 FPS)');
  console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏');
  console.log('   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤');
  console.log('   ‚Ä¢ –í—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
  
  console.log('\n4. üéØ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('   ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–æ–¥');
  console.log('   ‚Ä¢ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞');
  console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –≤–≤–æ–¥–µ');
  console.log('   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllTests() {
  simulateRapidInput();
  
  setTimeout(() => {
    testMemoryUsage();
  }, 1000);
  
  setTimeout(() => {
    testResponsiveness();
  }, 2000);
  
  setTimeout(() => {
    showTestingRecommendations();
  }, 3000);
  
  setTimeout(() => {
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
    console.log('   2. –°–æ–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ production');
  }, 4000);
}

// –ó–∞–ø—É—Å–∫
runAllTests();
