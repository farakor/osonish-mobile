#!/usr/bin/env node

/**
 * üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç production —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * 2. –¢–µ—Å—Ç Expo Push Service
 * 3. –¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const TEST_CONFIG = {
  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Expo Push Token –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  EXPO_PUSH_TOKEN: 'ExponentPushToken[XXXXXXXXXXXXXXXXXXXXXX]',
  
  // URL —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  CUSTOM_SERVER_URL: 'http://localhost:3000',
  CUSTOM_SERVER_TOKEN: 'osonish-notification-server-token',
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  TEST_NOTIFICATION: {
    title: 'üß™ Production Test',
    body: `–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - ${new Date().toLocaleTimeString()}`,
    data: {
      test: true,
      timestamp: Date.now(),
      environment: 'production-test'
    }
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function checkAppConfiguration() {
  console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  const appJsonPath = path.join(__dirname, 'app.json');
  
  if (!fs.existsSync(appJsonPath)) {
    console.log('‚ùå app.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  try {
    const config = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));
    const expo = config.expo;
    
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${expo.name}`);
    console.log(`   - –í–µ—Ä—Å–∏—è: ${expo.version}`);
    console.log(`   - Project ID: ${expo.extra?.eas?.projectId}`);
    console.log(`   - Android package: ${expo.android?.package}`);
    console.log(`   - iOS bundle: ${expo.ios?.bundleIdentifier}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const issues = [];
    
    if (!expo.extra?.eas?.projectId) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç EAS Project ID');
    }
    
    if (expo.android?.package !== 'com.farakor.osonishmobile') {
      issues.push('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Android package name');
    }
    
    if (expo.ios?.bundleIdentifier !== 'com.farakor.osonishmobile') {
      issues.push('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π iOS bundle identifier');
    }
    
    if (!expo.android?.googleServicesFile) {
      issues.push('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω googleServicesFile –¥–ª—è Android');
    }
    
    if (issues.length > 0) {
      console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach(issue => console.log(`   - ${issue}`));
      return false;
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.json:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function checkFirebaseConfiguration() {
  console.log('üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  
  const googleServicesPath = path.join(__dirname, 'google-services.json');
  
  if (!fs.existsSync(googleServicesPath)) {
    console.log('‚ùå google-services.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏–∑ Firebase Console –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞');
    return false;
  }
  
  try {
    const config = JSON.parse(fs.readFileSync(googleServicesPath, 'utf8'));
    
    console.log('üìã Firebase –ø—Ä–æ–µ–∫—Ç:');
    console.log(`   - Project ID: ${config.project_info?.project_id}`);
    console.log(`   - Project Number: ${config.project_info?.project_number}`);
    console.log(`   - Package Name: ${config.client?.[0]?.client_info?.android_client_info?.package_name}`);
    
    const expectedPackage = 'com.farakor.osonishmobile';
    const actualPackage = config.client?.[0]?.client_info?.android_client_info?.package_name;
    
    if (actualPackage !== expectedPackage) {
      console.log('‚ùå Package name –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
      console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedPackage}`);
      console.log(`   –ù–∞–π–¥–µ–Ω: ${actualPackage}`);
      return false;
    }
    
    console.log('‚úÖ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è google-services.json:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç Expo Push Service
 */
async function testExpoPushService() {
  console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Expo Push Service...');
  
  if (TEST_CONFIG.EXPO_PUSH_TOKEN === 'ExponentPushToken[XXXXXXXXXXXXXXXXXXXXXX]') {
    console.log('‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π Expo Push Token');
    console.log('üí° –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç–µ TEST_CONFIG.EXPO_PUSH_TOKEN');
    return false;
  }
  
  try {
    const message = {
      to: TEST_CONFIG.EXPO_PUSH_TOKEN,
      sound: 'default',
      title: TEST_CONFIG.TEST_NOTIFICATION.title,
      body: TEST_CONFIG.TEST_NOTIFICATION.body,
      data: {
        ...TEST_CONFIG.TEST_NOTIFICATION.data,
        service: 'expo'
      },
      priority: 'high',
      channelId: 'default'
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Expo Push Service...');
    
    const response = await fetch('https://exp.host/--/api/v2/push/send', {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Accept-encoding': 'gzip, deflate',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    });
    
    const result = await response.json();
    
    console.log('üìã –û—Ç–≤–µ—Ç Expo:', JSON.stringify(result, null, 2));
    
    if (response.ok && result.data?.[0]?.status === 'ok') {
      console.log('‚úÖ Expo Push Service —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ Expo Push Service');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EAS –ø—Ä–æ–µ–∫—Ç–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Expo Push Service:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function testCustomNotificationServer() {
  console.log('üñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const healthResponse = await fetch(`${TEST_CONFIG.CUSTOM_SERVER_URL}/health`);
    
    if (!healthResponse.ok) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', TEST_CONFIG.CUSTOM_SERVER_URL);
      return false;
    }
    
    const healthData = await healthResponse.json();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', healthData.status);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
    const infoResponse = await fetch(`${TEST_CONFIG.CUSTOM_SERVER_URL}/info`);
    const infoData = await infoResponse.json();
    
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:');
    console.log(`   - –í–µ—Ä—Å–∏—è: ${infoData.version}`);
    console.log(`   - –§—É–Ω–∫—Ü–∏–∏: ${infoData.features?.join(', ')}`);
    
    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (TEST_CONFIG.EXPO_PUSH_TOKEN !== 'ExponentPushToken[XXXXXXXXXXXXXXXXXXXXXX]') {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...');
      
      const testResponse = await fetch(`${TEST_CONFIG.CUSTOM_SERVER_URL}/test-notification`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${TEST_CONFIG.CUSTOM_SERVER_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          token: TEST_CONFIG.EXPO_PUSH_TOKEN,
          platform: 'android'
        })
      });
      
      const testResult = await testResponse.json();
      
      if (testResult.success) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        console.log(`   Message ID: ${testResult.messageId}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', testResult.error);
      }
    }
    
    console.log('‚úÖ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: cd notification-server && npm start');
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ EAS credentials
 */
async function checkEASCredentials() {
  console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ EAS credentials...');
  
  try {
    const { execSync } = require('child_process');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try {
      const whoami = execSync('npx eas whoami', { encoding: 'utf8', stdio: 'pipe' });
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ EAS –∫–∞–∫:', whoami.trim());
    } catch (error) {
      console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ EAS');
      console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx eas login');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials –¥–ª—è Android
    try {
      const androidCreds = execSync('npx eas credentials:list --platform android', { 
        encoding: 'utf8', 
        stdio: 'pipe' 
      });
      console.log('‚úÖ Android credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è  Android credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx eas credentials:configure --platform android');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials –¥–ª—è iOS
    try {
      const iosCreds = execSync('npx eas credentials:list --platform ios', { 
        encoding: 'utf8', 
        stdio: 'pipe' 
      });
      console.log('‚úÖ iOS credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è  iOS credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx eas credentials:configure --platform ios');
    }
    
    console.log('‚úÖ EAS credentials –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã\n');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ EAS credentials:', error.message);
    return false;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
 */
function generateReport(results) {
  console.log('üìä === –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò ===\n');
  
  const tests = [
    { name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', result: results.appConfig },
    { name: 'Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', result: results.firebaseConfig },
    { name: 'EAS credentials', result: results.easCredentials },
    { name: 'Expo Push Service', result: results.expoPush },
    { name: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä', result: results.customServer }
  ];
  
  tests.forEach(test => {
    const status = test.result ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${test.name}`);
  });
  
  const passedTests = tests.filter(t => t.result).length;
  const totalTests = tests.length;
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production deployment.');
  } else {
    console.log('‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ production deployment.');
  }
  
  console.log('\nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  
  if (!results.appConfig || !results.firebaseConfig) {
    console.log('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
  }
  
  if (!results.easCredentials) {
    console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ EAS credentials –¥–ª—è production –±–∏–ª–¥–æ–≤');
  }
  
  if (!results.expoPush && !results.customServer) {
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
  
  if (passedTests === totalTests) {
    console.log('4. –°–æ–∑–¥–∞–π—Ç–µ preview –±–∏–ª–¥: npx eas build --platform all --profile preview');
    console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
    console.log('6. –°–æ–∑–¥–∞–π—Ç–µ production –±–∏–ª–¥: npx eas build --platform all --profile production');
    console.log('7. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω—ã: npx eas submit --platform all --profile production');
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');
  
  const results = {
    appConfig: false,
    firebaseConfig: false,
    easCredentials: false,
    expoPush: false,
    customServer: false
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  results.appConfig = checkAppConfiguration();
  results.firebaseConfig = checkFirebaseConfiguration();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ EAS
  results.easCredentials = await checkEASCredentials();
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  results.expoPush = await testExpoPushService();
  results.customServer = await testCustomNotificationServer();
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport(results);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  checkAppConfiguration,
  checkFirebaseConfiguration,
  testExpoPushService,
  testCustomNotificationServer,
  checkEASCredentials
};
