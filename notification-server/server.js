/**
 * üñ•Ô∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Osonish
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É Expo Push Service
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Firebase FCM –∏ Apple APNs
 */

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const NotificationService = require('./services/NotificationService');
const logger = require('./utils/logger');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`, {
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationService = new NotificationService();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ 
      success: false, 
      error: 'Access token required' 
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JWT –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É)
  const validToken = process.env.API_TOKEN || 'osonish-notification-server-token';
  
  if (token !== validToken) {
    return res.status(403).json({ 
      success: false, 
      error: 'Invalid access token' 
    });
  }

  next();
};

// –ú–∞—Ä—à—Ä—É—Ç—ã

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
 */
app.get('/health', (req, res) => {
  res.json({
    success: true,
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
 */
app.get('/info', (req, res) => {
  res.json({
    success: true,
    server: 'Osonish Notification Server',
    version: '1.0.0',
    features: [
      'Firebase FCM (Android)',
      'Apple APNs (iOS)',
      'Batch notifications',
      'Analytics tracking',
      'Retry mechanism'
    ],
    endpoints: {
      sendNotification: 'POST /send-notification',
      sendBatch: 'POST /send-batch',
      analytics: 'GET /analytics',
      health: 'GET /health'
    }
  });
});

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
app.post('/send-notification', authenticateToken, async (req, res) => {
  try {
    const { token, title, body, data, platform } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!token || !title || !body) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: token, title, body'
      });
    }

    logger.info('Sending notification', {
      platform: platform || 'unknown',
      title: title.substring(0, 50),
      tokenPrefix: token.substring(0, 10)
    });

    const result = await notificationService.sendNotification({
      token,
      title,
      body,
      data: data || {},
      platform: platform || 'android'
    });

    if (result.success) {
      logger.info('Notification sent successfully', {
        messageId: result.messageId,
        platform: platform || 'unknown'
      });

      res.json({
        success: true,
        messageId: result.messageId,
        timestamp: new Date().toISOString()
      });
    } else {
      logger.error('Failed to send notification', {
        error: result.error,
        platform: platform || 'unknown'
      });

      res.status(500).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    logger.error('Server error while sending notification', {
      error: error.message,
      stack: error.stack
    });

    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
app.post('/send-batch', authenticateToken, async (req, res) => {
  try {
    const { notifications } = req.body;

    if (!Array.isArray(notifications) || notifications.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'notifications must be a non-empty array'
      });
    }

    if (notifications.length > 100) {
      return res.status(400).json({
        success: false,
        error: 'Maximum 100 notifications per batch'
      });
    }

    logger.info('Sending batch notifications', {
      count: notifications.length
    });

    const results = await notificationService.sendBatch(notifications);

    const successCount = results.filter(r => r.success).length;
    const failureCount = results.length - successCount;

    logger.info('Batch notifications completed', {
      total: results.length,
      success: successCount,
      failures: failureCount
    });

    res.json({
      success: true,
      total: results.length,
      successful: successCount,
      failed: failureCount,
      results: results,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Server error while sending batch notifications', {
      error: error.message,
      stack: error.stack
    });

    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
app.get('/analytics', authenticateToken, async (req, res) => {
  try {
    const { from, to, platform } = req.query;
    
    const analytics = await notificationService.getAnalytics({
      from: from ? new Date(from) : new Date(Date.now() - 24 * 60 * 60 * 1000), // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      to: to ? new Date(to) : new Date(),
      platform
    });

    res.json({
      success: true,
      analytics,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Server error while getting analytics', {
      error: error.message,
      stack: error.stack
    });

    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

/**
 * –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
app.post('/test-notification', authenticateToken, async (req, res) => {
  try {
    const { token, platform } = req.body;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: 'Token is required'
      });
    }

    const testNotification = {
      token,
      title: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      body: `–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`,
      data: {
        test: true,
        timestamp: Date.now()
      },
      platform: platform || 'android'
    };

    logger.info('Sending test notification', {
      platform: testNotification.platform,
      tokenPrefix: token.substring(0, 10)
    });

    const result = await notificationService.sendNotification(testNotification);

    res.json({
      success: result.success,
      messageId: result.messageId,
      error: result.error,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Server error while sending test notification', {
      error: error.message,
      stack: error.stack
    });

    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  logger.error('Unhandled error', {
    error: error.message,
    stack: error.stack,
    path: req.path,
    method: req.method
  });

  res.status(500).json({
    success: false,
    error: 'Internal server error'
  });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint not found'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  logger.info(`üöÄ Osonish Notification Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  logger.info('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
  logger.info('  GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');
  logger.info('  GET  /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ');
  logger.info('  POST /send-notification - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  logger.info('  POST /send-batch - –ø–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞');
  logger.info('  POST /test-notification - —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
  logger.info('  GET  /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  notificationService.initialize().then(() => {
    logger.info('‚úÖ Notification Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }).catch((error) => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Notification Service:', error);
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

module.exports = app;
