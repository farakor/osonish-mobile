#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-notifications.js [push-token]
 */

const https = require('https');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Expo
async function sendPushNotification(pushToken, title = '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', body = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞') {
  const message = {
    to: pushToken,
    sound: 'default',
    title: title,
    body: body,
    data: {
      test: true,
      timestamp: Date.now()
    },
    priority: 'high',
    channelId: 'default',
  };

  const postData = JSON.stringify(message);

  const options = {
    hostname: 'exp.host',
    port: 443,
    path: '/--/api/v2/push/send',
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Accept-encoding': 'gzip, deflate',
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (error) {
          reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ' + error.message));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const pushToken = process.argv[2];

  if (!pushToken) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω push token');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node test-notifications.js ExponentPushToken[xxxxxx]');
    console.log('');
    console.log('–ì–¥–µ –≤–∑—è—Ç—å push token:');
    console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Expo Go –∏–ª–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    console.log('  2. –ù–∞–π–¥–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö —Å—Ç—Ä–æ–∫—É: "‚úÖ Push token –ø–æ–ª—É—á–µ–Ω: ExponentPushToken[...]"');
    console.log('  3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–æ–∫–µ–Ω –≤–∫–ª—é—á–∞—è ExponentPushToken[...]');
    console.log('');
    process.exit(1);
  }

  if (!pushToken.startsWith('ExponentPushToken[')) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç push token');
    console.log('Push token –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "ExponentPushToken["');
    console.log('');
    process.exit(1);
  }

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
  console.log('üì± Push token:', pushToken.substring(0, 30) + '...');
  console.log('');

  try {
    const result = await sendPushNotification(pushToken);
    
    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Expo —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(JSON.stringify(result, null, 2));
    console.log('');

    if (result.data && result.data.length > 0) {
      const status = result.data[0].status;
      const details = result.data[0].details;

      if (status === 'ok') {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥');
      } else if (status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
        console.log('   –î–µ—Ç–∞–ª–∏:', details);
        
        if (details && details.error === 'DeviceNotRegistered') {
          console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
          console.log('   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
          console.log('   - Push token —É—Å—Ç–∞—Ä–µ–ª');
          console.log('   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        }
      }
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
    console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π push token');
    console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å Expo —Å–µ—Ä–≤–µ—Ä–æ–º');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error);
