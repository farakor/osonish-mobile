#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Android 15+
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Google Play
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Android 15+...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º app.json
function checkAppJson() {
  console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ app.json...');
  
  try {
    const appJsonPath = path.join(__dirname, '../app.json');
    const appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));
    
    const android = appJson.expo.android;
    const orientation = appJson.expo.orientation;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    if (orientation === 'default') {
      console.log('  ‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞: default (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)');
    } else {
      console.log('  ‚ùå –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞: ' + orientation + ' (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å default)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Edge-to-Edge
    if (android.enableEdgeToEdge === true) {
      console.log('  ‚úÖ Edge-to-Edge: –≤–∫–ª—é—á–µ–Ω');
    } else {
      console.log('  ‚ùå Edge-to-Edge: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ statusBarStyle
    if (android.statusBarStyle === 'auto') {
      console.log('  ‚úÖ StatusBar —Å—Ç–∏–ª—å: auto');
    } else {
      console.log('  ‚ö†Ô∏è  StatusBar —Å—Ç–∏–ª—å: ' + (android.statusBarStyle || '–Ω–µ –∑–∞–¥–∞–Ω'));
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ navigationBarStyle
    if (android.navigationBarStyle === 'auto') {
      console.log('  ‚úÖ NavigationBar —Å—Ç–∏–ª—å: auto');
    } else {
      console.log('  ‚ö†Ô∏è  NavigationBar —Å—Ç–∏–ª—å: ' + (android.navigationBarStyle || '–Ω–µ –∑–∞–¥–∞–Ω'));
    }
    
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.json:', error.message);
  }
  
  console.log('');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API
function checkDeprecatedAPIs() {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API...');
  
  const srcPath = path.join(__dirname, '../src');
  const deprecatedAPIs = [
    'StatusBar.currentHeight',
    'StatusBar.setColor',
    'StatusBar.setBackgroundColor',
    'StatusBar.setNavigationBarColor',
    'getStatusBarColor',
    'setStatusBarColor',
    'setNavigationBarColor'
  ];
  
  let foundIssues = 0;
  
  function checkFile(filePath) {
    if (!filePath.endsWith('.tsx') && !filePath.endsWith('.ts')) return;
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      deprecatedAPIs.forEach(api => {
        if (content.includes(api)) {
          console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π API "${api}" –≤ ${path.relative(srcPath, filePath)}`);
          foundIssues++;
        }
      });
      
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
  }
  
  function walkDir(dir) {
    try {
      const files = fs.readdirSync(dir);
      
      files.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          walkDir(filePath);
        } else {
          checkFile(filePath);
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    }
  }
  
  walkDir(srcPath);
  
  if (foundIssues === 0) {
    console.log('  ‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  } else {
    console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω–æ ${foundIssues} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API`);
  }
  
  console.log('');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã
function checkNewUtilities() {
  console.log('üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç...');
  
  const edgeToEdgeUtilsPath = path.join(__dirname, '../src/utils/edgeToEdgeUtils.ts');
  const edgeToEdgeStatusBarPath = path.join(__dirname, '../src/components/common/EdgeToEdgeStatusBar.tsx');
  
  if (fs.existsSync(edgeToEdgeUtilsPath)) {
    console.log('  ‚úÖ edgeToEdgeUtils.ts —Å–æ–∑–¥–∞–Ω');
  } else {
    console.log('  ‚ùå edgeToEdgeUtils.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  if (fs.existsSync(edgeToEdgeStatusBarPath)) {
    console.log('  ‚úÖ EdgeToEdgeStatusBar.tsx —Å–æ–∑–¥–∞–Ω');
  } else {
    console.log('  ‚ùå EdgeToEdgeStatusBar.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  console.log('');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
function checkDependencies() {
  console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  
  try {
    const packageJsonPath = path.join(__dirname, '../package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    const requiredDeps = [
      'react-native-safe-area-context',
      'expo-status-bar'
    ];
    
    requiredDeps.forEach(dep => {
      if (packageJson.dependencies[dep]) {
        console.log(`  ‚úÖ ${dep}: ${packageJson.dependencies[dep]}`);
      } else {
        console.log(`  ‚ùå ${dep}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
    
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
  }
  
  console.log('');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
function showTestingRecommendations() {
  console.log('üß™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:');
  console.log('');
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Android 15+:');
  console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Edge-to-Edge —Ä–µ–∂–∏–º');
  console.log('   - –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–∞—Ö');
  console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞');
  console.log('');
  console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö:');
  console.log('   - –°–∫–ª–∞–¥–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (Galaxy Fold, Pixel Fold)');
  console.log('   - –ü–ª–∞–Ω—à–µ—Ç—ã (iPad, Galaxy Tab)');
  console.log('   - –°–º–µ–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞');
  console.log('');
  console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
  console.log('   - Android 10-14');
  console.log('   - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–æ–≤');
  console.log('   - –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π');
  console.log('');
  console.log('4. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∫–∏:');
  console.log('   npx eas build --platform android --profile preview');
  console.log('   npx expo start --android');
  console.log('');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
function runAllChecks() {
  checkAppJson();
  checkDeprecatedAPIs();
  checkNewUtilities();
  checkDependencies();
  showTestingRecommendations();
  
  console.log('‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)');
  console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
  console.log('3. –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Google Play');
  console.log('');
}

// –ó–∞–ø—É—Å–∫
runAllChecks();
