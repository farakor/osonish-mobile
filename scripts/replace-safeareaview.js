#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ SafeAreaView –Ω–∞ react-native-safe-area-context
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ –ó–∞–º–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ SafeAreaView...\n');

const srcPath = path.join(__dirname, '../src');
let filesProcessed = 0;
let filesChanged = 0;

function processFile(filePath) {
  if (!filePath.endsWith('.tsx') && !filePath.endsWith('.ts')) return;
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let newContent = content;
    let hasChanges = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç SafeAreaView –∏–∑ react-native
    const oldImportPattern = /import\s*{\s*([^}]*),?\s*SafeAreaView\s*,?\s*([^}]*)\s*}\s*from\s*['"]react-native['"]/g;
    const newImportReplacement = (match, before, after) => {
      hasChanges = true;
      
      // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø—è—Ç—ã–µ
      const beforeClean = before ? before.replace(/,\s*$/, '').trim() : '';
      const afterClean = after ? after.replace(/^\s*,/, '').trim() : '';
      
      let imports = [];
      if (beforeClean) imports.push(beforeClean);
      if (afterClean) imports.push(afterClean);
      
      const reactNativeImport = imports.length > 0 ? `import { ${imports.join(', ')} } from 'react-native';` : '';
      const safeAreaImport = `import { SafeAreaView } from 'react-native-safe-area-context';`;
      
      return reactNativeImport ? `${reactNativeImport}\n${safeAreaImport}` : safeAreaImport;
    };
    
    newContent = newContent.replace(oldImportPattern, newImportReplacement);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ SafeAreaView –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    const separateImportPattern = /import\s*{\s*SafeAreaView\s*}\s*from\s*['"]react-native['"]/g;
    if (separateImportPattern.test(content)) {
      newContent = newContent.replace(separateImportPattern, `import { SafeAreaView } from 'react-native-safe-area-context';`);
      hasChanges = true;
    }
    
    if (hasChanges) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${path.relative(srcPath, filePath)}`);
      filesChanged++;
    }
    
    filesProcessed++;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
  }
}

function walkDir(dir) {
  try {
    const files = fs.readdirSync(dir);
    
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        walkDir(filePath);
      } else {
        processFile(filePath);
      }
    });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
walkDir(srcPath);

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
console.log(`   –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filesProcessed}`);
console.log(`   –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${filesChanged}`);

if (filesChanged > 0) {
  console.log(`\n‚ú® –ó–∞–º–µ–Ω–∞ SafeAreaView –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
  console.log(`\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
  console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö`);
  console.log(`2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
  console.log(`3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
} else {
  console.log(`\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SafeAreaView`);
}

console.log('');
