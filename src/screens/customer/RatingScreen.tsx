import React, { useState, useEffect, useCallback } from 'react';
import { View,
  Text,
  StyleSheet, TouchableOpacity,
  Alert,
  ScrollView,
  Image,
  TextInput, } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';;
import { theme } from '../../constants';
import { noElevationStyles } from '../../utils/noShadowStyles';
import { usePlatformSafeAreaInsets, getFixedBottomStyle, getImprovedFixedBottomStyle } from '../../utils/safeAreaUtils';
import { useNavigation, useRoute, RouteProp, useFocusEffect } from '@react-navigation/native';
import { CustomerStackParamList } from '../../types/navigation';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { orderService } from '../../services/orderService';
import { StarIcon } from '../../components/common';
import { Applicant } from '../../types';

type RatingRouteProp = RouteProp<CustomerStackParamList, 'Rating'>;
type NavigationProp = NativeStackNavigationProp<CustomerStackParamList>;

interface StarRatingProps {
  rating: number;
  onRatingChange: (rating: number) => void;
  size?: number;
}

const StarRating: React.FC<StarRatingProps> = ({ rating, onRatingChange, size = 40 }) => {
  return (
    <View style={styles.starContainer}>
      {[1, 2, 3, 4, 5].map((star) => (
        <TouchableOpacity
          key={star}
          onPress={() => onRatingChange(star)}
          style={styles.starButton}
        >
          <StarIcon
            filled={star <= rating}
            size={size}
          />
        </TouchableOpacity>
      ))}
    </View>
  );
};

interface WorkerRatingState {
  [workerId: string]: number;
}

interface WorkerCommentsState {
  [workerId: string]: string;
}

const getInitials = (fullName?: string): string => {
  if (!fullName) return '–£';
  const names = fullName.trim().split(' ');
  const first = names[0]?.charAt(0)?.toUpperCase() || '';
  const last = names[1]?.charAt(0)?.toUpperCase() || '';
  return first + last || '–£';
};

interface WorkerRatingCardProps {
  worker: Applicant;
  rating: number;
  comment: string;
  onRatingChange: (rating: number) => void;
  onCommentChange: (comment: string) => void;
}

const WorkerRatingCard: React.FC<WorkerRatingCardProps> = ({ worker, rating, comment, onRatingChange, onCommentChange }) => {
  const getRatingText = (rating: number): string => {
    switch (rating) {
      case 1:
        return '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ';
      case 2:
        return '–ü–ª–æ—Ö–æ';
      case 3:
        return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
      case 4:
        return '–•–æ—Ä–æ—à–æ';
      case 5:
        return '–û—Ç–ª–∏—á–Ω–æ';
      default:
        return '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ';
    }
  };

  return (
    <View style={styles.workerCard}>
      <View style={styles.workerHeader}>
        {/* –ê–≤–∞—Ç–∞—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è */}
        <View style={styles.avatarContainer}>
          {worker.avatar ? (
            <Image source={{ uri: worker.avatar }} style={styles.workerAvatar} />
          ) : (
            <View style={styles.avatarPlaceholder}>
              <Text style={styles.avatarText}>
                {getInitials(worker.workerName)}
              </Text>
            </View>
          )}
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ */}
        <View style={styles.workerInfo}>
          <Text style={styles.workerName}>{worker.workerName}</Text>
          <Text style={styles.workerPhone}>{worker.workerPhone}</Text>
          {worker.proposedPrice && (
            <Text style={styles.proposedPrice}>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {worker.proposedPrice} —Å—É–º</Text>
          )}
        </View>
      </View>

      <View style={styles.ratingSection}>
        <Text style={styles.ratingLabel}>–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã</Text>
        <StarRating
          rating={rating}
          onRatingChange={onRatingChange}
          size={40}
        />
        <Text style={[
          styles.ratingText,
          rating === 0 && styles.ratingTextUnrated
        ]}>
          {getRatingText(rating)}
        </Text>
      </View>

      {/* –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
      <View style={styles.commentSection}>
        <Text style={styles.commentLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Text>
        <TextInput
          style={styles.commentInput}
          placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è..."
          placeholderTextColor="#9CA3AF"
          value={comment}
          onChangeText={onCommentChange}
          multiline
          numberOfLines={3}
          maxLength={500}
        />
        <Text style={styles.commentCounter}>
          {comment.length}/500
        </Text>
      </View>
    </View>
  );
};

export const RatingScreen: React.FC = () => {
  const navigation = useNavigation<NavigationProp>();
  const route = useRoute<RatingRouteProp>();
  const { orderId, acceptedWorkers } = route.params;
  const insets = usePlatformSafeAreaInsets();

  const [ratings, setRatings] = useState<WorkerRatingState>({});
  const [comments, setComments] = useState<WorkerCommentsState>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);

  const handleRatingChange = (workerId: string, rating: number) => {
    setRatings(prev => ({
      ...prev,
      [workerId]: rating
    }));
  };

  const handleCommentChange = (workerId: string, comment: string) => {
    setComments(prev => ({
      ...prev,
      [workerId]: comment
    }));
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞
  const hasAnyRating = Object.values(ratings).some(rating => rating > 0);

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  useEffect(() => {
    const unsubscribe = navigation.addListener('beforeRemove', (e) => {
      // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      if (isCompleted) {
        return;
      }

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
      e.preventDefault();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      Alert.alert(
        '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ü–µ–Ω–∫—É',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
        [{ text: '–ü–æ–Ω—è—Ç–Ω–æ' }]
      );
    });

    return unsubscribe;
  }, [navigation, isCompleted]);

  const handleSubmitReviews = async () => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ç–∑—ã–≤—ã, –≥–¥–µ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ > 0
    const reviewsToSubmit = Object.entries(ratings)
      .filter(([_, rating]) => rating > 0)
      .map(([workerId, rating]) => ({
        workerId,
        rating,
        comment: comments[workerId] || undefined
      }));

    console.log('[RatingScreen] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã:', {
      orderId,
      reviewsToSubmit
    });

    if (reviewsToSubmit.length === 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏
      Alert.alert('–û—Ü–µ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
      return;
    }

    setIsSubmitting(true);
    try {
      let successCount = 0;
      let failCount = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –æ–¥–Ω–æ–º—É
      for (const { workerId, rating, comment } of reviewsToSubmit) {
        try {
          console.log(`[RatingScreen] üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId}:`, {
            orderId,
            workerId,
            rating,
            comment: comment ? `"${comment}"` : '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
          });

          const success = await orderService.createReview({
            orderId,
            workerId,
            rating,
            comment,
          });

          if (success) {
            successCount++;
            console.log(`[RatingScreen] ‚úÖ –û—Ç–∑—ã–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
          } else {
            failCount++;
            console.error(`[RatingScreen] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId}`);
          }
        } catch (error) {
          failCount++;
          console.error(`[RatingScreen] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId}:`, error);
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (successCount > 0 && failCount === 0) {
        // –û—Ç–º–µ—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º Alert'–∞
        setIsCompleted(true);

        Alert.alert(
          '–°–ø–∞—Å–∏–±–æ!',
          `–û—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (${successCount})`,
          [
            {
              text: 'OK',
              onPress: () => {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                navigation.reset({
                  index: 0,
                  routes: [{ name: 'MainTabs' as any }],
                });
              },
            },
          ]
        );
      } else if (successCount > 0 && failCount > 0) {
        // –û—Ç–º–µ—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º Alert'–∞
        setIsCompleted(true);

        Alert.alert(
          '–ß–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failCount}`,
          [
            {
              text: 'OK',
              onPress: () => {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                navigation.reset({
                  index: 0,
                  routes: [{ name: 'MainTabs' as any }],
                });
              },
            },
          ]
        );
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (error) {
      console.error('[RatingScreen] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–æ–≤');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É</Text>
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <View style={styles.headerSection}>
            <Text style={styles.title}>–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞?</Text>
            <Text style={styles.subtitle}>
              –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            </Text>
          </View>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π */}
          {acceptedWorkers.map((worker) => (
            <WorkerRatingCard
              key={worker.workerId}
              worker={worker}
              rating={ratings[worker.workerId] || 0}
              comment={comments[worker.workerId] || ''}
              onRatingChange={(rating) => handleRatingChange(worker.workerId, rating)}
              onCommentChange={(comment) => handleCommentChange(worker.workerId, comment)}
            />
          ))}

        </View>
      </ScrollView>

      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É */}
      <View style={[styles.fixedButtonContainer, getImprovedFixedBottomStyle(insets)]}>
        <TouchableOpacity
          style={[
            styles.fixedButton,
            (isSubmitting || !hasAnyRating) && styles.fixedButtonDisabled,
          ]}
          onPress={handleSubmitReviews}
          disabled={isSubmitting || !hasAnyRating}
        >
          <Text style={[
            styles.fixedButtonText,
            (isSubmitting || !hasAnyRating) && styles.fixedButtonTextDisabled,
          ]}>
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ì–æ—Ç–æ–≤–æ'}
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  header: {
    alignItems: 'center',
    paddingHorizontal: theme.spacing.lg,
    paddingTop: theme.spacing.md,
    paddingBottom: theme.spacing.lg,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  headerTitle: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: theme.spacing.lg,
    paddingBottom: theme.spacing.lg + 100, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  },
  headerSection: {
    marginBottom: theme.spacing.xl,
    alignItems: 'center',
  },
  title: {
    fontSize: theme.fonts.sizes.xl,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
    textAlign: 'center',
    lineHeight: 22,
  },

  workerCard: {
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: theme.spacing.lg,
    marginBottom: theme.spacing.lg,
    borderWidth: 0, borderColor: theme.colors.border,
  },
  workerHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: theme.spacing.lg,
  },
  avatarContainer: {
    marginRight: theme.spacing.md,
  },
  workerAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  avatarPlaceholder: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: theme.colors.primary,
    alignItems: 'center',
    justifyContent: 'center',
  },
  avatarText: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.surface,
  },
  workerInfo: {
    flex: 1,
  },
  workerName: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.xs,
  },
  workerPhone: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.xs,
  },
  proposedPrice: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.primary,
    fontWeight: theme.fonts.weights.medium,
  },
  ratingSection: {
    alignItems: 'center',
    paddingVertical: theme.spacing.md,
  },
  ratingLabel: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.md,
  },
  starContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: theme.spacing.sm,
  },
  starButton: {
    paddingHorizontal: theme.spacing.xs,
  },
  ratingText: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
    fontWeight: theme.fonts.weights.medium,
  },
  ratingTextUnrated: {
    color: theme.colors.text.secondary,
    fontStyle: 'italic',
  },
  fixedButtonContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: theme.colors.background,
    paddingHorizontal: theme.spacing.lg,
    // paddingTop –∏ paddingBottom —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ getImprovedFixedBottomStyle
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
  },
  fixedButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: theme.borderRadius.md,
    paddingVertical: theme.spacing.md,
    paddingHorizontal: theme.spacing.lg,
    alignItems: 'center',
  },
  fixedButtonDisabled: {
    backgroundColor: theme.colors.text.secondary,
    opacity: 0.5,
  },
  fixedButtonText: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.surface,
  },
  fixedButtonTextDisabled: {
    color: theme.colors.background,
  },
  commentSection: {
    marginTop: theme.spacing.lg,
    paddingTop: theme.spacing.md,
    borderTopWidth: 1,
    borderTopColor: '#F0F2F5',
  },
  commentLabel: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  commentInput: {
    borderWidth: 0, borderColor: 'transparent', borderRadius: theme.borderRadius.md,
    padding: theme.spacing.md,
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.primary,
    textAlignVertical: 'top',
    backgroundColor: '#FAFBFC',
    minHeight: 80,
  },
  commentCounter: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
    textAlign: 'right',
    marginTop: theme.spacing.xs,
  },
});