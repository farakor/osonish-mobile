import React, { useState, useRef, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  TextInput,
  Alert,
  Platform,
  Image,
  Dimensions,
  KeyboardAvoidingView,
  ActivityIndicator,
  Modal,
} from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withSpring,
  withTiming,
  interpolate,
  Extrapolation,
} from 'react-native-reanimated';
import DateTimePicker from '@react-native-community/datetimepicker';
import { theme } from '../../constants';
import CalendarDateIcon from '../../../assets/calendar-date.svg';
import * as ImagePicker from 'expo-image-picker';
import { VideoView, useVideoPlayer } from 'expo-video';
import ImageIcon from '../../../assets/image-03.svg';

import { orderService } from '../../services/orderService';
import { mediaService } from '../../services/mediaService';
import { locationService, LocationCoords } from '../../services/locationService';
import { CreateOrderRequest } from '../../types';
import { useNavigation } from '@react-navigation/native';
import {
  AnimatedProgressBar,
  AnimatedStepContainer,
  AnimatedField,
  AnimatedCategoryGrid,
  AnimatedNavigationButton,
  AnimatedInteractiveContainer,
  AnimatedSummaryGrid,
} from '../../components/common/AnimatedComponents';

const { width: screenWidth } = Dimensions.get('window');

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const VideoPreview: React.FC<{ uri: string }> = ({ uri }) => {
  const [hasError, setHasError] = useState(false);

  console.log('[VideoPreview] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ:', uri);

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
  if (hasError) {
    console.log('[VideoPreview] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
    return (
      <View style={[styles.mediaImage, styles.videoErrorPlaceholder]}>
        <Text style={styles.videoErrorText}>üìπ</Text>
      </View>
    );
  }

  try {
    console.log('[VideoPreview] –°–æ–∑–¥–∞–µ–º video player...');
    const player = useVideoPlayer(uri);

    console.log('[VideoPreview] Player —Å–æ–∑–¥–∞–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º VideoView...');
    return (
      <VideoView
        player={player}
        style={styles.mediaImage}
        contentFit="cover"
        nativeControls={false}
      />
    );
  } catch (error) {
    console.error('[VideoPreview] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ player:', error);
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
    return (
      <View style={[styles.mediaImage, styles.videoErrorPlaceholder]}>
        <Text style={styles.videoErrorText}>üìπ</Text>
      </View>
    );
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —à–∞–≥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
const StepCounter: React.FC<{ currentStep: number; totalSteps: number }> = ({ currentStep, totalSteps }) => {
  return (
    <View style={styles.stepCounterContainer}>
      <Text style={styles.progressText}>{currentStep} –∏–∑ {totalSteps}</Text>
    </View>
  );
};



export const CreateOrderStepByStepScreen: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [budget, setBudget] = useState('');
  const [workersCount, setWorkersCount] = useState('1');
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isUploadingMedia, setIsUploadingMedia] = useState(false);
  const [mediaFiles, setMediaFiles] = useState<Array<{ uri: string; type: 'image' | 'video'; name: string; size: number }>>([]);
  const [mediaError, setMediaError] = useState<string | null>(null);
  const [location, setLocation] = useState('');
  const [coordinates, setCoordinates] = useState<LocationCoords | null>(null);
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [animationResetKey, setAnimationResetKey] = useState(0);
  const [locationUpdateKey, setLocationUpdateKey] = useState(0);

  // Ref –¥–ª—è –ø–æ–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const locationInputRef = useRef<any>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const [titleFocused, setTitleFocused] = useState(false);
  const [descriptionFocused, setDescriptionFocused] = useState(false);
  const [locationFocused, setLocationFocused] = useState(false);
  const [budgetFocused, setBudgetFocused] = useState(false);

  const navigation = useNavigation();

  const totalSteps = 9;

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π location
  useEffect(() => {
    console.log('[CreateOrderStepByStep] üìç location –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', location);
  }, [location]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Ñ–æ–∫—É—Å–∞
  const getInputStyle = (isFocused: boolean, isTextArea: boolean = false) => [
    styles.stepInput,
    isTextArea && styles.textArea,
    isFocused && styles.stepInputFocused,
  ];

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categories = [
    { label: '–°—Ç—Ä–æ–π–∫–∞', emoji: 'üèóÔ∏è' },
    { label: '–£–±–æ—Ä–∫–∞', emoji: 'üßπ' },
    { label: '–°–∞–¥', emoji: 'üå≥' },
    { label: '–û–±—â–µ–ø–∏—Ç', emoji: 'üçΩÔ∏è' },
    { label: '–ü–µ—Ä–µ–µ–∑–¥', emoji: 'üöö' },
    { label: '–ü—Ä–æ—á–µ–µ', emoji: '‚ú®' },
  ];

  const handleDateChange = (event: any, date?: Date) => {
    if (Platform.OS === 'android') {
      setShowDatePicker(false);
    }
    if (date) {
      setSelectedDate(date);
    }
  };

  const showDatePickerHandler = () => {
    setShowDatePicker(true);
  };

  const formatDate = (date: Date | null) => {
    if (!date) return '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
    return date.toLocaleDateString('ru-RU', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    });
  };

  function formatBudgetInput(value: string) {
    const digits = value.replace(/\D/g, '');
    if (!digits) return '';
    return digits.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
  }

  const pickMedia = async () => {
    setMediaError(null);
    if (mediaFiles.length >= 5) {
      setMediaError('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤');
      return;
    }
    Alert.alert(
      '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ',
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫',
      [
        {
          text: '–°–Ω—è—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ',
          onPress: async () => {
            const { status } = await ImagePicker.requestCameraPermissionsAsync();
            if (status !== 'granted') {
              Alert.alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
              return;
            }
            let result = await ImagePicker.launchCameraAsync({
              mediaTypes: ['images', 'videos'],
              quality: 0.8,
            });
            handleMediaResult(result);
          },
        },
        {
          text: '–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏',
          onPress: async () => {
            const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
            if (status !== 'granted') {
              Alert.alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ');
              return;
            }
            let result = await ImagePicker.launchImageLibraryAsync({
              mediaTypes: ['images', 'videos'],
              allowsMultipleSelection: true,
              selectionLimit: 5 - mediaFiles.length,
              quality: 0.8,
            });
            handleMediaResult(result);
          },
        },
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
      ]
    );
  };

  const handleMediaResult = (result: any) => {
    if (!result.canceled) {
      let validFiles = result.assets.filter((asset: any) => {
        if (!['image', 'video'].includes(asset.type ?? '')) {
          setMediaError('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ');
          return false;
        }
        return true;
      });

      let newFiles = validFiles.map((asset: any) => ({
        uri: asset.uri,
        type: (asset.type ?? 'file') as 'image' | 'video',
        name: asset.fileName || asset.uri.split('/').pop() || 'file',
        size: asset.fileSize || 0,
      }));

      const currentTotalSize = mediaFiles.reduce((sum: number, file: { uri: string; type: 'image' | 'video'; name: string; size: number }) => sum + file.size, 0);
      const newTotalSize = newFiles.reduce((sum: number, file: { uri: string; type: 'image' | 'video'; name: string; size: number }) => sum + file.size, 0);
      const maxTotalSize = 50 * 1024 * 1024; // 50 –ú–ë

      if (currentTotalSize + newTotalSize > maxTotalSize) {
        const remainingSize = Math.max(0, maxTotalSize - currentTotalSize);
        const remainingSizeMB = (remainingSize / (1024 * 1024)).toFixed(1);
        setMediaError(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 50 –ú–ë. –î–æ—Å—Ç—É–ø–Ω–æ: ${remainingSizeMB} –ú–ë`);
        return;
      }

      const updatedFiles = [...mediaFiles, ...newFiles];
      if (updatedFiles.length > 5) {
        setMediaError('–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤');
        return;
      }

      setMediaFiles(updatedFiles);
      setMediaError('');
    }
  };

  const removeMedia = (index: number) => {
    setMediaFiles(files => files.filter((_, i) => i !== index));
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const getCurrentLocation = async () => {
    try {
      console.log('[getCurrentLocation] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      setIsGettingLocation(true);

      const coords = await locationService.getCurrentLocation();
      console.log('[getCurrentLocation] üìç –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', coords);

      if (coords) {
        setCoordinates(coords);
        console.log('[getCurrentLocation] ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');

        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        console.log('[getCurrentLocation] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        const geocodeResult = await locationService.reverseGeocode(coords.latitude, coords.longitude);
        console.log('[getCurrentLocation] üè† –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', geocodeResult);

        if (geocodeResult) {
          console.log('[getCurrentLocation] üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å:', geocodeResult.address);
          setLocation(geocodeResult.address);
          console.log('[getCurrentLocation] ‚úÖ setLocation() –≤—ã–∑–≤–∞–Ω —Å –∞–¥—Ä–µ—Å–æ–º');

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TextInput
          setLocationUpdateKey(prev => prev + 1);
        } else {
          const coordsString = `${coords.latitude.toFixed(6)}, ${coords.longitude.toFixed(6)}`;
          console.log('[getCurrentLocation] üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫—É:', coordsString);
          setLocation(coordsString);
          console.log('[getCurrentLocation] ‚úÖ setLocation() –≤—ã–∑–≤–∞–Ω —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TextInput
          setLocationUpdateKey(prev => prev + 1);
        }

        Alert.alert('–£—Å–ø–µ—à–Ω–æ!', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
      } else {
        console.log('[getCurrentLocation] ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        Alert.alert(
          '–û—à–∏–±–∫–∞',
          '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.'
        );
      }
    } catch (error) {
      console.error('[getCurrentLocation] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
    } finally {
      console.log('[getCurrentLocation] üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
      setIsGettingLocation(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –±–µ–∑ –ø–æ–∫–∞–∑–∞ Alert'–æ–≤
  const isCurrentStepValid = (): boolean => {
    switch (currentStep) {
      case 1: // –ù–∞–∑–≤–∞–Ω–∏–µ
        return title.trim().length > 0;
      case 2: // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        return category.length > 0;
      case 3: // –û–ø–∏—Å–∞–Ω–∏–µ
        return description.trim().length > 0;
      case 4: // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        return location.trim().length > 0;
      case 5: // –ë—é–¥–∂–µ—Ç
        return budget.trim().length > 0;
      case 6: // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        return !!workersCount && !isNaN(parseInt(workersCount)) && parseInt(workersCount) >= 1;
      case 7: // –î–∞—Ç–∞
        return selectedDate !== null;
      case 8: // –ú–µ–¥–∏–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        return true;
      case 9: // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return true;
      default:
        return true;
    }
  };

  const validateCurrentStep = (): boolean => {
    switch (currentStep) {
      case 1: // –ù–∞–∑–≤–∞–Ω–∏–µ
        if (!title.trim()) {
          Alert.alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
          return false;
        }
        return true;
      case 2: // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if (!category) {
          Alert.alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
          return false;
        }
        return true;
      case 3: // –û–ø–∏—Å–∞–Ω–∏–µ
        if (!description.trim()) {
          Alert.alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ', '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å');
          return false;
        }
        return true;
      case 4: // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if (!location.trim()) {
          Alert.alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ', '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
          return false;
        }
        return true;
      case 5: // –ë—é–¥–∂–µ—Ç
        if (!budget.trim()) {
          Alert.alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ', '–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç');
          return false;
        }
        return true;
      case 6: // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        if (!workersCount || parseInt(workersCount) < 1) {
          Alert.alert('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤');
          return false;
        }
        return true;
      case 7: // –î–∞—Ç–∞
        if (!selectedDate) {
          Alert.alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
          return false;
        }
        return true;
      case 8: // –ú–µ–¥–∏–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        return true;
      case 9: // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return true;
      default:
        return true;
    }
  };

  const nextStep = () => {
    if (validateCurrentStep()) {
      if (currentStep < totalSteps) {
        setCurrentStep(currentStep + 1);
      }
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    console.log('[CreateOrder] üöÄ –ù–ê–ß–ê–õ–û handleSubmit');

    try {
      console.log('[CreateOrder] üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è...');
      if (!title.trim() || !description.trim() || !category || !budget.trim() || !selectedDate || !location.trim()) {
        console.log('[CreateOrder] ‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
        Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
      }
      console.log('[CreateOrder] ‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');

      console.log('[CreateOrder] üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading...');
      setIsLoading(true);

      console.log('[CreateOrder] üìÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞...');
      let mediaUrls: string[] = [];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      if (mediaFiles.length > 0) {
        console.log('[CreateOrder] üì∑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:', mediaFiles.length);
        console.log('[CreateOrder] üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isUploadingMedia...');
        setIsUploadingMedia(true);

        try {
          console.log('[CreateOrder] üì§ –í—ã–∑—ã–≤–∞–µ–º mediaService.uploadMediaFiles...');
          const mediaUploadResult = await mediaService.uploadMediaFiles(mediaFiles);
          console.log('[CreateOrder] üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞:', mediaUploadResult);

          console.log('[CreateOrder] üîÑ –û—Ç–∫–ª—é—á–∞–µ–º isUploadingMedia...');
          setIsUploadingMedia(false);

          if (!mediaUploadResult.success) {
            console.log('[CreateOrder] ‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ URI');
            mediaUrls = mediaFiles.map(file => file.uri);
            console.log('[CreateOrder] üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö...');
            Alert.alert(
              '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
              '–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase Storage.',
              [{ text: '–û–ö' }]
            );
          } else {
            mediaUrls = mediaUploadResult.urls || [];
            console.log('[CreateOrder] ‚úÖ –ú–µ–¥–∏–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, URLs:', mediaUrls.length);
          }
        } catch (mediaError) {
          console.error('[CreateOrder] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞:', mediaError);
          console.log('[CreateOrder] üîÑ –û—Ç–∫–ª—é—á–∞–µ–º isUploadingMedia –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
          setIsUploadingMedia(false);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ URI –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          mediaUrls = mediaFiles.map(file => file.uri);
          console.log('[CreateOrder] üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –æ–± –æ—à–∏–±–∫–µ –º–µ–¥–∏–∞...');
          Alert.alert(
            '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–µ–¥–∏–∞. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.'
          );
        }
      } else {
        console.log('[CreateOrder] üì∑ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      }

      console.log('[CreateOrder] üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞...');
      const orderData: CreateOrderRequest = {
        title: title.trim(),
        description: description.trim(),
        category,
        location: location.trim(),
        latitude: coordinates?.latitude,
        longitude: coordinates?.longitude,
        budget: parseFloat(budget.replace(/[^\d]/g, '')),
        workersNeeded: parseInt(workersCount),
        serviceDate: selectedDate!.toISOString(),
        photos: mediaUrls,
      };

      console.log('[CreateOrder] üìã –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        ...orderData,
        photos: `${mediaUrls.length} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤`
      });

      console.log('[CreateOrder] üåê –í—ã–∑—ã–≤–∞–µ–º orderService.createOrder...');
      const response = await orderService.createOrder(orderData);
      console.log('[CreateOrder] üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);

      if (response.success) {
        console.log('[CreateOrder] ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('[CreateOrder] üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –æ–± —É—Å–ø–µ—Ö–µ...');
        Alert.alert(
          '–£—Å–ø–µ—à–Ω–æ!',
          mediaFiles.length > 0
            ? `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ${mediaFiles.length} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏! –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥—è—Ç –µ–≥–æ.`
            : '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥—è—Ç –µ–≥–æ.',
          [
            {
              text: '–û–ö',
              onPress: () => {
                console.log('[CreateOrder] üîô –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û–ö, –Ω–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...');
                try {
                  console.log('[CreateOrder] üßπ –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É...');
                  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
                  setTitle('');
                  setDescription('');
                  setCategory('');
                  setBudget('');
                  setWorkersCount('1');
                  setSelectedDate(null);
                  setLocation('');
                  setCoordinates(null);
                  setIsGettingLocation(false);
                  setMediaFiles([]);
                  setMediaError('');
                  setCurrentStep(1);
                  // –°–±—Ä–æ—Å –∫–ª—é—á–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
                  setAnimationResetKey(prev => prev + 1);

                  console.log('[CreateOrder] ‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...');
                  navigation.goBack();
                } catch (cleanupError) {
                  console.error('[CreateOrder] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', cleanupError);
                  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                  console.log('[CreateOrder] ‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏...');
                  navigation.goBack();
                }
              }
            }
          ]
        );
      } else {
        console.error('[CreateOrder] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', response.error);
        console.log('[CreateOrder] üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –æ–± –æ—à–∏–±–∫–µ...');
        Alert.alert('–û—à–∏–±–∫–∞', response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (error) {
      console.error('[CreateOrder] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      console.log('[CreateOrder] üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ...');
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      console.log('[CreateOrder] üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï handleSubmit - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏...');
      setIsLoading(false);
      setIsUploadingMedia(false);
    }
  };

  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞';
      case 2: return '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã';
      case 3: return '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã';
      case 4: return '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
      case 5: return '–ë—é–¥–∂–µ—Ç';
      case 6: return '–ö–æ–º–∞–Ω–¥–∞';
      case 7: return '–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
      case 8: return '–§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ';
      case 9: return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ';
      default: return '';
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <AnimatedStepContainer isActive={currentStep === 1} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 1} delay={0} resetKey={`${animationResetKey}-step-1`}>
                <Text style={styles.stepTitle}>–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –∑–∞–∫–∞–∑?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 1} delay={150} resetKey={`${animationResetKey}-step-1`}>
                <Text style={styles.stepSubtitle}>–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 1} delay={200} resetKey={`${animationResetKey}-step-1`}>
                <View style={styles.inputContainer}>
                  <TextInput
                    style={getInputStyle(titleFocused)}
                    value={title}
                    onChangeText={setTitle}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
                    placeholderTextColor={theme.colors.text.secondary}
                    autoFocus
                    onFocus={() => setTitleFocused(true)}
                    onBlur={() => setTitleFocused(false)}
                  />
                </View>
              </AnimatedField>
            </View>
          </AnimatedStepContainer>
        );

      case 2:
        return (
          <AnimatedStepContainer isActive={currentStep === 2} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 2} delay={0} resetKey={`${animationResetKey}-step-2`}>
                <Text style={styles.stepTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 2} delay={150} resetKey={`${animationResetKey}-step-2`}>
                <Text style={styles.stepSubtitle}>–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–µ–Ω?</Text>
              </AnimatedField>

              <AnimatedCategoryGrid
                categories={categories}
                selectedCategory={category}
                onSelectCategory={setCategory}
                isActive={currentStep === 2}
                resetKey={`${animationResetKey}-step-2`}
              />
            </View>
          </AnimatedStepContainer>
        );

      case 3:
        return (
          <AnimatedStepContainer isActive={currentStep === 3} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 3} delay={0} resetKey={`${animationResetKey}-step-3`}>
                <Text style={styles.stepTitle}>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 3} delay={150} resetKey={`${animationResetKey}-step-3`}>
                <Text style={styles.stepSubtitle}>–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 3} delay={200} resetKey={`${animationResetKey}-step-3`}>
                <View style={styles.inputContainer}>
                  <TextInput
                    style={getInputStyle(descriptionFocused, true)}
                    value={description}
                    onChangeText={setDescription}
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∫–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç —Ä–∞–±–æ—Ç–∞..."
                    placeholderTextColor={theme.colors.text.secondary}
                    multiline
                    numberOfLines={6}
                    textAlignVertical="top"
                    autoFocus
                    onFocus={() => setDescriptionFocused(true)}
                    onBlur={() => setDescriptionFocused(false)}
                  />
                </View>
              </AnimatedField>
            </View>
          </AnimatedStepContainer>
        );

      case 4:
        return (
          <AnimatedStepContainer isActive={currentStep === 4} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 4} delay={0} resetKey={`${animationResetKey}-step-4`}>
                <Text style={styles.stepTitle}>–ì–¥–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 4} delay={150} resetKey={`${animationResetKey}-step-4`}>
                <Text style={styles.stepSubtitle}>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 4} delay={200} resetKey={`${animationResetKey}-step-4`}>
                <View style={styles.inputContainer}>
                  <TextInput
                    ref={locationInputRef}
                    key={`location-input-${locationUpdateKey}`}
                    style={getInputStyle(locationFocused)}
                    value={location}
                    onChangeText={setLocation}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞ 15"
                    placeholderTextColor={theme.colors.text.secondary}
                    onFocus={() => setLocationFocused(true)}
                    onBlur={() => setLocationFocused(false)}
                  />
                  <TouchableOpacity
                    style={styles.locationButton}
                    onPress={() => {
                      console.log('[Button] üîò –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞');
                      getCurrentLocation();
                    }}
                    disabled={isGettingLocation}
                  >
                    <Text style={styles.locationButtonText}>
                      {isGettingLocation ? 'üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...' : 'üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'}
                    </Text>
                  </TouchableOpacity>

                </View>
              </AnimatedField>
            </View>
          </AnimatedStepContainer>
        );

      case 5:
        return (
          <AnimatedStepContainer isActive={currentStep === 5} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 5} delay={0} resetKey={`${animationResetKey}-step-5`}>
                <Text style={styles.stepTitle}>–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 5} delay={150} resetKey={`${animationResetKey}-step-5`}>
                <Text style={styles.stepSubtitle}>–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 5} delay={200} resetKey={`${animationResetKey}-step-5`}>
                <View style={styles.inputContainer}>
                  <Text style={styles.fieldLabel}>–°—É–º–º–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</Text>
                  <TextInput
                    style={getInputStyle(budgetFocused)}
                    value={formatBudgetInput(budget)}
                    onChangeText={text => setBudget(formatBudgetInput(text))}
                    placeholder="100 000"
                    placeholderTextColor={theme.colors.text.secondary}
                    keyboardType="numeric"
                    autoFocus
                    onFocus={() => setBudgetFocused(true)}
                    onBlur={() => setBudgetFocused(false)}
                  />
                </View>
              </AnimatedField>
            </View>
          </AnimatedStepContainer>
        );

      case 6:
        return (
          <AnimatedStepContainer isActive={currentStep === 6} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 6} delay={0} resetKey={`${animationResetKey}-step-6`}>
                <Text style={styles.stepTitle}>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ª—é–¥–µ–π?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 6} delay={150} resetKey={`${animationResetKey}-step-6`}>
                <Text style={styles.stepSubtitle}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 6} delay={200} resetKey={`${animationResetKey}-step-6`}>
                <View style={styles.inputContainer}>
                  <Text style={styles.fieldLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤</Text>
                </View>
              </AnimatedField>

              <AnimatedInteractiveContainer isActive={currentStep === 6} delay={250} resetKey={`${animationResetKey}-step-6`}>
                <View style={styles.workersContainer}>
                  <TouchableOpacity
                    style={styles.workersButton}
                    onPress={() => {
                      const count = Math.max(1, parseInt(workersCount) - 1);
                      setWorkersCount(count.toString());
                    }}
                  >
                    <Text style={styles.workersButtonText}>‚àí</Text>
                  </TouchableOpacity>
                  <View style={styles.workersDisplay}>
                    <Text style={styles.workersText}>{workersCount}</Text>
                  </View>
                  <TouchableOpacity
                    style={styles.workersButton}
                    onPress={() => {
                      const count = Math.min(20, parseInt(workersCount) + 1);
                      setWorkersCount(count.toString());
                    }}
                  >
                    <Text style={styles.workersButtonText}>+</Text>
                  </TouchableOpacity>
                </View>
              </AnimatedInteractiveContainer>
            </View>
          </AnimatedStepContainer>
        );

      case 7:
        return (
          <AnimatedStepContainer isActive={currentStep === 7} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 7} delay={0} resetKey={`${animationResetKey}-step-7`}>
                <Text style={styles.stepTitle}>–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 7} delay={150} resetKey={`${animationResetKey}-step-7`}>
                <Text style={styles.stepSubtitle}>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É</Text>
              </AnimatedField>

              <AnimatedInteractiveContainer isActive={currentStep === 7} delay={200} resetKey={`${animationResetKey}-step-7`}>
                <View style={styles.inputContainer}>
                  <TouchableOpacity
                    style={styles.dateSelector}
                    onPress={showDatePickerHandler}
                  >
                    <CalendarDateIcon width={24} height={24} stroke={theme.colors.primary} />
                    <Text style={[
                      styles.dateText,
                      !selectedDate && styles.dateTextPlaceholder
                    ]}>
                      {formatDate(selectedDate)}
                    </Text>
                  </TouchableOpacity>
                </View>
              </AnimatedInteractiveContainer>
            </View>
          </AnimatedStepContainer>
        );

      case 8:
        return (
          <AnimatedStepContainer isActive={currentStep === 8} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 8} delay={0} resetKey={`${animationResetKey}-step-8`}>
                <Text style={styles.stepTitle}>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ?</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 8} delay={150} resetKey={`${animationResetKey}-step-8`}>
                <Text style={styles.stepSubtitle}>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∑–∞–¥–∞—á—É</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 8} delay={200} resetKey={`${animationResetKey}-step-8`}>
                <View style={styles.mediaContainer}>
                  {mediaFiles.map((file, idx) => (
                    <AnimatedField key={file.uri} isActive={currentStep === 8} delay={250 + idx * 50} resetKey={`${animationResetKey}-${file.uri}`}>
                      <View style={styles.mediaItem}>
                        {file.type === 'image' ? (
                          <Image source={{ uri: file.uri }} style={styles.mediaImage} resizeMode="cover" />
                        ) : (
                          <VideoPreview uri={file.uri} />
                        )}
                        <TouchableOpacity style={styles.removeMediaBtn} onPress={() => removeMedia(idx)}>
                          <Text style={styles.removeMediaText}>√ó</Text>
                        </TouchableOpacity>
                      </View>
                    </AnimatedField>
                  ))}
                  {mediaFiles.length < 5 && (
                    <AnimatedInteractiveContainer isActive={currentStep === 8} delay={300} resetKey={`${animationResetKey}-step-8`}>
                      <TouchableOpacity style={styles.addMediaButton} onPress={pickMedia}>
                        <ImageIcon width={32} height={32} stroke={theme.colors.primary} />
                        <Text style={styles.addMediaText}>–î–æ–±–∞–≤–∏—Ç—å</Text>
                      </TouchableOpacity>
                    </AnimatedInteractiveContainer>
                  )}
                </View>
              </AnimatedField>
              {mediaError && (
                <AnimatedField isActive={currentStep === 8} delay={200} resetKey={`${animationResetKey}-step-8`}>
                  <Text style={styles.mediaError}>{mediaError}</Text>
                </AnimatedField>
              )}
            </View>
          </AnimatedStepContainer>
        );

      case 9:
        return (
          <AnimatedStepContainer isActive={currentStep === 9} direction="right">
            <View style={styles.stepContent}>
              <AnimatedField isActive={currentStep === 9} delay={0} resetKey={`${animationResetKey}-step-9`}>
                <Text style={styles.stepTitle}>üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ!</Text>
              </AnimatedField>

              <AnimatedField isActive={currentStep === 9} delay={150} resetKey={`${animationResetKey}-step-9`}>
                <Text style={styles.stepSubtitle}>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π</Text>
              </AnimatedField>

              <View style={styles.summaryContainer}>
                <AnimatedSummaryGrid
                  items={(() => {
                    if (mediaFiles.length > 0) {
                      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã, —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –≤ –ø–∞—Ä–µ —Å –¥–∞—Ç–æ–π
                      return [
                        { label: "–ù–∞–∑–≤–∞–Ω–∏–µ", value: title },
                        { label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value: category },
                        { label: "–û–ø–∏—Å–∞–Ω–∏–µ", value: description },
                        { label: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", value: location },
                        { label: "–ë—é–¥–∂–µ—Ç", value: `${formatBudgetInput(budget)} —Å—É–º/—á–µ–ª` },
                        { label: "–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤", value: `${workersCount} —á–µ–ª–æ–≤–µ–∫` },
                        { label: "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã", value: `${mediaFiles.length} —Ñ–∞–π–ª–∞` },
                        { label: "–î–∞—Ç–∞", value: formatDate(selectedDate) }
                      ];
                    } else {
                      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
                      return [
                        { label: "–ù–∞–∑–≤–∞–Ω–∏–µ", value: title },
                        { label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value: category },
                        { label: "–û–ø–∏—Å–∞–Ω–∏–µ", value: description },
                        { label: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", value: location },
                        { label: "–ë—é–¥–∂–µ—Ç", value: `${formatBudgetInput(budget)} —Å—É–º/—á–µ–ª` },
                        { label: "–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤", value: `${workersCount} —á–µ–ª–æ–≤–µ–∫` },
                        { label: "–î–∞—Ç–∞", value: formatDate(selectedDate) }
                      ];
                    }
                  })()}
                  isActive={currentStep === 9}
                  resetKey={`${animationResetKey}-step-9`}
                />
              </View>
            </View>
          </AnimatedStepContainer>
        );

      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeArea}>
        <KeyboardAvoidingView
          style={styles.content}
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
        >
          {/* Header */}
          <View style={styles.header}>
            <TouchableOpacity
              style={styles.backButton}
              onPress={() => navigation.goBack()}
            >
              <Text style={styles.backButtonText}>‚Üê</Text>
            </TouchableOpacity>
            <Text style={styles.headerTitle}>{getStepTitle()}</Text>
            <View style={styles.headerRight} />
          </View>

          {/* Progress */}
          <AnimatedProgressBar progress={currentStep} total={totalSteps} />
          <StepCounter currentStep={currentStep} totalSteps={totalSteps} />

          {/* Content */}
          <View style={styles.mainContent}>
            {renderStep()}
          </View>

          {/* Navigation */}
          <View style={styles.navigation}>
            {currentStep > 1 && (
              <AnimatedNavigationButton
                variant="secondary"
                onPress={prevStep}
                isVisible={currentStep > 1}
                delay={0}
                resetKey={`${animationResetKey}-step-${currentStep}`}
              >
                <Text style={styles.secondaryButtonText}>–ù–∞–∑–∞–¥</Text>
              </AnimatedNavigationButton>
            )}

            <View style={styles.navigationSpacer} />

            {currentStep < totalSteps ? (
              isCurrentStepValid() && (
                <AnimatedNavigationButton
                  variant="primary"
                  onPress={nextStep}
                  isVisible={currentStep < totalSteps && isCurrentStepValid()}
                  delay={0}
                  resetKey={`${animationResetKey}-step-${currentStep}`}
                >
                  <Text style={styles.primaryButtonText}>–î–∞–ª–µ–µ</Text>
                </AnimatedNavigationButton>
              )
            ) : (
              <AnimatedNavigationButton
                variant="primary"
                onPress={handleSubmit}
                disabled={isLoading || isUploadingMedia}
                isVisible={currentStep === totalSteps}
                delay={0}
                resetKey={`${animationResetKey}-step-${currentStep}`}
              >
                <Text style={styles.primaryButtonText}>
                  {isUploadingMedia ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º...' : isLoading ? 'üöÄ –°–æ–∑–¥–∞–µ–º...' : '‚ú® –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                </Text>
              </AnimatedNavigationButton>
            )}
          </View>

          {/* Simple Loading Indicator */}
          <Modal
            visible={isLoading || isUploadingMedia}
            transparent={true}
            animationType="fade"
          >
            <View style={styles.loadingOverlay}>
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color={theme.colors.primary} />
                <Text style={styles.loadingText}>
                  {isUploadingMedia ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞...' : '–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...'}
                </Text>
              </View>
            </View>
          </Modal>

          {/* Date Picker */}
          {showDatePicker && (
            <View style={styles.datePickerContainer}>
              {Platform.OS === 'ios' && (
                <View style={styles.datePickerHeader}>
                  <TouchableOpacity
                    style={styles.doneButton}
                    onPress={() => setShowDatePicker(false)}
                  >
                    <Text style={styles.doneButtonText}>–ì–æ—Ç–æ–≤–æ</Text>
                  </TouchableOpacity>
                </View>
              )}
              <DateTimePicker
                value={selectedDate || new Date()}
                mode="date"
                display={Platform.OS === 'android' ? 'calendar' : 'spinner'}
                onChange={handleDateChange}
                minimumDate={new Date()}
                locale="ru-RU"
              />
            </View>
          )}
        </KeyboardAvoidingView>
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  safeArea: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.md,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: theme.colors.surface,
    justifyContent: 'center',
    alignItems: 'center',
  },
  backButtonText: {
    fontSize: 20,
    color: theme.colors.text.primary,
  },
  headerTitle: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
  },
  headerRight: {
    width: 40,
  },
  stepCounterContainer: {
    paddingHorizontal: theme.spacing.lg,
    paddingBottom: theme.spacing.sm,
  },
  progressText: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
    textAlign: 'center',
  },
  mainContent: {
    flex: 1,
  },

  stepContent: {
    flex: 1,
    paddingTop: theme.spacing.xl,
  },
  stepTitle: {
    fontSize: theme.fonts.sizes.xxl,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  stepSubtitle: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.xl,
    lineHeight: 22,
  },
  inputContainer: {
    marginBottom: theme.spacing.lg,
  },
  stepInput: {
    backgroundColor: theme.colors.surface,
    borderWidth: 2,
    borderColor: theme.colors.border,
    borderRadius: theme.borderRadius.lg,
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.lg,
    fontSize: theme.fonts.sizes.lg,
    color: theme.colors.text.primary,
    fontFamily: Platform.select({
      ios: 'System',
      android: 'Roboto',
    }),
  },
  stepInputFocused: {
    borderColor: theme.colors.primary,
    shadowColor: theme.colors.primary,
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 2,
  },
  textArea: {
    height: 120,
    paddingTop: theme.spacing.lg,
    textAlignVertical: 'top',
  },
  fieldLabel: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  categoryTitle: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.lg,
  },
  categoriesGrid: {
    paddingVertical: theme.spacing.lg,
    paddingHorizontal: theme.spacing.md,
  },
  workersContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: theme.colors.surface,
    borderWidth: 2,
    borderColor: theme.colors.border,
    borderRadius: theme.borderRadius.lg,
    paddingVertical: theme.spacing.md,
  },
  workersButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: theme.borderRadius.full,
    width: 50,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
  },
  workersButtonText: {
    color: theme.colors.white,
    fontSize: 24,
    fontWeight: theme.fonts.weights.bold,
  },
  workersDisplay: {
    backgroundColor: theme.colors.background,
    borderRadius: theme.borderRadius.md,
    paddingHorizontal: theme.spacing.xl,
    paddingVertical: theme.spacing.md,
    marginHorizontal: theme.spacing.lg,
  },
  workersText: {
    fontSize: theme.fonts.sizes.xl,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.text.primary,
    textAlign: 'center',
  },
  dateSelector: {
    backgroundColor: theme.colors.surface,
    borderWidth: 2,
    borderColor: theme.colors.border,
    borderRadius: theme.borderRadius.lg,
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  dateText: {
    fontSize: theme.fonts.sizes.lg,
    color: theme.colors.text.primary,
    marginLeft: theme.spacing.md,
    fontWeight: theme.fonts.weights.medium,
  },
  dateTextPlaceholder: {
    color: theme.colors.text.secondary,
  },
  mediaContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: theme.spacing.md,
  },
  mediaItem: {
    position: 'relative',
    width: 100,
    height: 100,
    borderRadius: theme.borderRadius.lg,
    overflow: 'hidden',
    backgroundColor: theme.colors.surface,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  mediaImage: {
    width: '100%',
    height: '100%',
  },
  removeMediaBtn: {
    position: 'absolute',
    top: 4,
    right: 4,
    backgroundColor: 'rgba(0,0,0,0.7)',
    borderRadius: 12,
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  removeMediaText: {
    color: theme.colors.white,
    fontSize: 16,
    fontWeight: 'bold',
  },
  addMediaButton: {
    width: 100,
    height: 100,
    borderRadius: theme.borderRadius.lg,
    borderWidth: 2,
    borderColor: theme.colors.primary,
    backgroundColor: theme.colors.surface,
    justifyContent: 'center',
    alignItems: 'center',
    borderStyle: 'dashed',
  },
  addMediaText: {
    color: theme.colors.primary,
    fontSize: theme.fonts.sizes.sm,
    marginTop: theme.spacing.xs,
    fontWeight: theme.fonts.weights.medium,
  },
  mediaError: {
    color: theme.colors.error || 'red',
    fontSize: theme.fonts.sizes.sm,
    marginTop: theme.spacing.sm,
  },
  summaryContainer: {
    paddingHorizontal: 0,
    marginTop: theme.spacing.md,
    marginBottom: theme.spacing.md,
  },
  navigation: {
    flexDirection: 'row',
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.lg,
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
    backgroundColor: theme.colors.background,
  },
  navigationSpacer: {
    flex: 1,
  },
  secondaryButton: {
    backgroundColor: theme.colors.surface,
    borderWidth: 2,
    borderColor: theme.colors.border,
    borderRadius: theme.borderRadius.lg,
    paddingHorizontal: theme.spacing.xl,
    paddingVertical: theme.spacing.md,
    marginRight: theme.spacing.md,
  },
  secondaryButtonText: {
    color: theme.colors.text.primary,
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.semiBold,
  },
  primaryButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: theme.borderRadius.lg,
    paddingHorizontal: theme.spacing.xl,
    paddingVertical: theme.spacing.md,
    shadowColor: theme.colors.primary,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  primaryButtonDisabled: {
    backgroundColor: theme.colors.disabled,
    shadowOpacity: 0,
    elevation: 0,
  },
  disabledButton: {
    backgroundColor: theme.colors.disabled,
    shadowOpacity: 0,
    elevation: 0,
  },
  primaryButtonText: {
    color: theme.colors.white,
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.bold,
  },
  datePickerContainer: {
    backgroundColor: theme.colors.white,
    borderTopLeftRadius: theme.borderRadius.lg,
    borderTopRightRadius: theme.borderRadius.lg,
    paddingTop: theme.spacing.md,
    paddingBottom: Platform.OS === 'ios' ? theme.spacing.xl : 0,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
  },
  datePickerHeader: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    paddingHorizontal: theme.spacing.md,
    paddingBottom: theme.spacing.sm,
  },
  doneButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: theme.borderRadius.md,
    paddingVertical: theme.spacing.sm,
    paddingHorizontal: theme.spacing.md,
  },
  doneButtonText: {
    color: theme.colors.white,
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.semiBold,
  },
  loadingOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingContainer: {
    backgroundColor: theme.colors.white,
    borderRadius: theme.borderRadius.lg,
    padding: theme.spacing.xl,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 8,
  },
  loadingText: {
    marginTop: theme.spacing.md,
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.primary,
    fontWeight: theme.fonts.weights.medium,
  },
  videoErrorPlaceholder: {
    backgroundColor: theme.colors.surface,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  videoErrorText: {
    fontSize: 32,
    opacity: 0.5,
  },
  locationButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: theme.borderRadius.md,
    paddingVertical: theme.spacing.lg,
    paddingHorizontal: theme.spacing.md,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: theme.spacing.md,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  locationButtonText: {
    color: theme.colors.white,
    fontSize: theme.fonts.sizes.sm,
    fontWeight: theme.fonts.weights.medium,
  },
});