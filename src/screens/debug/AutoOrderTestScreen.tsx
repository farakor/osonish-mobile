import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Alert,
  StyleSheet,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useTranslation } from 'react-i18next';
import { theme } from '../../constants';
import {
  createTestOrdersForAutoUpdate,
  forceAutoOrderUpdate,
  checkAutoUpdateResults,
  cleanupTestOrders,
} from '../../utils/testAutoOrderUpdates';

export const AutoOrderTestScreen: React.FC = () => {
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<string[]>([]);

  const addResult = (message: string) => {
    setResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const clearResults = () => {
    setResults([]);
  };

  const handleCreateTestOrders = async () => {
    setIsLoading(true);
    try {
      addResult('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
      await createTestOrdersForAutoUpdate();
      addResult('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      Alert.alert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
    } finally {
      setIsLoading(false);
    }
  };

  const handleForceUpdate = async () => {
    setIsLoading(true);
    try {
      addResult('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
      await forceAutoOrderUpdate();
      addResult('‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      Alert.alert('–£—Å–ø–µ—Ö', '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCheckResults = async () => {
    setIsLoading(true);
    try {
      addResult('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      await checkAutoUpdateResults();
      addResult('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)');
      Alert.alert('–ì–æ—Ç–æ–≤–æ', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCleanup = async () => {
    setIsLoading(true);
    try {
      addResult('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
      await cleanupTestOrders();
      addResult('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã');
      Alert.alert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
    } finally {
      setIsLoading(false);
    }
  };

  const TestButton: React.FC<{
    title: string;
    onPress: () => void;
    color?: string;
    disabled?: boolean;
  }> = ({ title, onPress, color = theme.colors.primary, disabled = false }) => (
    <TouchableOpacity
      style={[
        styles.button,
        { backgroundColor: disabled ? '#ccc' : color },
      ]}
      onPress={onPress}
      disabled={disabled || isLoading}
    >
      <Text style={styles.buttonText}>{title}</Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <Text style={styles.title}>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤</Text>

        <View style={styles.warningBox}>
          <Text style={styles.warningTitle}>‚ö†Ô∏è –í–∞–∂–Ω–æ</Text>
          <Text style={styles.warningText}>
            –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Expo Go. –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤—Ä—É—á–Ω—É—é.
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–®–∞–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</Text>

          <TestButton
            title="1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
            onPress={handleCreateTestOrders}
            color="#4CAF50"
          />

          <TestButton
            title="2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
            onPress={handleForceUpdate}
            color="#FF9800"
          />

          <TestButton
            title="3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            onPress={handleCheckResults}
            color="#2196F3"
          />

          <TestButton
            title="4. –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            onPress={handleCleanup}
            color="#F44336"
          />
        </View>

        <View style={styles.section}>
          <View style={styles.logHeader}>
            <Text style={styles.sectionTitle}>–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</Text>
            <TouchableOpacity onPress={clearResults} style={styles.clearButton}>
              <Text style={styles.clearButtonText}>–û—á–∏—Å—Ç–∏—Ç—å</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.logContainer}>
            {results.length === 0 ? (
              <Text style={styles.noLogsText}>–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π</Text>
            ) : (
              results.map((result, index) => (
                <Text key={index} style={styles.logText}>
                  {result}
                </Text>
              ))
            )}
          </View>
        </View>

        <View style={styles.infoBox}>
          <Text style={styles.infoTitle}>‚ÑπÔ∏è –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</Text>
          <Text style={styles.infoText}>
            ‚Ä¢ –ó–∞–∫–∞–∑—ã "–í —Ä–∞–±–æ—Ç–µ" ‚Üí "–ó–∞–≤–µ—Ä—à–µ–Ω" (auto_completed = true){'\n'}
            ‚Ä¢ –ó–∞–∫–∞–∑—ã "–ù–æ–≤—ã–π"/"–û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω" ‚Üí "–û—Ç–º–µ–Ω–µ–Ω" (auto_cancelled = true){'\n'}
            ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–∫–ª–∏–∫–æ–≤{'\n'}
            ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Text>
        </View>

        <View style={styles.infoBox}>
          <Text style={styles.infoTitle}>üîç –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</Text>
          <Text style={styles.infoText}>
            SELECT id, title, status, auto_completed, auto_cancelled{'\n'}
            FROM orders{'\n'}
            WHERE service_date = CURRENT_DATE{'\n'}
            ORDER BY updated_at DESC;
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: theme.colors.text.primary,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 12,
    color: theme.colors.text.primary,
  },
  button: {
    backgroundColor: theme.colors.primary,
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  warningBox: {
    backgroundColor: '#FFF3CD',
    padding: 16,
    borderRadius: 8,
    marginBottom: 20,
    borderLeftWidth: 4,
    borderLeftColor: '#FF9800',
  },
  warningTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#856404',
    marginBottom: 8,
  },
  warningText: {
    fontSize: 14,
    color: '#856404',
    lineHeight: 20,
  },
  infoBox: {
    backgroundColor: '#D1ECF1',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#2196F3',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0C5460',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#0C5460',
    lineHeight: 20,
    fontFamily: 'monospace',
  },
  logHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  clearButton: {
    backgroundColor: '#6c757d',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 4,
  },
  clearButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  logContainer: {
    backgroundColor: '#1e1e1e',
    padding: 12,
    borderRadius: 8,
    minHeight: 100,
    maxHeight: 200,
  },
  noLogsText: {
    color: '#888',
    fontStyle: 'italic',
    textAlign: 'center',
    marginTop: 20,
  },
  logText: {
    color: '#00ff00',
    fontSize: 12,
    fontFamily: 'monospace',
    marginBottom: 4,
  },
});
