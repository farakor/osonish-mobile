import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
} from 'react-native';
import { theme } from '../../constants/theme';

type ServiceCategory = {
  id: string;
  name: string;
  icon: string;
  description: string;
  isEnabled: boolean;
  avgPrice: string;
  demandLevel: 'high' | 'medium' | 'low';
};

const mockCategories: ServiceCategory[] = [
  {
    id: '1',
    name: '–£–±–æ—Ä–∫–∞ –¥–æ–º–∞',
    icon: 'üßπ',
    description: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞, –º—ã—Ç—å–µ –æ–∫–æ–Ω, —É–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
    isEnabled: true,
    avgPrice: '100-200 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'high',
  },
  {
    id: '2',
    name: '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
    icon: 'üîß',
    description: '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –∑–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π',
    isEnabled: true,
    avgPrice: '150-500 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'high',
  },
  {
    id: '3',
    name: '–î–æ—Å—Ç–∞–≤–∫–∞',
    icon: 'üöö',
    description: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –ø–µ—Ä–µ–≤–æ–∑–∫–∞ –º–µ–±–µ–ª–∏, –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
    isEnabled: false,
    avgPrice: '50-150 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'medium',
  },
  {
    id: '4',
    name: '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ',
    icon: 'üìö',
    description: '–ß–∞—Å—Ç–Ω—ã–µ —É—Ä–æ–∫–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, —è–∑—ã–∫–∏',
    isEnabled: false,
    avgPrice: '80-120 —Ç—ã—Å. —Å—É–º/—á–∞—Å',
    demandLevel: 'medium',
  },
  {
    id: '5',
    name: '–ö—Ä–∞—Å–æ—Ç–∞',
    icon: 'üíÑ',
    description: '–ú–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –º–∞–∫–∏—è–∂, –ø—Ä–∏—á–µ—Å–∫–∏',
    isEnabled: false,
    avgPrice: '50-100 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'high',
  },
  {
    id: '6',
    name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    icon: 'üì∏',
    description: '–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, —Å–æ–±—ã—Ç–∏–π–Ω–∞—è —Å—ä–µ–º–∫–∞',
    isEnabled: false,
    avgPrice: '200-500 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'low',
  },
  {
    id: '7',
    name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
    icon: 'üèóÔ∏è',
    description: '–ú–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç, –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
    isEnabled: true,
    avgPrice: '300-800 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'high',
  },
  {
    id: '8',
    name: 'IT —É—Å–ª—É–≥–∏',
    icon: 'üíª',
    description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ö, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û',
    isEnabled: false,
    avgPrice: '100-300 —Ç—ã—Å. —Å—É–º',
    demandLevel: 'medium',
  },
];

export const WorkerCategoriesScreen: React.FC = () => {
  const [categories, setCategories] = useState(mockCategories);

  const handleToggleCategory = (categoryId: string, newValue: boolean) => {
    setCategories(prev =>
      prev.map(category =>
        category.id === categoryId
          ? { ...category, isEnabled: newValue }
          : category
      )
    );

    const category = categories.find(c => c.id === categoryId);
    if (category) {
      Alert.alert(
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        newValue
          ? `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ "${category.name}" –≤ –≤–∞—à–∏ —É—Å–ª—É–≥–∏`
          : `–í—ã —É–±—Ä–∞–ª–∏ "${category.name}" –∏–∑ –≤–∞—à–∏—Ö —É—Å–ª—É–≥`,
        [{ text: 'OK' }]
      );
    }
  };

  const getDemandColor = (level: 'high' | 'medium' | 'low') => {
    switch (level) {
      case 'high': return theme.colors.primary;
      case 'medium': return '#FF9500';
      case 'low': return theme.colors.text.secondary;
    }
  };

  const getDemandText = (level: 'high' | 'medium' | 'low') => {
    switch (level) {
      case 'high': return '–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–æ—Å';
      case 'low': return '–ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å';
    }
  };

  const enabledCategories = categories.filter(c => c.isEnabled);

  const renderCategoryCard = (category: ServiceCategory) => (
    <View key={category.id} style={styles.categoryCard}>
      <View style={styles.categoryHeader}>
        <View style={styles.categoryInfo}>
          <View style={styles.categoryTitleRow}>
            <Text style={styles.categoryIcon}>{category.icon}</Text>
            <Text style={styles.categoryName}>{category.name}</Text>
          </View>
          <Text style={styles.categoryDescription}>{category.description}</Text>
        </View>

        <Switch
          value={category.isEnabled}
          onValueChange={(value) => handleToggleCategory(category.id, value)}
          trackColor={{
            false: theme.colors.border,
            true: `${theme.colors.primary}80`
          }}
          thumbColor={category.isEnabled ? theme.colors.primary : theme.colors.surface}
        />
      </View>

      <View style={styles.categoryDetails}>
        <View style={styles.detailItem}>
          <Text style={styles.detailLabel}>üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</Text>
          <Text style={styles.detailValue}>{category.avgPrice}</Text>
        </View>

        <View style={styles.detailItem}>
          <Text style={styles.detailLabel}>üìä –°–ø—Ä–æ—Å:</Text>
          <Text style={[
            styles.detailValue,
            { color: getDemandColor(category.demandLevel) }
          ]}>
            {getDemandText(category.demandLevel)}
          </Text>
        </View>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</Text>
        <Text style={styles.subtitle}>
          –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –æ–∫–∞–∑—ã–≤–∞—Ç—å
        </Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{enabledCategories.length}</Text>
            <Text style={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</Text>
          </View>
        </View>

        <View style={styles.categoriesContainer}>
          <Text style={styles.sectionTitle}>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</Text>
          {categories.map(renderCategoryCard)}
        </View>

        <View style={styles.bottomInfo}>
          <Text style={styles.infoText}>
            üí° –í–∫–ª—é—á–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏.
            –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞–º –Ω–∞–π—Ç–∏ –≤–∞—Å –±—ã—Å—Ç—Ä–µ–µ.
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  header: {
    paddingHorizontal: theme.spacing.lg,
    paddingTop: theme.spacing.lg,
    paddingBottom: theme.spacing.md,
  },
  title: {
    fontSize: theme.typography.fontSize.xl,
    fontWeight: theme.typography.fontWeight.bold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.xs,
  },
  subtitle: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    lineHeight: 20,
  },
  content: {
    flex: 1,
    paddingHorizontal: theme.spacing.lg,
  },
  statsContainer: {
    marginBottom: theme.spacing.lg,
  },
  statCard: {
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: theme.spacing.lg,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: theme.colors.border,
    shadowColor: theme.colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statNumber: {
    fontSize: 32,
    fontWeight: theme.typography.fontWeight.bold,
    color: theme.colors.primary,
    marginBottom: theme.spacing.xs,
  },
  statLabel: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    textAlign: 'center',
  },
  categoriesContainer: {
    marginBottom: theme.spacing.lg,
  },
  sectionTitle: {
    fontSize: theme.typography.fontSize.lg,
    fontWeight: theme.typography.fontWeight.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.md,
  },
  categoryCard: {
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: theme.spacing.lg,
    marginBottom: theme.spacing.md,
    borderWidth: 1,
    borderColor: theme.colors.border,
    shadowColor: theme.colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: theme.spacing.md,
  },
  categoryInfo: {
    flex: 1,
    marginRight: theme.spacing.md,
  },
  categoryTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: theme.spacing.sm,
  },
  categoryIcon: {
    fontSize: 24,
    marginRight: theme.spacing.sm,
  },
  categoryName: {
    fontSize: theme.typography.fontSize.lg,
    fontWeight: theme.typography.fontWeight.semiBold,
    color: theme.colors.text.primary,
  },
  categoryDescription: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    lineHeight: 18,
  },
  categoryDetails: {
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
    paddingTop: theme.spacing.md,
  },
  detailItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: theme.spacing.xs,
  },
  detailLabel: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
  },
  detailValue: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.primary,
    fontWeight: theme.typography.fontWeight.medium,
  },
  bottomInfo: {
    backgroundColor: `${theme.colors.primary}10`,
    borderRadius: theme.borderRadius.md,
    padding: theme.spacing.md,
    marginBottom: theme.spacing.lg,
  },
  infoText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    lineHeight: 20,
    textAlign: 'center',
  },
}); 