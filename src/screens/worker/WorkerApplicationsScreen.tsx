import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  FlatList,
} from 'react-native';
import { theme } from '../../constants/theme';


type ApplicationStatus = 'pending' | 'accepted' | 'rejected' | 'completed';

type Application = {
  id: string;
  jobId: string;
  jobTitle: string;
  jobCategory: string;
  customerName: string;
  customerRating: number;
  budget: number;
  status: ApplicationStatus;
  appliedAt: string;
  deadline: string;
  location: string;
  message: string;
};

const mockApplications: Application[] = [
  {
    id: '1',
    jobId: 'j1',
    jobTitle: '–£–±–æ—Ä–∫–∞ 3-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    jobCategory: '–£–±–æ—Ä–∫–∞ –¥–æ–º–∞',
    customerName: '–ê–∑–∏–∑–∞ –ö.',
    customerRating: 4.8,
    budget: 150000,
    status: 'accepted',
    appliedAt: '2024-01-15T10:30:00Z',
    deadline: '2024-01-20',
    location: '–¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥',
    message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–º–µ—é –æ–ø—ã—Ç —É–±–æ—Ä–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä –±–æ–ª–µ–µ 3 –ª–µ—Ç. –†–∞–±–æ—Ç–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫.',
  },
  {
    id: '2',
    jobId: 'j2',
    jobTitle: '–†–µ–º–æ–Ω—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã',
    jobCategory: '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
    customerName: '–§–∞—Ä—Ö–æ–¥ –ù.',
    customerRating: 4.9,
    budget: 200000,
    status: 'pending',
    appliedAt: '2024-01-14T15:45:00Z',
    deadline: '2024-01-18',
    location: '–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫',
    message: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω Samsung. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
  },
  {
    id: '3',
    jobId: 'j3',
    jobTitle: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–∞—à–Ω–µ–π —Å–µ—Ç–∏',
    jobCategory: 'IT —É—Å–ª—É–≥–∏',
    customerName: '–î–∏–ª—à–æ–¥ –ê.',
    customerRating: 4.6,
    budget: 120000,
    status: 'completed',
    appliedAt: '2024-01-10T09:15:00Z',
    deadline: '2024-01-12',
    location: '–¢–∞—à–∫–µ–Ω—Ç, –ß–∏–ª–∞–Ω–∑–∞—Ä',
    message: '–ù–∞—Å—Ç—Ä–æ—é —Ä–æ—É—Ç–µ—Ä –∏ Wi-Fi —Å–µ—Ç—å. –ì–∞—Ä–∞–Ω—Ç–∏—è 6 –º–µ—Å—è—Ü–µ–≤.',
  },
  {
    id: '4',
    jobId: 'j4',
    jobTitle: '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
    jobCategory: '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ',
    customerName: '–°–µ–≤–∞—Ä–∞ –ú.',
    customerRating: 4.7,
    budget: 100000,
    status: 'rejected',
    appliedAt: '2024-01-08T14:20:00Z',
    deadline: '2024-01-25',
    location: '–¢–∞—à–∫–µ–Ω—Ç, –°–µ—Ä–≥–µ–ª–∏',
    message: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å –æ–ø—ã—Ç–æ–º 5 –ª–µ—Ç. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.',
  },
  {
    id: '5',
    jobId: 'j5',
    jobTitle: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞',
    jobCategory: '–£–±–æ—Ä–∫–∞ –¥–æ–º–∞',
    customerName: '–û–û–û "–ë–∏–∑–Ω–µ—Å"',
    customerRating: 4.5,
    budget: 300000,
    status: 'accepted',
    appliedAt: '2024-01-12T11:00:00Z',
    deadline: '2024-01-16',
    location: '–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∞–±–∞–¥',
    message: '–í—ã–ø–æ–ª–Ω—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É–±–æ—Ä–∫—É –æ—Ñ–∏—Å–∞. –°–≤–æ–∏ –º–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.',
  },
];

export const WorkerApplicationsScreen: React.FC = () => {
  const [selectedStatus, setSelectedStatus] = useState<ApplicationStatus | 'all'>('all');

  const statusFilters = [
    { key: 'all', label: '–í—Å–µ', emoji: 'üìã', count: mockApplications.length },
    { key: 'pending', label: '–û–∂–∏–¥–∞–Ω–∏–µ', emoji: '‚è≥', count: mockApplications.filter(a => a.status === 'pending').length },
    { key: 'accepted', label: '–ü—Ä–∏–Ω—è—Ç–æ', emoji: '‚úÖ', count: mockApplications.filter(a => a.status === 'accepted').length },
    { key: 'completed', label: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', emoji: 'üéâ', count: mockApplications.filter(a => a.status === 'completed').length },
    { key: 'rejected', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', emoji: '‚ùå', count: mockApplications.filter(a => a.status === 'rejected').length },
  ];

  const filteredApplications = mockApplications.filter(app =>
    selectedStatus === 'all' || app.status === selectedStatus
  );

  const getStatusColor = (status: ApplicationStatus) => {
    switch (status) {
      case 'pending': return '#FF9500';
      case 'accepted': return theme.colors.primary;
      case 'rejected': return '#FF3B30';
      case 'completed': return '#6B7280';
      default: return theme.colors.text.secondary;
    }
  };

  const getStatusText = (status: ApplicationStatus) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–Ω–∏–µ';
      case 'accepted': return '–ü—Ä–∏–Ω—è—Ç–æ';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
      default: return status;
    }
  };

  const formatBudget = (amount: number) => {
    return `${amount.toLocaleString()} —Å—É–º`;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleApplicationAction = (applicationId: string, action: string) => {
    console.log(`Action: ${action} for application: ${applicationId}`);
    // TODO: Implement application actions
  };

  const renderStatusFilter = (filter: any) => (
    <TouchableOpacity
      key={filter.key}
      style={[
        styles.filterChip,
        selectedStatus === filter.key && styles.filterChipActive
      ]}
      onPress={() => setSelectedStatus(filter.key)}
    >
      <Text style={styles.filterEmoji}>{filter.emoji}</Text>
      <Text style={[
        styles.filterChipText,
        selectedStatus === filter.key && styles.filterChipTextActive
      ]}>
        {filter.label}
      </Text>
      <Text style={[
        styles.filterChipCount,
        selectedStatus === filter.key && styles.filterChipCountActive
      ]}>
        ({filter.count})
      </Text>
    </TouchableOpacity>
  );

  const renderApplicationCard = ({ item }: { item: Application }) => (
    <View style={styles.applicationCard}>
      <View style={styles.applicationHeader}>
        <View style={styles.applicationInfo}>
          <Text style={styles.jobTitle}>{item.jobTitle}</Text>
          <Text style={styles.jobCategory}>{item.jobCategory}</Text>
        </View>
        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>
          <Text style={styles.statusText}>{getStatusText(item.status)}</Text>
        </View>
      </View>

      <View style={styles.applicationDetails}>
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>üë§ –ó–∞–∫–∞–∑—á–∏–∫:</Text>
          <Text style={styles.detailValue}>
            {item.customerName} (‚≠ê {item.customerRating})
          </Text>
        </View>
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>üí∞ –ë—é–¥–∂–µ—Ç:</Text>
          <Text style={styles.detailValue}>{formatBudget(item.budget)}</Text>
        </View>
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>üìç –ú–µ—Å—Ç–æ:</Text>
          <Text style={styles.detailValue}>{item.location}</Text>
        </View>
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>üìÖ –°—Ä–æ–∫:</Text>
          <Text style={styles.detailValue}>{formatDate(item.deadline)}</Text>
        </View>
        <View style={styles.detailRow}>
          <Text style={styles.detailLabel}>üïê –ü–æ–¥–∞–Ω–æ:</Text>
          <Text style={styles.detailValue}>{formatDate(item.appliedAt)}</Text>
        </View>
      </View>

      <View style={styles.messageContainer}>
        <Text style={styles.messageLabel}>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</Text>
        <Text style={styles.messageText}>{item.message}</Text>
      </View>

      <View style={styles.applicationActions}>
        {item.status === 'pending' && (
          <TouchableOpacity
            style={styles.cancelButton}
            onPress={() => handleApplicationAction(item.id, 'cancel')}
          >
            <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É</Text>
          </TouchableOpacity>
        )}

        {item.status === 'accepted' && (
          <TouchableOpacity
            style={styles.contactButton}
            onPress={() => handleApplicationAction(item.id, 'contact')}
          >
            <Text style={styles.contactButtonText}>–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º</Text>
          </TouchableOpacity>
        )}

        {item.status === 'accepted' && (
          <TouchableOpacity
            style={styles.completeButton}
            onPress={() => handleApplicationAction(item.id, 'complete')}
          >
            <Text style={styles.completeButtonText}>–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.content}>
        <View style={styles.contentHeader}>
          <Text style={styles.title}>–ú–æ–∏ –∑–∞—è–≤–∫–∏</Text>
          <Text style={styles.subtitle}>
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–∫–∞–∑—ã
          </Text>
        </View>

        {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å —Å—Ç–∞—Ç—É—Å–æ–≤ */}
        <View style={styles.filtersSection}>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.filtersContainer}
            contentContainerStyle={styles.filtersContent}
          >
            {statusFilters.map(renderStatusFilter)}
          </ScrollView>
        </View>

        <FlatList
          data={filteredApplications}
          renderItem={renderApplicationCard}
          keyExtractor={(item) => item.id}
          style={styles.applicationsList}
          contentContainerStyle={styles.applicationsListContent}
          showsVerticalScrollIndicator={false}
          ListEmptyComponent={
            <View style={styles.emptyState}>
              <Text style={styles.emptyStateIcon}>üìù</Text>
              <Text style={styles.emptyStateTitle}>–ù–µ—Ç –∑–∞—è–≤–æ–∫</Text>
              <Text style={styles.emptyStateText}>
                {selectedStatus === 'all'
                  ? '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã'
                  : `–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${statusFilters.find(f => f.key === selectedStatus)?.label}"`
                }
              </Text>
            </View>
          }
        />
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  content: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  contentHeader: {
    paddingHorizontal: theme.spacing.lg,
    paddingTop: theme.spacing.lg,
    paddingBottom: theme.spacing.md,
  },
  title: {
    fontSize: theme.typography.fontSize.xl,
    fontWeight: theme.typography.fontWeight.bold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.xs,
  },
  subtitle: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    lineHeight: 20,
  },
  filtersSection: {
    marginBottom: theme.spacing.lg,
  },
  filtersContainer: {
    paddingHorizontal: theme.spacing.lg,
  },
  filtersContent: {
    paddingRight: theme.spacing.lg,
  },
  filterChip: {
    backgroundColor: theme.colors.surface,
    paddingHorizontal: theme.spacing.lg,
    paddingVertical: theme.spacing.lg,
    borderRadius: theme.borderRadius.lg,
    borderWidth: 1,
    borderColor: theme.colors.border,
    marginRight: theme.spacing.sm,
    alignItems: 'center',
    justifyContent: 'center',
    minWidth: 110,
    minHeight: 90,
    shadowColor: theme.colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  filterChipActive: {
    backgroundColor: theme.colors.primary,
    borderColor: theme.colors.primary,
    shadowColor: theme.colors.primary,
    shadowOpacity: 0.2,
  },
  filterEmoji: {
    fontSize: 28,
    marginBottom: theme.spacing.xs,
  },
  filterChipText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.primary,
    fontWeight: theme.typography.fontWeight.medium,
    textAlign: 'center',
    marginBottom: theme.spacing.xs,
  },
  filterChipTextActive: {
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.semiBold,
  },
  filterChipCount: {
    fontSize: theme.typography.fontSize.xs,
    color: theme.colors.text.secondary,
    fontWeight: theme.typography.fontWeight.medium,
    textAlign: 'center',
  },
  filterChipCountActive: {
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.semiBold,
  },
  applicationsList: {
    flex: 1,
  },
  applicationsListContent: {
    paddingHorizontal: theme.spacing.lg,
    paddingBottom: theme.spacing.lg,
  },
  applicationCard: {
    backgroundColor: theme.colors.surface,
    borderRadius: theme.borderRadius.lg,
    padding: theme.spacing.lg,
    marginBottom: theme.spacing.md,
    borderWidth: 1,
    borderColor: theme.colors.border,
    shadowColor: theme.colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  applicationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: theme.spacing.md,
  },
  applicationInfo: {
    flex: 1,
    marginRight: theme.spacing.md,
  },
  jobTitle: {
    fontSize: theme.typography.fontSize.lg,
    fontWeight: theme.typography.fontWeight.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.xs,
  },
  jobCategory: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.secondary,
    fontWeight: theme.typography.fontWeight.medium,
  },
  statusBadge: {
    paddingHorizontal: theme.spacing.sm,
    paddingVertical: theme.spacing.xs,
    borderRadius: theme.borderRadius.sm,
  },
  statusText: {
    fontSize: theme.typography.fontSize.xs,
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.bold,
  },
  applicationDetails: {
    marginBottom: theme.spacing.md,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: theme.spacing.xs,
  },
  detailLabel: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    flex: 1,
  },
  detailValue: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.primary,
    fontWeight: theme.typography.fontWeight.medium,
    flex: 1,
    textAlign: 'right',
  },
  messageContainer: {
    backgroundColor: `${theme.colors.primary}08`,
    borderRadius: theme.borderRadius.md,
    padding: theme.spacing.md,
    marginBottom: theme.spacing.md,
  },
  messageLabel: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.xs,
  },
  messageText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.primary,
    lineHeight: 18,
  },
  applicationActions: {
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
    paddingTop: theme.spacing.md,
  },
  cancelButton: {
    backgroundColor: '#FF3B30',
    paddingVertical: theme.spacing.sm,
    borderRadius: theme.borderRadius.md,
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.semiBold,
  },
  contactButton: {
    backgroundColor: theme.colors.primary,
    paddingVertical: theme.spacing.sm,
    borderRadius: theme.borderRadius.md,
    alignItems: 'center',
  },
  contactButtonText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.semiBold,
  },
  completeButton: {
    backgroundColor: '#34C759',
    paddingVertical: theme.spacing.sm,
    borderRadius: theme.borderRadius.md,
    alignItems: 'center',
  },
  completeButtonText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.white,
    fontWeight: theme.typography.fontWeight.semiBold,
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: theme.spacing.xxl,
    paddingHorizontal: theme.spacing.lg,
  },
  emptyStateIcon: {
    fontSize: 48,
    marginBottom: theme.spacing.lg,
  },
  emptyStateTitle: {
    fontSize: theme.typography.fontSize.lg,
    fontWeight: theme.typography.fontWeight.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  emptyStateText: {
    fontSize: theme.typography.fontSize.sm,
    color: theme.colors.text.secondary,
    textAlign: 'center',
    lineHeight: 20,
  },
}); 