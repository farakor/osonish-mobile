import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  TextInput,
  FlatList,
  Alert,
  RefreshControl,
} from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import { theme } from '../../constants/theme';
import { orderService } from '../../services/orderService';
import { authService } from '../../services/authService';
import { locationService, LocationCoords } from '../../services/locationService';
import { Order } from '../../types';
import { PriceConfirmationModal, ProposePriceModal, ModernActionButton } from '../../components/common';
import { ModernOrderCard } from '../../components/cards';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { WorkerStackParamList } from '../../types/navigation';

type WorkerNavigationProp = NativeStackNavigationProp<WorkerStackParamList>;

// –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
const JobCard: React.FC<{
  item: Order;
  onApply: (orderId: string) => void;
  hasApplied?: boolean;
  navigation: WorkerNavigationProp;
  userLocation?: LocationCoords;
}> = ({ item, onApply, hasApplied = false, navigation, userLocation }) => {
  const actionButton = (
    <ModernActionButton
      title={hasApplied ? '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'}
      onPress={hasApplied ? undefined : () => onApply(item.id)}
      disabled={hasApplied}
      variant={hasApplied ? 'disabled' : 'primary'}
      size="small"
    />
  );

  return (
    <ModernOrderCard
      order={item}
      onPress={() => navigation.navigate('JobDetails', { orderId: item.id })}
      showApplicantsCount={false}
      showCreateTime={false}
      actionButton={actionButton}
      userLocation={userLocation}
      workerView={true}
    />
  );
};

const WorkerJobsScreen: React.FC = () => {
  const navigation = useNavigation<WorkerNavigationProp>();
  const [orders, setOrders] = useState<Order[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<Order[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>('–í—Å–µ');
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [priceConfirmationVisible, setPriceConfirmationVisible] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [userApplications, setUserApplications] = useState<Set<string>>(new Set());
  const [userLocation, setUserLocation] = useState<LocationCoords | undefined>(undefined);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  const loadOrders = async (isRefresh = false) => {
    try {
      if (isRefresh) {
        setIsRefreshing(true);
      } else {
        setIsLoading(true);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
      const [availableOrders, applications] = await Promise.all([
        orderService.getAvailableOrdersForWorker(),
        orderService.getUserApplications()
      ]);

      console.log(`[WorkerJobsScreen] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${availableOrders.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–±–µ–∑ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫)`);
      console.log(`[WorkerJobsScreen] –ù–∞–π–¥–µ–Ω–æ ${applications.size} –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);

      setOrders(availableOrders);
      setUserApplications(applications);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
    } finally {
      setIsLoading(false);
      setIsRefreshing(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    loadOrders();
    console.log('[WorkerJobsScreen] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Supabase');

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getUserLocation = async () => {
      try {
        const coords = await locationService.getCurrentLocation();
        if (coords) {
          setUserLocation(coords);
          console.log('[WorkerJobsScreen] –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–æ:', coords);
        }
      } catch (error) {
        console.log('[WorkerJobsScreen] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', error);
      }
    };

    getUserLocation();
  }, []);

  // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å real-time –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Supabase

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
  useFocusEffect(
    React.useCallback(() => {
      loadOrders();
    }, [])
  );

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    let filtered = orders.filter(order => {
      const matchesSearch = order.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.description.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesCategory = !selectedCategory || selectedCategory === '–í—Å–µ' || order.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });

    setFilteredOrders(filtered);
  }, [orders, searchQuery, selectedCategory]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
  const getCategories = () => {
    const allCategories = [...new Set(orders.map(order => order.category))];
    const categories = [
      { label: '–í—Å–µ', emoji: 'üìã', count: orders.length },
      ...allCategories.map(category => ({
        label: category,
        emoji: getCategoryEmoji(category),
        count: orders.filter(order => order.category === category).length
      }))
    ];
    return categories;
  };

  const getCategoryEmoji = (category: string) => {
    const emojiMap: { [key: string]: string } = {
      '–°—Ç—Ä–æ–π–∫–∞': 'üèóÔ∏è',
      '–£–±–æ—Ä–∫–∞': 'üßπ',
      '–°–∞–¥': 'üå≥',
      '–û–±—â–µ–ø–∏—Ç': 'üçΩÔ∏è',
      '–ü–µ—Ä–µ–µ–∑–¥': 'üöö',
      '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏': 'üîß',
      '–î–æ—Å—Ç–∞–≤–∫–∞': 'üö¥',
      '–ö—Ä–∞—Å–æ—Ç–∞': 'üíÑ',
      '–û–±—É—á–µ–Ω–∏–µ': 'üìö',
      '–ü—Ä–æ—á–µ–µ': '‚ú®'
    };
    return emojiMap[category] || '‚ú®';
  };

  const handleApplyToJob = async (orderId: string) => {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –º–æ–¥–∞–ª–∫–µ
      const order = orders.find(o => o.id === orderId);
      if (!order) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
      setSelectedOrder(order);
      setPriceConfirmationVisible(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –æ—Ç–∫–ª–∏–∫–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };

  const handleAcceptPrice = async () => {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user || !selectedOrder) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      setPriceConfirmationVisible(false);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞
      const applicantCreated = await orderService.createApplicant({
        orderId: selectedOrder.id,
        workerId: authState.user.id,
        message: '',
        proposedPrice: selectedOrder.budget
      });

      if (applicantCreated) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserApplications(prev => new Set([...prev, selectedOrder.id]));

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        setOrders(prev => prev.filter(order => order.id !== selectedOrder.id));
        setFilteredOrders(prev => prev.filter(order => order.id !== selectedOrder.id));

        Alert.alert(
          '–£—Å–ø–µ—à–Ω–æ!',
          '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—Ä–∏—è".',
          [
            {
              text: '–û–ö',
              onPress: () => {
                setSelectedOrder(null);
              }
            }
          ]
        );
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    }
  };

  const handleProposePrice = () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    setPriceConfirmationVisible(false);
    setModalVisible(true);
  };

  const handleSubmitProposal = async (proposedPrice: number, message: string) => {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user || !selectedOrder) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
      const applicantCreated = await orderService.createApplicant({
        orderId: selectedOrder.id,
        workerId: authState.user.id,
        message: message,
        proposedPrice: proposedPrice
      });

      if (applicantCreated) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserApplications(prev => new Set([...prev, selectedOrder.id]));

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        setOrders(prev => prev.filter(order => order.id !== selectedOrder.id));
        setFilteredOrders(prev => prev.filter(order => order.id !== selectedOrder.id));

        Alert.alert(
          '–£—Å–ø–µ—à–Ω–æ!',
          '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—Ä–∏—è".',
          [
            {
              text: '–û–ö',
              onPress: () => {
                setSelectedOrder(null);
              }
            }
          ]
        );
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    }
  };

  const renderJobCard = ({ item }: { item: Order }) => {
    const hasApplied = userApplications.has(item.id);
    return (
      <JobCard
        item={item}
        onApply={handleApplyToJob}
        hasApplied={hasApplied}
        navigation={navigation}
        userLocation={userLocation}
      />
    );
  };

  const categories = getCategories();

  if (isLoading) {
    return (
      <View style={styles.container}>
        <SafeAreaView style={styles.content}>
          <View style={styles.loadingContainer}>
            <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...</Text>
          </View>
        </SafeAreaView>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.content}>
        <View style={styles.contentHeader}>
          <Text style={styles.title}>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</Text>
          <Text style={styles.subtitle}>
            {orders.length > 0 ? `–ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤` : '–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}
          </Text>
        </View>

        <View style={styles.searchContainer}>
          <TextInput
            style={styles.searchInput}
            placeholder="–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤..."
            placeholderTextColor={theme.colors.text.secondary}
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
        </View>

        {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <View style={styles.categoriesSection}>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.categoriesContainer}
            contentContainerStyle={styles.categoriesContent}
          >
            {categories.map((category, index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.categoryChip,
                  selectedCategory === category.label && styles.categoryChipActive
                ]}
                onPress={() => setSelectedCategory(category.label)}
              >
                <Text style={styles.categoryEmoji}>{category.emoji}</Text>
                <Text style={[
                  styles.categoryChipText,
                  selectedCategory === category.label && styles.categoryChipTextActive
                ]}>
                  {category.label}
                </Text>
                <Text style={[
                  styles.categoryChipCount,
                  selectedCategory === category.label && styles.categoryChipCountActive
                ]}>
                  ({category.count})
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        <FlatList
          data={filteredOrders}
          renderItem={renderJobCard}
          keyExtractor={(item) => item.id}
          style={styles.jobsList}
          contentContainerStyle={styles.jobsListContent}
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl
              refreshing={isRefreshing}
              onRefresh={() => loadOrders(true)}
              colors={[theme.colors.primary]}
            />
          }
          ListEmptyComponent={
            <View style={styles.emptyState}>
              <Text style={styles.emptyStateIcon}>üìã</Text>
              <Text style={styles.emptyStateTitle}>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</Text>
              <Text style={styles.emptyStateText}>
                {searchQuery || selectedCategory !== '–í—Å–µ'
                  ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                  : '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n–ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.'}
              </Text>
            </View>
          }
        />
      </SafeAreaView>

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã */}
      <PriceConfirmationModal
        visible={priceConfirmationVisible}
        onClose={() => {
          setPriceConfirmationVisible(false);
          setSelectedOrder(null);
        }}
        onAcceptPrice={handleAcceptPrice}
        onProposePrice={handleProposePrice}
        orderPrice={selectedOrder?.budget || 0}
        orderTitle={selectedOrder?.title || ''}
      />

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã */}
      <ProposePriceModal
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          setSelectedOrder(null);
        }}
        onSubmit={handleSubmitProposal}
        originalPrice={selectedOrder?.budget || 0}
        orderTitle={selectedOrder?.title || ''}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  content: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
  },
  contentHeader: {
    paddingHorizontal: theme.spacing.lg,
    paddingTop: theme.spacing.lg,
    paddingBottom: theme.spacing.md,
  },
  title: {
    fontSize: theme.fonts.sizes.xxl,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.xs,
  },
  subtitle: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
  },
  searchContainer: {
    paddingHorizontal: theme.spacing.lg,
    marginBottom: theme.spacing.md,
  },
  searchInput: {
    backgroundColor: theme.colors.surface,
    borderRadius: 12,
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.primary,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  categoriesSection: {
    marginBottom: theme.spacing.md,
  },
  categoriesContainer: {
    paddingLeft: theme.spacing.lg,
  },
  categoriesContent: {
    paddingRight: theme.spacing.lg,
  },
  categoryChip: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: theme.colors.surface,
    borderRadius: 20,
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
    marginRight: theme.spacing.sm,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  categoryChipActive: {
    backgroundColor: theme.colors.primary,
    borderColor: theme.colors.primary,
  },
  categoryEmoji: {
    fontSize: 16,
    marginRight: theme.spacing.xs,
  },
  categoryChipText: {
    fontSize: theme.fonts.sizes.sm,
    fontWeight: theme.fonts.weights.medium,
    color: theme.colors.text.primary,
    marginRight: theme.spacing.xs,
  },
  categoryChipTextActive: {
    color: theme.colors.background,
  },
  categoryChipCount: {
    fontSize: theme.fonts.sizes.xs,
    color: theme.colors.text.secondary,
  },
  categoryChipCountActive: {
    color: theme.colors.background,
  },
  jobsList: {
    flex: 1,
  },
  jobsListContent: {
    paddingTop: theme.spacing.sm,
  },
  jobCard: {
    backgroundColor: theme.colors.surface,
    borderRadius: 16,
    padding: theme.spacing.md,
    marginBottom: theme.spacing.md,
    shadowColor: theme.colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  jobHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: theme.spacing.sm,
  },
  jobTitle: {
    flex: 1,
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginRight: theme.spacing.sm,
  },
  jobBudget: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.primary,
  },
  categoryContainer: {
    marginBottom: theme.spacing.sm,
  },
  jobCategory: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.secondary,
    fontWeight: theme.fonts.weights.medium,
  },
  jobDescription: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
    lineHeight: 20,
    marginBottom: theme.spacing.md,
  },
  jobDetailsLayout: {
    marginBottom: theme.spacing.md,
  },
  locationCard: {
    marginBottom: theme.spacing.sm,
  },
  bottomRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  detailCard: {
    flex: 1,
  },
  detailValue: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  detailIcon: {
    fontSize: 16,
    marginRight: theme.spacing.xs,
  },
  detailText: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
    flex: 1,
  },
  jobFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  applicantsText: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.text.secondary,
  },
  applyButton: {
    backgroundColor: theme.colors.primary,
    borderRadius: 8,
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
  },
  appliedButton: {
    backgroundColor: theme.colors.surface,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  applyButtonText: {
    fontSize: theme.fonts.sizes.sm,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.background,
  },
  appliedButtonText: {
    color: theme.colors.text.secondary,
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: theme.spacing.xxxl,
  },
  emptyStateIcon: {
    fontSize: 48,
    marginBottom: theme.spacing.md,
  },
  emptyStateTitle: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.semiBold,
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  emptyStateText: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
    textAlign: 'center',
    lineHeight: 24,
  },
});

export { WorkerJobsScreen }; 