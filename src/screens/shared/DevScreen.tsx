import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  ScrollView,
  SafeAreaView,
  StatusBar
} from 'react-native';
import { theme } from '../../constants';
import { clearAllUserData, getDataStats } from '../../utils/clearAllData';
import { authService } from '../../services/authService';
import { orderService } from '../../services/orderService';
import { notificationService } from '../../services/notificationService';

export function DevScreen() {
  const [isLoading, setIsLoading] = useState(false);
  const [stats, setStats] = useState<{
    users: number;
    orders: number;
    storageKeys: string[];
  } | null>(null);

  const handleGetStats = async () => {
    try {
      const dataStats = await getDataStats();
      setStats(dataStats);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const handleClearAllData = async () => {
    Alert.alert(
      '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      [
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ',
          style: 'destructive',
          onPress: async () => {
            setIsLoading(true);
            try {
              await clearAllUserData();
              Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!', [
                {
                  text: 'OK',
                  onPress: () => {
                    setStats(null);
                    handleGetStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                  }
                }
              ]);
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  const handleCreateTestData = async () => {
    setIsLoading(true);
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testResult = await authService.completeRegistration({
        phone: '+998901234567',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        middleName: '–ò–≤–∞–Ω–æ–≤–∏—á',
        birthDate: '1990-01-01',
        role: 'customer',
        profileImage: undefined
      });

      if (testResult.success) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        await orderService.createOrder({
          title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏',
          location: '–¢–∞—à–∫–µ–Ω—Ç',
          category: 'cleaning',
          budget: 50000,
          workersNeeded: 2,
          serviceDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
          photos: []
        });

        Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
        handleGetStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      }
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDiagnosePushNotifications = async () => {
    setIsLoading(true);
    try {
      console.log('\nüîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ DevScreen...');
      await notificationService.diagnosePushNotifications();
      Alert.alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π');
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É');
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestPushNotification = async () => {
    setIsLoading(true);
    try {
      console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ DevScreen...');
      const success = await notificationService.testPushNotification();
      Alert.alert(
        success ? '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω' : '–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è',
        success
          ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.'
          : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.'
      );
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRefreshPushToken = async () => {
    setIsLoading(true);
    try {
      console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –∏–∑ DevScreen...');
      const success = await notificationService.refreshPushToken();
      Alert.alert(
        success ? '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω' : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        success
          ? 'Push —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
          : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å push —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.'
      );
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={theme.colors.background} />

      <ScrollView style={styles.scrollView}>
        <View style={styles.header}>
          <Text style={styles.title}>–ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</Text>
          <Text style={styles.subtitle}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Text>
        </View>

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</Text>
          <View style={styles.statusContainer}>
            <Text style={styles.statusLabel}>Supabase:</Text>
            <View style={[styles.statusIndicator, orderService.getSupabaseStatus() ? styles.statusOnline : styles.statusOffline]}>
              <Text style={styles.statusText}>
                {orderService.getSupabaseStatus() ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
              </Text>
            </View>
          </View>
          {!orderService.getSupabaseStatus() && (
            <Text style={styles.warningText}>
              ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
            </Text>
          )}
        </View>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö</Text>
          <TouchableOpacity style={styles.button} onPress={handleGetStats}>
            <Text style={styles.buttonText}>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</Text>
          </TouchableOpacity>

          {stats && (
            <View style={styles.statsContainer}>
              <View style={styles.statItem}>
                <Text style={styles.statLabel}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</Text>
                <Text style={styles.statValue}>{stats.users}</Text>
              </View>
              <View style={styles.statItem}>
                <Text style={styles.statLabel}>–ó–∞—è–≤–∫–∏:</Text>
                <Text style={styles.statValue}>{stats.orders}</Text>
              </View>
              <View style={styles.statItem}>
                <Text style={styles.statLabel}>–ö–ª—é—á–µ–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:</Text>
                <Text style={styles.statValue}>{stats.storageKeys.length}</Text>
              </View>
              {stats.storageKeys.length > 0 && (
                <View style={styles.keysContainer}>
                  <Text style={styles.keysTitle}>–ö–ª—é—á–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:</Text>
                  {stats.storageKeys.map((key, index) => (
                    <Text key={index} style={styles.keyItem}>‚Ä¢ {key}</Text>
                  ))}
                </View>
              )}
            </View>
          )}
        </View>

        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Text>
          <TouchableOpacity
            style={[styles.button, styles.diagnosisButton]}
            onPress={handleDiagnosePushNotifications}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              {isLoading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.testButton]}
            onPress={handleTestPushNotification}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.refreshButton]}
            onPress={handleRefreshPushToken}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              {isLoading ? '–û–±–Ω–æ–≤–ª—è–µ–º...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å push —Ç–æ–∫–µ–Ω'}
            </Text>
          </TouchableOpacity>

          <Text style={styles.warningText}>
            üí° –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </Text>
        </View>

        {/* –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</Text>
          <TouchableOpacity
            style={[styles.button, styles.createButton]}
            onPress={handleCreateTestData}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              {isLoading ? '–°–æ–∑–¥–∞—ë–º...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'}
            </Text>
          </TouchableOpacity>
        </View>

        {/* –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</Text>
          <TouchableOpacity
            style={[styles.button, styles.clearButton]}
            onPress={handleClearAllData}
            disabled={isLoading}
          >
            <Text style={styles.buttonText}>
              {isLoading ? '–£–¥–∞–ª—è–µ–º...' : '–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ'}
            </Text>
          </TouchableOpacity>
          <Text style={styles.warningText}>
            ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—è–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    padding: theme.spacing.lg,
    alignItems: 'center',
  },
  title: {
    fontSize: theme.fonts.sizes.xxl,
    fontWeight: 'bold',
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.sm,
  },
  subtitle: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
    textAlign: 'center',
  },
  section: {
    padding: theme.spacing.lg,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  sectionTitle: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: 'bold',
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.md,
  },
  button: {
    backgroundColor: theme.colors.primary,
    padding: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
    alignItems: 'center',
    marginBottom: theme.spacing.md,
  },
  createButton: {
    backgroundColor: theme.colors.success,
  },
  clearButton: {
    backgroundColor: theme.colors.error,
  },
  diagnosisButton: {
    backgroundColor: '#9C88FF',
  },
  testButton: {
    backgroundColor: '#FF9500',
  },
  refreshButton: {
    backgroundColor: '#007AFF',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: theme.fonts.sizes.md,
    fontWeight: '600',
  },
  statsContainer: {
    backgroundColor: theme.colors.surface,
    padding: theme.spacing.md,
    borderRadius: theme.borderRadius.md,
    marginTop: theme.spacing.sm,
  },
  statItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: theme.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  statLabel: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.text.secondary,
  },
  statValue: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: 'bold',
    color: theme.colors.text.primary,
  },
  keysContainer: {
    marginTop: theme.spacing.md,
    paddingTop: theme.spacing.md,
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
  },
  keysTitle: {
    fontSize: theme.fonts.sizes.sm,
    fontWeight: '600',
    color: theme.colors.text.secondary,
    marginBottom: theme.spacing.sm,
  },
  keyItem: {
    fontSize: theme.fonts.sizes.xs,
    color: theme.colors.text.secondary,
    paddingVertical: 2,
  },
  warningText: {
    fontSize: theme.fonts.sizes.sm,
    color: theme.colors.error,
    textAlign: 'center',
    fontStyle: 'italic',
  },
}); 