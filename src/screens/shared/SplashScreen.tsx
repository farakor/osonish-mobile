import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, StyleSheet, SafeAreaView, AppState, TouchableOpacity } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { theme } from '../../constants';
import { authService } from '../../services/authService';
import { useLanguage } from '../../contexts/LanguageContext';
import type { RootStackParamList } from '../../types';
import { SplashAnimation, SimpleSplashAnimation } from '../../components/common';

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

export function SplashScreen() {
  const navigation = useNavigation<NavigationProp>();
  const { isLanguageSelected, isLoading } = useLanguage();
  const [isAuthServiceInitialized, setIsAuthServiceInitialized] = useState(false);
  const [showAnimation, setShowAnimation] = useState(true);
  const [animationCompleted, setAnimationCompleted] = useState(false);
  const [useSimpleAnimation, setUseSimpleAnimation] = useState(false);

  const checkAuthAndNavigate = useCallback(async () => {
    try {
      console.log('[SplashScreen] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (isLoading) {
        console.log('[SplashScreen] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        return;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ splash —ç–∫—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
      if (!isAuthServiceInitialized) {
        await new Promise(resolve => setTimeout(resolve, 1500));
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
      if (!isLanguageSelected) {
        console.log('[SplashScreen] üåê –Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞');
        navigation.reset({
          index: 0,
          routes: [{ name: 'LanguageSelection' }],
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authState = authService.getAuthState();
      console.log('[SplashScreen] üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', {
        isAuthenticated: authState.isAuthenticated,
        hasUser: !!authState.user,
        userRole: authState.user?.role,
        userId: authState.user?.id
      });

      if (authState.isAuthenticated && authState.user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        console.log(`[SplashScreen] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${authState.user.role}`);
        if (authState.user.role === 'customer') {
          navigation.reset({
            index: 0,
            routes: [{ name: 'CustomerTabs' }],
          });
        } else {
          navigation.reset({
            index: 0,
            routes: [{ name: 'WorkerTabs' }],
          });
        }
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log('[SplashScreen] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Auth');
        navigation.reset({
          index: 0,
          routes: [{ name: 'Auth' }],
        });
      }
    } catch (error) {
      console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (!isLanguageSelected) {
        navigation.reset({
          index: 0,
          routes: [{ name: 'LanguageSelection' }],
        });
      } else {
        navigation.reset({
          index: 0,
          routes: [{ name: 'Auth' }],
        });
      }
    }
  }, [navigation, isLanguageSelected, isLoading, isAuthServiceInitialized]);

  useEffect(() => {
    console.log('[SplashScreen] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SplashScreen...');

    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const handleAppStateChange = (nextAppState: string) => {
      console.log('[SplashScreen] üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', nextAppState);
      if (nextAppState === 'active' && isAuthServiceInitialized && animationCompleted) {
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        setTimeout(() => {
          checkAuthAndNavigate();
        }, 500);
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);

    const initializeAndCheck = async () => {
      try {
        console.log('[SplashScreen] üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService...');

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService
        await authService.init();
        console.log('[SplashScreen] ‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        setIsAuthServiceInitialized(true);

        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º checkAuthAndNavigate –∑–¥–µ—Å—å, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      } catch (error) {
        console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        setIsAuthServiceInitialized(true); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º checkAuthAndNavigate –∑–¥–µ—Å—å, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      }
    };

    initializeAndCheck();

    return () => {
      subscription?.remove();
    };
  }, [isLanguageSelected, isLoading, isAuthServiceInitialized]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  useEffect(() => {
    if (animationCompleted && isAuthServiceInitialized) {
      console.log('[SplashScreen] üéØ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É');
      checkAuthAndNavigate();
    }
  }, [animationCompleted, isAuthServiceInitialized, checkAuthAndNavigate]);

  // Fallback –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
  useEffect(() => {
    const fallbackTimer = setTimeout(() => {
      if (showAnimation && !animationCompleted) {
        console.log('[SplashScreen] ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é');
        setUseSimpleAnimation(true);
      }
    }, 3000); // –ï—Å–ª–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç—É—é

    return () => clearTimeout(fallbackTimer);
  }, [showAnimation, animationCompleted]);

  const handleAnimationFinish = () => {
    console.log('[SplashScreen] üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    setShowAnimation(false);
    setAnimationCompleted(true);
  };

  const handleSkipAnimation = () => {
    console.log('[SplashScreen] ‚è≠Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
    setShowAnimation(false);
    setAnimationCompleted(true);
  };

  return (
    <SafeAreaView style={styles.container}>
      {showAnimation ? (
        <TouchableOpacity
          style={styles.animationContainer}
          onPress={handleSkipAnimation}
          activeOpacity={1}
        >
          {useSimpleAnimation ? (
            <SimpleSplashAnimation
              onAnimationFinish={handleAnimationFinish}
              autoPlay={true}
              loop={false}
              style={styles.animationContainer}
            />
          ) : (
            <SplashAnimation
              onAnimationFinish={handleAnimationFinish}
              autoPlay={true}
              loop={false}
              style={styles.animationContainer}
            />
          )}
        </TouchableOpacity>
      ) : (
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –ø–æ–∫–∞ –∏–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        <View style={styles.emptyContainer} />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  animationContainer: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  emptyContainer: {
    flex: 1,
  },
});
