import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, SafeAreaView, AppState } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { theme } from '../../constants';
import { authService } from '../../services/authService';
import { useLanguage } from '../../contexts/LanguageContext';
import type { RootStackParamList } from '../../types';
import { LogoOsonishWhite } from '../../components/common';

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

export function SplashScreen() {
  const navigation = useNavigation<NavigationProp>();
  const { isLanguageSelected, isLoading } = useLanguage();
  const [isAuthServiceInitialized, setIsAuthServiceInitialized] = useState(false);

  useEffect(() => {
    console.log('[SplashScreen] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SplashScreen...');

    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const handleAppStateChange = (nextAppState: string) => {
      console.log('[SplashScreen] üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', nextAppState);
      if (nextAppState === 'active' && isAuthServiceInitialized) {
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        setTimeout(() => {
          checkAuthAndNavigate();
        }, 500);
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);

    const initializeAndCheck = async () => {
      try {
        console.log('[SplashScreen] üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService...');

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService
        await authService.init();
        console.log('[SplashScreen] ‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        setIsAuthServiceInitialized(true);

        // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        await checkAuthAndNavigate();
      } catch (error) {
        console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        setIsAuthServiceInitialized(true); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await checkAuthAndNavigate();
      }
    };

    const checkAuthAndNavigate = async () => {
      try {
        console.log('[SplashScreen] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (isLoading) {
          console.log('[SplashScreen] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
          return;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ splash —ç–∫—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        if (!isAuthServiceInitialized) {
          await new Promise(resolve => setTimeout(resolve, 1500));
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if (!isLanguageSelected) {
          console.log('[SplashScreen] üåê –Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞');
          navigation.reset({
            index: 0,
            routes: [{ name: 'LanguageSelection' }],
          });
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authState = authService.getAuthState();
        console.log('[SplashScreen] üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', {
          isAuthenticated: authState.isAuthenticated,
          hasUser: !!authState.user,
          userRole: authState.user?.role,
          userId: authState.user?.id
        });

        if (authState.isAuthenticated && authState.user) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          console.log(`[SplashScreen] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${authState.user.role}`);
          if (authState.user.role === 'customer') {
            navigation.reset({
              index: 0,
              routes: [{ name: 'CustomerTabs' }],
            });
          } else {
            navigation.reset({
              index: 0,
              routes: [{ name: 'WorkerTabs' }],
            });
          }
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          console.log('[SplashScreen] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Auth');
          navigation.reset({
            index: 0,
            routes: [{ name: 'Auth' }],
          });
        }
      } catch (error) {
        console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!isLanguageSelected) {
          navigation.reset({
            index: 0,
            routes: [{ name: 'LanguageSelection' }],
          });
        } else {
          navigation.reset({
            index: 0,
            routes: [{ name: 'Auth' }],
          });
        }
      }
    };

    initializeAndCheck();

    return () => {
      subscription?.remove();
    };
  }, [navigation, isLanguageSelected, isLoading, isAuthServiceInitialized]);

  return (
    <SafeAreaView style={styles.container}>
      {/* Logo Section */}
      <View style={styles.logoSection}>
        <LogoOsonishWhite width={280} height={51} />
      </View>

      {/* Loading indicator */}
      <View style={styles.loadingSection}>
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: theme.spacing.lg,
  },
  logoSection: {
    alignItems: 'center',
    marginBottom: theme.spacing.xxxl,
  },
  loadingSection: {
    position: 'absolute',
    bottom: theme.spacing.xxxl,
  },
  loadingText: {
    fontSize: theme.fonts.sizes.md,
    color: theme.colors.background,
    opacity: 0.8,
  },
});
