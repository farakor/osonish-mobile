import React, { useEffect, useState } from 'react';
import { View, StyleSheet, AppState, Dimensions } from 'react-native';
import * as Haptics from 'expo-haptics';
import { useNavigation } from '@react-navigation/native';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';
import LottieView from 'lottie-react-native';
import { theme } from '../../constants';
import { authService } from '../../services/authService';
import { useLanguage } from '../../contexts/LanguageContext';
import type { RootStackParamList } from '../../types';

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

export function SplashScreen() {
  const navigation = useNavigation<NavigationProp>();
  const { isLanguageSelected, isLoading } = useLanguage();
  const [isAuthServiceInitialized, setIsAuthServiceInitialized] = useState(false);
  const [isReadyToNavigate, setIsReadyToNavigate] = useState(false);
  const [isAnimationFinished, setIsAnimationFinished] = useState(false);

  useEffect(() => {
    console.log('[SplashScreen] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SplashScreen...');

    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const handleAppStateChange = (nextAppState: string) => {
      console.log('[SplashScreen] üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', nextAppState);
      if (nextAppState === 'active' && isAuthServiceInitialized) {
        // –ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        setTimeout(() => {
          checkAuthAndNavigate();
        }, 500);
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);

    const initializeAndCheck = async () => {
      try {
        console.log('[SplashScreen] üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService...');

        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService
        await authService.init();
        console.log('[SplashScreen] ‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        setIsAuthServiceInitialized(true);

        // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        await checkAuthAndNavigate();
      } catch (error) {
        console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        setIsAuthServiceInitialized(true); // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await checkAuthAndNavigate();
      }
    };

    const checkAuthAndNavigate = async () => {
      try {
        console.log('[SplashScreen] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (isLoading) {
          console.log('[SplashScreen] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
          return;
        }

        // –í—Å–µ –≥–æ—Ç–æ–≤–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        console.log('[SplashScreen] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        setIsReadyToNavigate(true);
      } catch (error) {
        console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        console.log('[SplashScreen] ‚ö†Ô∏è –û—à–∏–±–∫–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π');
        setIsReadyToNavigate(true);
      }
    };

    initializeAndCheck();

    return () => {
      subscription?.remove();
    };
  }, [navigation, isLanguageSelected, isLoading, isAuthServiceInitialized]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
  useEffect(() => {
    console.log('[SplashScreen] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', {
      isReadyToNavigate,
      isAnimationFinished,
      isAuthServiceInitialized,
      isLoading: !isLoading
    });

    if (isReadyToNavigate && isAnimationFinished && isAuthServiceInitialized && !isLoading) {
      const performNavigation = async () => {
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª—è iOS
          await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);

          const authState = authService.getAuthState();

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
          if (!isLanguageSelected) {
            console.log('[SplashScreen] üåê –Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞');
            navigation.reset({
              index: 0,
              routes: [{ name: 'LanguageSelection' }],
            });
            return;
          }

          if (authState.isAuthenticated && authState.user) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log(`[SplashScreen] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${authState.user.role}`);
            if (authState.user.role === 'customer') {
              navigation.reset({
                index: 0,
                routes: [{ name: 'CustomerTabs' }],
              });
            } else {
              navigation.reset({
                index: 0,
                routes: [{ name: 'WorkerTabs' }],
              });
            }
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            console.log('[SplashScreen] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Auth');
            navigation.reset({
              index: 0,
              routes: [{ name: 'Auth' }],
            });
          }
        } catch (error) {
          console.error('[SplashScreen] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          if (!isLanguageSelected) {
            navigation.reset({
              index: 0,
              routes: [{ name: 'LanguageSelection' }],
            });
          } else {
            navigation.reset({
              index: 0,
              routes: [{ name: 'Auth' }],
            });
          }
        }
      };

      performNavigation();
    }
  }, [isReadyToNavigate, isAnimationFinished, isAuthServiceInitialized, isLoading, isLanguageSelected, navigation]);

  const handleAnimationFinish = () => {
    console.log('[SplashScreen] ‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    setIsAnimationFinished(true);
  };

  return (
    <View style={styles.container}>
      <LottieView
        source={require('../../../assets/splash-anim.json')}
        autoPlay
        loop={false}
        style={styles.animation}
        resizeMode="cover"
        onAnimationFinish={handleAnimationFinish}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  animation: {
    width: screenWidth,
    height: screenHeight,
  },
});
