import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Platform,
} from 'react-native';
import { theme } from '../../constants/theme';
import { Order } from '../../types';
import { locationService, LocationCoords } from '../../services/locationService';

// SVG –∏–º–ø–æ—Ä—Ç—ã
import CalendarIcon from '../../../assets/card-icons/calendar.svg';
import LocationIcon from '../../../assets/card-icons/location.svg';
import CategoryIcon from '../../../assets/card-icons/category.svg';
import OtklikiIcon from '../../../assets/card-icons/otkliki.svg';

interface ModernOrderCardProps {
  order: Order;
  onPress: () => void;
  showApplicantsCount?: boolean;
  showCreateTime?: boolean;
  actionButton?: React.ReactNode;
  userLocation?: LocationCoords; // –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
  workerView?: boolean; // –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
}

export const ModernOrderCard: React.FC<ModernOrderCardProps> = ({
  order,
  onPress,
  showApplicantsCount = true,
  showCreateTime = true,
  actionButton,
  userLocation,
  workerView = false,
}) => {
  const [isPressed, setIsPressed] = useState(false);
  const formatBudget = (amount: number) => {
    return `${amount.toLocaleString('ru-RU')} —Å—É–º`;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  };

  const formatCreatedAt = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / 60000);

    if (diffInMinutes < 60) {
      return `${diffInMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;
    } else if (diffInMinutes < 1440) {
      const hours = Math.floor(diffInMinutes / 60);
      return `${hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`;
    } else {
      const days = Math.floor(diffInMinutes / 1440);
      return `${days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
    }
  };

  const getStatusInfo = (status: Order['status']) => {
    switch (status) {
      case 'new':
        return {
          text: '–ù–æ–≤—ã–π',
          color: theme.colors.primary,
          backgroundColor: theme.colors.primary + '20',
        };
      case 'response_received':
        // –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "–ù–æ–≤—ã–π", –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ - "–û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω"
        if (workerView) {
          return {
            text: '–ù–æ–≤—ã–π',
            color: theme.colors.primary,
            backgroundColor: theme.colors.primary + '20',
          };
        } else {
          return {
            text: '–û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω',
            color: '#FFFFFF',
            backgroundColor: theme.colors.primary,
          };
        }
      case 'in_progress':
        return {
          text: '–í —Ä–∞–±–æ—Ç–µ',
          color: '#F59E0B',
          backgroundColor: '#FEF3C7',
        };
      case 'completed':
        return {
          text: '–ó–∞–≤–µ—Ä—à–µ–Ω',
          color: '#6B7280',
          backgroundColor: '#F3F4F6',
        };
      case 'cancelled':
        return {
          text: '–û—Ç–º–µ–Ω–µ–Ω',
          color: '#EF4444',
          backgroundColor: '#FEE2E2',
        };
      case 'rejected':
        return {
          text: '–û—Ç–∫–ª–æ–Ω–µ–Ω',
          color: '#EF4444',
          backgroundColor: '#FEE2E2',
        };
      default:
        return {
          text: status,
          color: '#6B7280',
          backgroundColor: '#F3F4F6',
        };
    }
  };

  const getCategoryIcon = (category: string) => {
    const categoryMap: { [key: string]: string } = {
      '–°—Ç—Ä–æ–π–∫–∞': 'üèóÔ∏è',
      '–£–±–æ—Ä–∫–∞': 'üßπ',
      '–°–∞–¥': 'üå≥',
      '–û–±—â–µ–ø–∏—Ç': 'üçΩÔ∏è',
      '–ü–µ—Ä–µ–µ–∑–¥': 'üöö',
      '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏': 'üîß',
      '–î–æ—Å—Ç–∞–≤–∫–∞': 'üö¥',
      '–ö—Ä–∞—Å–æ—Ç–∞': 'üíÑ',
      '–û–±—É—á–µ–Ω–∏–µ': 'üìö',
      '–ü—Ä–æ—á–µ–µ': '‚ú®'
    };
    return categoryMap[category] || '‚ú®';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–æ–º –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
  const getLocationText = () => {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    if (userLocation && order.latitude && order.longitude) {
      const distance = locationService.calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        order.latitude,
        order.longitude
      );
      const formattedDistance = locationService.formatDistance(distance);
      return `${order.location} (${formattedDistance})`;
    }

    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å
    return order.location;
  };

  return (
    <TouchableOpacity
      style={styles.cardContainer}
      activeOpacity={1}
      onPress={onPress}
      onPressIn={() => setIsPressed(true)}
      onPressOut={() => setIsPressed(false)}
    >
      <View
        style={[
          styles.card,
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Å—Ç–∏–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤, –Ω–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
          order.status === 'response_received' && !workerView && styles.cardResponseReceived,
        ]}
      >
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.categoryIconContainer}>
            <View style={styles.categoryIcon}>
              <Text style={styles.categoryIconText}>
                {getCategoryIcon(order.category)}
              </Text>
            </View>
            <Text style={styles.categoryText}>{order.category}</Text>
          </View>
          <View style={[
            styles.statusPill,
            {
              backgroundColor: getStatusInfo(order.status).backgroundColor
            }
          ]}>
            <Text style={[
              styles.statusPillText,
              {
                color: getStatusInfo(order.status).color
              }
            ]}>
              {getStatusInfo(order.status).text}
            </Text>
          </View>
        </View>

        {/* Time Info */}
        {showCreateTime && (
          <View style={styles.timeInfo}>
            <Text style={styles.timeInfoText}>
              {formatCreatedAt(order.createdAt)}
            </Text>
          </View>
        )}

        {/* Title */}
        <Text style={styles.title} numberOfLines={1} ellipsizeMode="tail">
          {order.title}
        </Text>

        {/* Details Grid */}
        <View style={styles.detailsGrid}>
          {workerView ? (
            <>
              {/* –†–µ–∂–∏–º –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π */}
              {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–æ–ª—å–∫–æ –î–∞—Ç–∞ */}
              <View style={styles.detailsRow}>
                <View style={styles.detailItem}>
                  <View style={styles.iconWrapper}>
                    <CalendarIcon
                      width={20}
                      height={20}
                      style={styles.detailIcon}
                    />
                  </View>
                  <Text style={styles.detailText}>{formatDate(order.serviceDate)}</Text>
                </View>
              </View>

              {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –õ–æ–∫–∞—Ü–∏—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
              <View style={styles.detailsRow}>
                <View style={styles.detailItemFullWidth}>
                  <View style={styles.iconWrapper}>
                    <LocationIcon
                      width={20}
                      height={20}
                      style={styles.detailIcon}
                    />
                  </View>
                  <Text style={styles.detailText}>{getLocationText()}</Text>
                </View>
              </View>

              {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ó–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è) */}
              {showApplicantsCount && (
                <View style={styles.detailsRow}>
                  <View style={styles.detailItem}>
                    <View style={styles.iconWrapper}>
                      <OtklikiIcon
                        width={20}
                        height={20}
                        style={styles.detailIcon}
                      />
                    </View>
                    <Text style={styles.detailText}>{order.applicantsCount} –∑–∞—è–≤–æ–∫</Text>
                  </View>
                </View>
              )}
            </>
          ) : (
            <>
              {/* –†–µ–∂–∏–º –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ */}
              {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –î–∞—Ç–∞ + –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ */}
              <View style={styles.detailsRow}>
                <View style={styles.detailItem}>
                  <View style={styles.iconWrapper}>
                    <CalendarIcon
                      width={20}
                      height={20}
                      style={styles.detailIcon}
                    />
                  </View>
                  <Text style={styles.detailText}>{formatDate(order.serviceDate)}</Text>
                </View>
                {showApplicantsCount && (
                  <View style={styles.detailItem}>
                    <View style={styles.iconWrapper}>
                      <OtklikiIcon
                        width={20}
                        height={20}
                        style={styles.detailIcon}
                      />
                    </View>
                    <Text style={styles.detailText}>{order.applicantsCount} –∑–∞—è–≤–æ–∫</Text>
                  </View>
                )}
              </View>

              {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –õ–æ–∫–∞—Ü–∏—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
              <View style={styles.detailsRow}>
                <View style={styles.detailItemFullWidth}>
                  <View style={styles.iconWrapper}>
                    <LocationIcon
                      width={20}
                      height={20}
                      style={styles.detailIcon}
                    />
                  </View>
                  <Text style={styles.detailText}>{getLocationText()}</Text>
                </View>
              </View>
            </>
          )}
        </View>



        {/* Footer */}
        <View style={styles.footer}>
          <View style={styles.priceContainer}>
            <Text style={styles.priceText}>{formatBudget(order.budget)}</Text>
          </View>
          {actionButton && (
            <View style={styles.actionContainer}>
              {actionButton}
            </View>
          )}
        </View>

        {/* –ë–µ–ª—ã–π overlay –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ */}
        {isPressed && (
          <View style={styles.pressOverlay} />
        )}
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  cardContainer: {
    marginHorizontal: theme.spacing.lg,
    marginBottom: theme.spacing.lg,
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º inner shadow –Ω–∞ Android
    ...Platform.select({
      android: {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∂–∞—Ç–∏—è
        renderToHardwareTextureAndroid: false,
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º inner shadow
        overflow: 'visible',
      },
    }),
  },
  card: {
    backgroundColor: theme.colors.white,
    borderRadius: 12,
    padding: theme.spacing.lg,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.08,
    shadowRadius: 8,
    elevation: 4,
    borderWidth: 1,
    borderColor: '#F0F0F0',
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Android
    ...Platform.select({
      android: {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º inner shadow –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        overflow: 'hidden',
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        needsOffscreenAlphaCompositing: false,
      },
    }),
  },
  cardResponseReceived: {
    // —Å–≤–µ—Ç–ª–µ–µ, —á–µ–º —Ñ–æ–Ω badge (#D1FAE5)
    backgroundColor: '#ECFDF5',
    // —Ä–∞–º–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–µ–ª–µ–Ω–æ–º —Ü–≤–µ—Ç–µ
    borderColor: theme.colors.primary,
    borderWidth: 0.5,
    // –ª–µ–≥–∫–∏–π glow –≤ –∑–µ–ª–µ–Ω–æ–º —Ü–≤–µ—Ç–µ
    shadowColor: '#10B981',
    shadowOpacity: 0.14,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 0 },
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: theme.spacing.sm,
  },
  categoryIconContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  categoryIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#F8F9FA',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: theme.spacing.sm,
  },
  categoryIconText: {
    fontSize: 20,
  },
  categoryText: {
    fontSize: theme.fonts.sizes.md,
    fontWeight: theme.fonts.weights.medium,
    color: theme.colors.text.primary,
    flex: 1,
  },
  timeInfo: {
    marginBottom: theme.spacing.sm,
  },
  timeInfoText: {
    fontSize: theme.fonts.sizes.sm,
    color: '#9AA0A6',
    fontWeight: theme.fonts.weights.regular,
  },
  statusPill: {
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.sm,
    borderRadius: 16,
    alignSelf: 'flex-end',
  },
  statusPillText: {
    fontSize: theme.fonts.sizes.sm,
    fontWeight: theme.fonts.weights.semiBold,
  },
  title: {
    fontSize: theme.fonts.sizes.xl,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.text.primary,
    lineHeight: 28,
    marginBottom: theme.spacing.md,
  },
  detailsGrid: {
    marginBottom: theme.spacing.md,
    gap: theme.spacing.sm,
  },
  detailsRow: {
    flexDirection: 'row',
    gap: theme.spacing.lg,
  },
  detailItem: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: theme.spacing.xs,
  },
  detailItemFullWidth: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: theme.spacing.xs,
    width: '100%',
  },
  iconWrapper: {
    marginRight: theme.spacing.sm,
    color: '#5F6368',
  },
  detailIcon: {
    // SVG –∏–∫–æ–Ω–∫–∞ –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ü–≤–µ—Ç –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  },
  detailText: {
    fontSize: theme.fonts.sizes.sm,
    color: '#5F6368',
    fontWeight: theme.fonts.weights.medium,
    flex: 1,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: theme.spacing.md,
  },
  priceContainer: {
    flex: 1,
  },
  priceText: {
    fontSize: theme.fonts.sizes.lg,
    fontWeight: theme.fonts.weights.bold,
    color: theme.colors.primary,
  },
  actionContainer: {
    marginLeft: theme.spacing.md,
  },
  pressOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    borderRadius: 12,
    pointerEvents: 'none',
  },
});