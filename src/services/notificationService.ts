import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç expo-notifications –¥–ª—è development build
let Notifications: any = null;
try {
  // –í development build –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  Notifications = require('expo-notifications');
  console.log('[NotificationService] ‚úÖ expo-notifications –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.warn('[NotificationService] ‚ö†Ô∏è expo-notifications –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
}
import { supabase } from './supabaseClient';
import { authService } from './authService';

// –¢–∏–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface NotificationSettings {
  allNotificationsEnabled: boolean;
  newOrdersEnabled: boolean;
  newApplicationsEnabled: boolean;
  orderUpdatesEnabled: boolean;
  orderCompletedEnabled: boolean;
}

export interface PushNotificationData {
  title: string;
  body: string;
  data?: any;
  userId: string;
  notificationType: 'new_order' | 'new_application' | 'order_update' | 'order_completed';
}

export interface NotificationItem {
  id: string;
  userId: string;
  title: string;
  body: string;
  data?: any;
  notificationType: 'new_order' | 'new_application' | 'order_update' | 'order_completed';
  isRead: boolean;
  createdAt: string;
}

export interface PushToken {
  token: string;
  deviceType: 'ios' | 'android' | 'web';
  deviceId?: string;
  createdAt?: string;
}

class NotificationService {
  private static instance: NotificationService;
  private isInitialized = false;
  private currentPushToken: string | null = null;
  private isRegistering = false;

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private static readonly STORAGE_KEY_NOTIFICATIONS = '@osonish_notifications';
  private static readonly MAX_LOCAL_NOTIFICATIONS = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫—ç—à–µ

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async init(): Promise<void> {
    if (this.isInitialized) {
      console.log('[NotificationService] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    this.isInitialized = true;

    try {
      console.log('[NotificationService] üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Notifications
      if (!Notifications) {
        console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
        return;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.requestPermissions();

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
      await this.cleanupOldTokens();

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await this.registerForPushNotifications();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.setupNotificationListeners();

      console.log('[NotificationService] ‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      console.log('[NotificationService] üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async requestPermissions(): Promise<boolean> {
    try {
      if (!Notifications) {
        console.warn('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return false;
      }

      if (!Device.isDevice) {
        console.warn('[NotificationService] ‚ö†Ô∏è Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        return false;
      }

      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.warn('[NotificationService] ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return false;
      }

      console.log('[NotificationService] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async registerForPushNotifications(): Promise<void> {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (this.isRegistering) {
      console.log('[NotificationService] ‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    this.isRegistering = true;

    try {
      if (!Notifications) {
        console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      if (!Device.isDevice) {
        console.log('[NotificationService] ‚ö†Ô∏è –ù–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ projectId
      const projectId = Constants.expoConfig?.extra?.eas?.projectId ||
        Constants.easConfig?.projectId ||
        Constants.manifest?.extra?.eas?.projectId;

      if (!projectId) {
        console.warn('[NotificationService] ‚ö†Ô∏è ProjectId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        console.log('[NotificationService] üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ EAS –ø—Ä–æ–µ–∫—Ç');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º Expo push token
      const tokenData = await Notifications.getExpoPushTokenAsync({
        projectId: projectId,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–æ–∫–µ–Ω
      if (this.currentPushToken === tokenData.data) {
        console.log('[NotificationService] üì± Push token –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        return;
      }

      this.currentPushToken = tokenData.data;
      console.log('[NotificationService] üì± Push token –ø–æ–ª—É—á–µ–Ω:', this.currentPushToken);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.savePushTokenToDatabase(tokenData.data);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push —Ç–æ–∫–µ–Ω–∞:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
      console.log('[NotificationService] üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } finally {
      this.isRegistering = false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async savePushTokenToDatabase(token: string): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[NotificationService] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return;
      }

      const deviceType = Platform.OS as 'ios' | 'android';
      const deviceId = Constants.deviceId || Constants.sessionId;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω
      const { data: existingToken, error: checkError } = await supabase
        .from('push_tokens')
        .select('id')
        .eq('user_id', authState.user.id)
        .eq('token', token)
        .single();

      if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.warn('[NotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞:', checkError);
      }

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (existingToken) {
        const { error: updateError } = await supabase
          .from('push_tokens')
          .update({
            is_active: true,
            device_id: deviceId,
            device_type: deviceType
          })
          .eq('user_id', authState.user.id)
          .eq('token', token);

        if (updateError) {
          console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î:', updateError);
          throw updateError;
        }

        console.log('[NotificationService] ‚úÖ Push token –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
        return;
      }

      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const { error: deleteError } = await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', authState.user.id)
        .eq('device_id', deviceId);

      if (deleteError) {
        console.warn('[NotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', deleteError);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error } = await supabase
        .from('push_tokens')
        .insert({
          user_id: authState.user.id,
          token: token,
          device_type: deviceType,
          device_id: deviceId,
          is_active: true
        });

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î:', error);
        throw error;
      }

      console.log('[NotificationService] ‚úÖ Push token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private setupNotificationListeners(): void {
    if (!Notifications) {
      console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–ª—É—à–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    Notifications.addNotificationReceivedListener(notification => {
      console.log('[NotificationService] üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', notification);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
      this.saveNotificationLocally(notification);
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Notifications.addNotificationResponseReceivedListener(response => {
      console.log('[NotificationService] üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', response);
      this.handleNotificationTap(response);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private handleNotificationTap(response: any): void {
    try {
      const data = response?.notification?.request?.content?.data;

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('[NotificationService] üéØ –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotificationToUser(
    userId: string,
    title: string,
    body: string,
    data: any = {},
    notificationType: PushNotificationData['notificationType']
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const settings = await this.getUserNotificationSettings(userId);
      if (!settings.allNotificationsEnabled) {
        console.log('[NotificationService] üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!this.shouldSendNotification(notificationType, settings)) {
        console.log('[NotificationService] üîá –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω:', notificationType);
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tokens = await this.getUserPushTokens(userId);
      if (tokens.length === 0) {
        console.log('[NotificationService] ‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö push —Ç–æ–∫–µ–Ω–æ–≤:', userId);
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      }

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –°–ê–ú–´–ô –ù–û–í–´–ô —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
      const latestToken = tokens[tokens.length - 1];
      console.log(`[NotificationService] üéØ –ù–∞–π–¥–µ–Ω–æ ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π: ${latestToken.token.substring(0, 20)}...`);

      if (tokens.length > 1) {
        console.log(`[NotificationService] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω (—Å–∞–º—ã–π –Ω–æ–≤—ã–π) —Ç–æ–∫–µ–Ω
      await this.sendPushNotification(latestToken.token, title, body, data);
      const successCount = 1;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.logNotification(userId, title, body, data, notificationType);

      console.log(`[NotificationService] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}/${tokens.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
      if (tokens.length > 1) {
        this.cleanupOldTokensForUser(userId).catch(error => {
          console.error('[NotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
        });
      }

      return successCount > 0;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendNotificationToUsers(
    userIds: string[],
    title: string,
    body: string,
    data: any = {},
    notificationType: PushNotificationData['notificationType']
  ): Promise<number> {
    try {
      const promises = userIds.map(userId =>
        this.sendNotificationToUser(userId, title, body, data, notificationType)
      );

      const results = await Promise.allSettled(promises);
      const successCount = results.filter(result =>
        result.status === 'fulfilled' && result.value === true
      ).length;

      console.log(`[NotificationService] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ${successCount}/${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
      return successCount;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private shouldSendNotification(
    type: PushNotificationData['notificationType'],
    settings: NotificationSettings
  ): boolean {
    switch (type) {
      case 'new_order':
        return settings.newOrdersEnabled;
      case 'new_application':
        return settings.newApplicationsEnabled;
      case 'order_update':
        return settings.orderUpdatesEnabled;
      case 'order_completed':
        return settings.orderCompletedEnabled;
      default:
        return true;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserPushTokens(userId: string): Promise<PushToken[]> {
    try {
      const { data, error } = await supabase
        .from('push_tokens')
        .select('token, device_type, device_id, created_at')
        .eq('user_id', userId)
        .eq('is_active', true)
        .order('created_at', { ascending: true }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return [];
      }

      return data.map(item => ({
        token: item.token,
        deviceType: item.device_type as 'ios' | 'android' | 'web',
        deviceId: item.device_id,
        createdAt: item.created_at
      }));
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –Ω–æ–≤—ã–π)
   */
  private async cleanupOldTokensForUser(userId: string): Promise<void> {
    try {
      console.log(`[NotificationService] üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

      const { data: tokens, error: selectError } = await supabase
        .from('push_tokens')
        .select('id, token, created_at')
        .eq('user_id', userId)
        .eq('is_active', true)
        .order('created_at', { ascending: true });

      if (selectError) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:', selectError);
        return;
      }

      if (!tokens || tokens.length <= 1) {
        console.log('[NotificationService] ‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤');
        return;
      }

      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
      const tokensToDeactivate = tokens.slice(0, -1); // –í—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      const tokenIds = tokensToDeactivate.map(t => t.id);

      console.log(`[NotificationService] üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º ${tokenIds.length} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`);

      const { error: updateError } = await supabase
        .from('push_tokens')
        .update({ is_active: false })
        .in('id', tokenIds);

      if (updateError) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError);
      } else {
        console.log(`[NotificationService] ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${tokenIds.length} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Expo
   */
  private async sendPushNotification(
    token: string,
    title: string,
    body: string,
    data: any = {}
  ): Promise<void> {
    try {
      console.log('[NotificationService] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
      console.log('[NotificationService] üéØ –¢–æ–∫–µ–Ω:', token.substring(0, 20) + '...');
      console.log('[NotificationService] üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);
      console.log('[NotificationService] üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', body);

      const message = {
        to: token,
        sound: 'default',
        title,
        body,
        data,
        priority: 'high',
        channelId: 'default',
      };

      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();

      console.log('[NotificationService] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Expo:', JSON.stringify(result, null, 2));

      if (!response.ok) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
        throw new Error(`Push notification failed: ${result.message || response.statusText}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç–≤–µ—Ç–µ Expo
      if (result.data && result.data.length > 0) {
        const status = result.data[0].status;
        const details = result.data[0].details;

        if (status === 'ok') {
          console.log('[NotificationService] ‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ Expo —Å–µ—Ä–≤–µ—Ä–æ–º');
        } else if (status === 'error') {
          console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç Expo —Å–µ—Ä–≤–µ—Ä–∞:', details);
          console.error('[NotificationService] üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
        }
      }

      console.log('[NotificationService] ‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Expo —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      console.error('[NotificationService] üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞');
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserNotificationSettings(userId: string): Promise<NotificationSettings> {
    try {
      const { data, error } = await supabase
        .from('notification_settings')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (error) {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (error.code === 'PGRST116') { // No rows found
          console.log('[NotificationService] ‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ');
          return {
            allNotificationsEnabled: true,
            newOrdersEnabled: true,
            newApplicationsEnabled: true,
            orderUpdatesEnabled: true,
            orderCompletedEnabled: true,
          };
        }

        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return {
          allNotificationsEnabled: true,
          newOrdersEnabled: true,
          newApplicationsEnabled: true,
          orderUpdatesEnabled: true,
          orderCompletedEnabled: true,
        };
      }

      if (!data) {
        console.log('[NotificationService] ‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ');
        return {
          allNotificationsEnabled: true,
          newOrdersEnabled: true,
          newApplicationsEnabled: true,
          orderUpdatesEnabled: true,
          orderCompletedEnabled: true,
        };
      }

      return {
        allNotificationsEnabled: data.all_notifications_enabled,
        newOrdersEnabled: data.new_orders_enabled,
        newApplicationsEnabled: data.new_applications_enabled,
        orderUpdatesEnabled: data.order_updates_enabled,
        orderCompletedEnabled: data.order_completed_enabled,
      };
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return {
        allNotificationsEnabled: true,
        newOrdersEnabled: true,
        newApplicationsEnabled: true,
        orderUpdatesEnabled: true,
        orderCompletedEnabled: true,
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateNotificationSettings(settings: NotificationSettings): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const settingsData = {
        user_id: authState.user.id,
        all_notifications_enabled: settings.allNotificationsEnabled,
        new_orders_enabled: settings.newOrdersEnabled,
        new_applications_enabled: settings.newApplicationsEnabled,
        order_updates_enabled: settings.orderUpdatesEnabled,
        order_completed_enabled: settings.orderCompletedEnabled,
      };

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { error: updateError } = await supabase
        .from('notification_settings')
        .update(settingsData)
        .eq('user_id', authState.user.id);

      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      if (updateError && updateError.code === 'PGRST116') {
        const { error: insertError } = await supabase
          .from('notification_settings')
          .insert(settingsData);

        if (insertError) {
          console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', insertError);
          return false;
        }
      } else if (updateError) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', updateError);
        return false;
      }

      console.log('[NotificationService] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async logNotification(
    userId: string,
    title: string,
    body: string,
    data: any,
    notificationType: PushNotificationData['notificationType']
  ): Promise<void> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ë–î
    await this.logNotificationFallback(userId, title, body, data, notificationType);
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç RLS
   */
  private async logNotificationFallback(
    userId: string,
    title: string,
    body: string,
    data: any,
    notificationType: PushNotificationData['notificationType']
  ): Promise<void> {
    try {
      console.log('[NotificationService] üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (fallback —Ä–µ–∂–∏–º)');
      console.log('[NotificationService] üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
      console.log('[NotificationService] üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);
      console.log('[NotificationService] üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', body);
      console.log('[NotificationService] üè∑Ô∏è –¢–∏–ø:', notificationType);
      console.log('[NotificationService] üìä –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data));
      console.log('[NotificationService] ‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
      console.log('[NotificationService] ‚úÖ Push notification –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
      await this.attemptDatabaseSave(userId, title, body, data, notificationType);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      console.log('[NotificationService] ‚úÖ Push notification –≤—Å—ë —Ä–∞–≤–Ω–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –Ω–µ—É–¥–∞—á–µ–π)
   */
  private async attemptDatabaseSave(
    userId: string,
    title: string,
    body: string,
    data: any,
    notificationType: PushNotificationData['notificationType']
  ): Promise<void> {
    try {
      console.log('[NotificationService] üíæ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
      if (!supabase) {
        console.log('[NotificationService] ‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î');
        return;
      }

      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const { data: { user }, error: authCheckError } = await supabase.auth.getUser();

      if (authCheckError || !user) {
        console.log('[NotificationService] ‚ö†Ô∏è Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î');
        return;
      }

      console.log('[NotificationService] ‚úÖ Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');

      const { error } = await supabase
        .from('notifications')
        .insert({
          user_id: userId,
          title,
          message: body,
          data,
          type: notificationType,
          is_read: false
        });

      if (error) {
        console.warn('[NotificationService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î:', error.message);

        if (error.code === '42501') {
          console.warn('[NotificationService] ‚ö†Ô∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞)');
        }
      } else {
        console.log('[NotificationService] üéâ –ë–æ–Ω—É—Å: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!');
      }
    } catch (error) {
      console.warn('[NotificationService] ‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö push —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unregisterPushTokens(): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return;
      }

      // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error } = await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', authState.user.id);

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
      this.currentPushToken = null;

      console.log('[NotificationService] ‚úÖ Push —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async cleanupOldTokens(): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return;
      }

      const deviceId = Constants.deviceId || Constants.sessionId;

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const { error } = await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', authState.user.id)
        .eq('device_id', deviceId);

      if (error) {
        console.warn('[NotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
      } else {
        console.log('[NotificationService] ‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã');
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ push —Ç–æ–∫–µ–Ω–∞
   */
  getCurrentPushToken(): string | null {
    return this.currentPushToken;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞
   */
  async refreshPushToken(): Promise<boolean> {
    console.log('\nüîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï PUSH –¢–û–ö–ï–ù–ê ===');

    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
      this.currentPushToken = null;
      console.log('üóëÔ∏è –°–±—Ä–æ—à–µ–Ω —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω');

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
      await this.cleanupOldTokens();
      console.log('üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –ë–î');

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await this.registerForPushNotifications();

      if (this.currentPushToken) {
        console.log('‚úÖ –ù–æ–≤—ã–π push —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', this.currentPushToken.substring(0, 20) + '...');
        return true;
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π push —Ç–æ–∫–µ–Ω');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è push —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
   */
  async addTestNotification(): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.user?.id) {
        console.warn('[NotificationService] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        return false;
      }

      console.log('[NotificationService] üß™ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à');

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const testNotification = {
        request: {
          content: {
            title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            body: `–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`,
            data: {
              notificationType: 'order_update',
              test: true,
              timestamp: Date.now()
            }
          }
        }
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.saveNotificationLocally(testNotification);

      console.log('[NotificationService] ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async testPushNotification(): Promise<boolean> {
    console.log('\nüß™ === –¢–ï–°–¢ PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===');

    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      console.log('üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authState.user.id);

      const testTitle = '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      const testBody = `–¢–µ—Å—Ç –≤ ${new Date().toLocaleTimeString()}`;
      const testData = {
        test: true,
        timestamp: Date.now(),
        userId: authState.user.id
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');

      const success = await this.sendNotificationToUser(
        authState.user.id,
        testTitle,
        testBody,
        testData,
        'order_update'
      );

      if (success) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        console.log('üí° –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.log('   - –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
        console.log('   - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        console.log('   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é EAS –ø—Ä–æ–µ–∫—Ç–∞');
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      }

      return success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async diagnosePushNotifications(): Promise<void> {
    console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
      console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:');
      console.log('  - Device.isDevice:', Device.isDevice);
      console.log('  - Platform.OS:', Platform.OS);
      console.log('  - Notifications –¥–æ—Å—Ç—É–ø–Ω—ã:', !!Notifications);

      if (!Device.isDevice) {
        console.warn('‚ö†Ô∏è Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        return;
      }

      if (!Notifications) {
        console.warn('‚ö†Ô∏è expo-notifications –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:');
      const { status } = await Notifications.getPermissionsAsync();
      console.log('  - –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', status);

      if (status !== 'granted') {
        console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      }

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Expo:');
      const projectId = Constants.expoConfig?.extra?.eas?.projectId ||
        Constants.easConfig?.projectId ||
        Constants.manifest?.extra?.eas?.projectId;

      console.log('  - Project ID:', projectId ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

      if (!projectId) {
        console.warn('‚ö†Ô∏è Project ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
        console.log('üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ EAS –ø—Ä–æ–µ–∫—Ç –¥–ª—è production —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
      console.log('\nüé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ push —Ç–æ–∫–µ–Ω–∞:');
      console.log('  - –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω:', this.currentPushToken ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

      if (this.currentPushToken) {
        console.log('  - –¢–æ–∫–µ–Ω:', this.currentPushToken.substring(0, 20) + '...');
      }

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      const authState = authService.getAuthState();
      console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', authState.isAuthenticated);
      console.log('  - User ID:', authState.user?.id || '–Ω–µ—Ç');

      // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î
      if (authState.user?.id) {
        console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î:');
        const tokens = await this.getUserPushTokens(authState.user.id);
        console.log('  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î:', tokens.length);

        tokens.forEach((token, index) => {
          console.log(`  - –¢–æ–∫–µ–Ω ${index + 1}:`, token.token.substring(0, 20) + '...');
          console.log(`    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${token.device_type}, –ê–∫—Ç–∏–≤–µ–Ω: ${token.is_active}`);
        });
      }

      // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (authState.user?.id) {
        console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
        const settings = await this.getUserNotificationSettings(authState.user.id);
        console.log('  - –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', settings.allNotificationsEnabled);
        console.log('  - –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:', settings.newOrdersEnabled);
        console.log('  - –ù–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏:', settings.newApplicationsEnabled);
        console.log('  - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', settings.orderUpdatesEnabled);
        console.log('  - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', settings.orderCompletedEnabled);
      }

      console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞)
   */
  async getUserNotifications(userId: string, limit: number = 50): Promise<NotificationItem[]> {
    try {
      console.log('[NotificationService] üì± –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const localNotifications = await this.getLocalNotifications(userId);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      const limitedNotifications = localNotifications
        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
        .slice(0, limit);

      console.log('[NotificationService] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', limitedNotifications.length);
      return limitedNotifications;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ AsyncStorage
   */
  private async getLocalNotifications(userId: string): Promise<NotificationItem[]> {
    try {
      const key = `${NotificationService.STORAGE_KEY_NOTIFICATIONS}_${userId}`;
      const stored = await AsyncStorage.getItem(key);

      if (!stored) {
        console.log('[NotificationService] üì± –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return [];
      }

      const notifications: NotificationItem[] = JSON.parse(stored);
      return notifications;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
   */
  private async saveNotificationLocally(notification: any): Promise<void> {
    try {
      console.log('[NotificationService] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ:', notification);

      const authState = authService.getAuthState();
      if (!authState.user?.id) {
        console.warn('[NotificationService] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        return;
      }

      const userId = authState.user.id;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const content = notification.request?.content || notification;
      const title = content.title || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
      const body = content.body || '';
      const data = content.data || {};

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notificationType = data.notificationType || data.type || 'order_update';

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notificationItem: NotificationItem = {
        id: `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        userId: userId,
        title: title,
        body: body,
        data: data,
        notificationType: notificationType as any,
        isRead: false,
        createdAt: new Date().toISOString()
      };

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const existingNotifications = await this.getLocalNotifications(userId);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      const updatedNotifications = [notificationItem, ...existingNotifications];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (updatedNotifications.length > NotificationService.MAX_LOCAL_NOTIFICATIONS) {
        updatedNotifications.splice(NotificationService.MAX_LOCAL_NOTIFICATIONS);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const key = `${NotificationService.STORAGE_KEY_NOTIFICATIONS}_${userId}`;
      await AsyncStorage.setItem(key, JSON.stringify(updatedNotifications));

      console.log('[NotificationService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', updatedNotifications.length);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–ª–æ–∫–∞–ª—å–Ω–æ)
   */
  async markNotificationAsRead(notificationId: string): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.user) {
        console.error('[NotificationService] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const userId = authState.user.id;
      console.log('[NotificationService] üì± –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ:', notificationId);

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notifications = await this.getLocalNotifications(userId);

      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const updatedNotifications = notifications.map(notification =>
        notification.id === notificationId
          ? { ...notification, isRead: true }
          : notification
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const key = `${NotificationService.STORAGE_KEY_NOTIFICATIONS}_${userId}`;
      await AsyncStorage.setItem(key, JSON.stringify(updatedNotifications));

      console.log('[NotificationService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      return false;
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω–æ)
   */
  async markAllNotificationsAsRead(userId: string): Promise<boolean> {
    try {
      console.log('[NotificationService] üì± –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notifications = await this.getLocalNotifications(userId);

      // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      const updatedNotifications = notifications.map(notification => ({
        ...notification,
        isRead: true
      }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const key = `${NotificationService.STORAGE_KEY_NOTIFICATIONS}_${userId}`;
      await AsyncStorage.setItem(key, JSON.stringify(updatedNotifications));

      console.log('[NotificationService] ‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞)
   */
  async getUnreadNotificationsCount(userId: string): Promise<number> {
    try {
      console.log('[NotificationService] üì± –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notifications = await this.getLocalNotifications(userId);

      // –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      const unreadCount = notifications.filter(notification => !notification.isRead).length;

      console.log('[NotificationService] ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', unreadCount);
      return unreadCount;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private async ensureSupabaseAuthentication(userId: string): Promise<boolean> {
    try {
      console.log('[NotificationService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      if (!supabase) {
        console.warn('[NotificationService] ‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      const { data: { user }, error } = await supabase.auth.getUser();

      if (user && !error) {
        console.log('[NotificationService] ‚úÖ Supabase —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const authState = authService.getAuthState();
        if (authState.user && authState.user.id === userId) {
          console.log('[NotificationService] ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
          return true;
        } else {
          console.warn('[NotificationService] ‚ö†Ô∏è Auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
          console.warn('[NotificationService] ‚ö†Ô∏è Auth user ID:', authState.user?.id, 'Target user ID:', userId);
        }
      }

      console.log('[NotificationService] ‚ö†Ô∏è Supabase —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      console.log('[NotificationService] üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è:', userId);

      await this.restoreSupabaseSession(userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const { data: { user: restoredUser }, error: checkError } = await supabase.auth.getUser();
      if (restoredUser && !checkError) {
        console.log('[NotificationService] ‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', restoredUser.id);
        return true;
      } else {
        console.warn('[NotificationService] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Supabase —Å–µ—Å—Å–∏—é');
        console.warn('[NotificationService] ‚ùå Error:', checkError?.message);
        return false;
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase —Å–µ—Å—Å–∏–∏ –∏–∑ AsyncStorage
   */
  private async restoreSupabaseSession(userId: string): Promise<void> {
    try {
      const storedSession = await AsyncStorage.getItem('@osonish_supabase_session');

      if (storedSession) {
        try {
          const session = JSON.parse(storedSession);
          console.log('[NotificationService] üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Supabase —Å–µ—Å—Å–∏—é...');

          const { error } = await supabase.auth.setSession(session);

          if (error) {
            console.warn('[NotificationService] ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞:', error.message);
            console.log('[NotificationService] üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é...');
            await this.createNewSupabaseSession(userId);
          } else {
            console.log('[NotificationService] ‚úÖ Supabase —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
          }
        } catch (parseError) {
          console.warn('[NotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:', parseError);
          await this.createNewSupabaseSession(userId);
        }
      } else {
        console.log('[NotificationService] ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
        await this.createNewSupabaseSession(userId);
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      try {
        await this.createNewSupabaseSession(userId);
      } catch (createError) {
        console.error('[NotificationService] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', createError);
      }
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase —Å–µ—Å—Å–∏–∏ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)
   */
  private async forceRestoreSupabaseSession(userId: string): Promise<void> {
    try {
      console.log('[NotificationService] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase —Å–µ—Å—Å–∏–∏...');

      // –°–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
      await supabase.auth.signOut();

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      await this.createNewSupabaseSession(userId);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Supabase –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π Auth —Å–µ—Å—Å–∏–∏
   */
  private async createNewSupabaseSession(userId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ authService
      const authState = authService.getAuthState();
      if (!authState.user) {
        console.error('[NotificationService] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ authService');
        return;
      }

      const user = authState.user;

      // –°–æ–∑–¥–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –∫–∞–∫ –≤ authService
      const email = `osonish.${user.phone.replace(/[^0-9]/g, '')}@gmail.com`;
      const password = `osonish_${user.id}`;

      console.log('[NotificationService] üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ Supabase –¥–ª—è:', email);

      // –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
      let authResult = await supabase.auth.signInWithPassword({
        email,
        password
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (authResult.error?.message?.includes('Invalid login credentials')) {
        console.log('[NotificationService] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Auth –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å...');

        authResult = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              user_id: user.id,
              phone: user.phone,
              first_name: user.firstName,
              last_name: user.lastName
            }
          }
        });

        if (authResult.data?.user) {
          console.log('[NotificationService] ‚úÖ –ù–æ–≤–∞—è Auth —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', authResult.data.user.id);
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞–∫ –≤ authService
        if (authResult.error?.message?.includes('User already registered')) {
          console.log('[NotificationService] üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Supabase Auth');
          console.log('[NotificationService] üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–∞—Ä–æ–ª—å –∏–ª–∏ email –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
          console.log('[NotificationService] üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Auth —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
          return;
        }
      } else if (authResult.data?.user) {
        console.log('[NotificationService] ‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Auth —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é:', authResult.data.user.id);
      }

      if (authResult.error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –æ —Ç–æ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
        if (!authResult.error.message?.includes('User already registered')) {
          console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Supabase —Å–µ—Å—Å–∏–∏:', authResult.error);
        }
        return;
      }

      if (authResult.data.session) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ AsyncStorage
        await AsyncStorage.setItem('@osonish_supabase_session', JSON.stringify(authResult.data.session));
        console.log('[NotificationService] ‚úÖ –ù–æ–≤–∞—è Supabase —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π Supabase —Å–µ—Å—Å–∏–∏:', error);
    }
  }
}

export const notificationService = NotificationService.getInstance();