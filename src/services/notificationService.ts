import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç expo-notifications –¥–ª—è development build
let Notifications: any = null;
try {
  // –í development build –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  Notifications = require('expo-notifications');
  console.log('[NotificationService] ‚úÖ expo-notifications –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.warn('[NotificationService] ‚ö†Ô∏è expo-notifications –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
}
import { supabase } from './supabaseClient';
import { authService } from './authService';

// –¢–∏–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface NotificationSettings {
  allNotificationsEnabled: boolean;
  newOrdersEnabled: boolean;
  newApplicationsEnabled: boolean;
  orderUpdatesEnabled: boolean;
  orderCompletedEnabled: boolean;
}

export interface PushNotificationData {
  title: string;
  body: string;
  data?: any;
  userId: string;
  notificationType: 'new_order' | 'new_application' | 'order_update' | 'order_completed';
}

export interface PushToken {
  token: string;
  deviceType: 'ios' | 'android' | 'web';
  deviceId?: string;
}

class NotificationService {
  private static instance: NotificationService;
  private isInitialized = false;
  private currentPushToken: string | null = null;

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async init(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    try {
      console.log('[NotificationService] üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Notifications
      if (!Notifications) {
        console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
        this.isInitialized = true;
        return;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.requestPermissions();

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await this.registerForPushNotifications();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.setupNotificationListeners();

      this.isInitialized = true;
      console.log('[NotificationService] ‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      console.log('[NotificationService] üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      this.isInitialized = true;
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async requestPermissions(): Promise<boolean> {
    try {
      if (!Notifications) {
        console.warn('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return false;
      }

      if (!Device.isDevice) {
        console.warn('[NotificationService] ‚ö†Ô∏è Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
        return false;
      }

      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.warn('[NotificationService] ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return false;
      }

      console.log('[NotificationService] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async registerForPushNotifications(): Promise<void> {
    try {
      if (!Notifications) {
        console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      if (!Device.isDevice) {
        console.log('[NotificationService] ‚ö†Ô∏è –ù–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ projectId
      const projectId = Constants.expoConfig?.extra?.eas?.projectId ||
        Constants.easConfig?.projectId ||
        Constants.manifest?.extra?.eas?.projectId;

      if (!projectId) {
        console.warn('[NotificationService] ‚ö†Ô∏è ProjectId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        console.log('[NotificationService] üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ EAS –ø—Ä–æ–µ–∫—Ç');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º Expo push token
      const tokenData = await Notifications.getExpoPushTokenAsync({
        projectId: projectId,
      });

      this.currentPushToken = tokenData.data;
      console.log('[NotificationService] üì± Push token –ø–æ–ª—É—á–µ–Ω:', this.currentPushToken);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.savePushTokenToDatabase(tokenData.data);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push —Ç–æ–∫–µ–Ω–∞:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
      console.log('[NotificationService] üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async savePushTokenToDatabase(token: string): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[NotificationService] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        return;
      }

      const deviceType = Platform.OS as 'ios' | 'android';
      const deviceId = Constants.deviceId || Constants.sessionId;

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      await supabase
        .from('push_tokens')
        .update({ is_active: false })
        .eq('user_id', authState.user.id)
        .eq('device_id', deviceId);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error } = await supabase
        .from('push_tokens')
        .upsert({
          user_id: authState.user.id,
          token: token,
          device_type: deviceType,
          device_id: deviceId,
          is_active: true
        });

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î:', error);
        throw error;
      }

      console.log('[NotificationService] ‚úÖ Push token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private setupNotificationListeners(): void {
    if (!Notifications) {
      console.log('[NotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–ª—É—à–∞—Ç–µ–ª–µ–π');
      return;
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    Notifications.addNotificationReceivedListener(notification => {
      console.log('[NotificationService] üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', notification);
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Notifications.addNotificationResponseReceivedListener(response => {
      console.log('[NotificationService] üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', response);
      this.handleNotificationTap(response);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private handleNotificationTap(response: any): void {
    try {
      const data = response?.notification?.request?.content?.data;

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('[NotificationService] üéØ –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotificationToUser(
    userId: string,
    title: string,
    body: string,
    data: any = {},
    notificationType: PushNotificationData['notificationType']
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const settings = await this.getUserNotificationSettings(userId);
      if (!settings.allNotificationsEnabled) {
        console.log('[NotificationService] üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!this.shouldSendNotification(notificationType, settings)) {
        console.log('[NotificationService] üîá –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω:', notificationType);
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tokens = await this.getUserPushTokens(userId);
      if (tokens.length === 0) {
        console.log('[NotificationService] ‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö push —Ç–æ–∫–µ–Ω–æ–≤:', userId);
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const promises = tokens.map(token =>
        this.sendPushNotification(token.token, title, body, data)
      );

      const results = await Promise.allSettled(promises);
      const successCount = results.filter(result => result.status === 'fulfilled').length;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.logNotification(userId, title, body, data, notificationType);

      console.log(`[NotificationService] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}/${tokens.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`);
      return successCount > 0;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendNotificationToUsers(
    userIds: string[],
    title: string,
    body: string,
    data: any = {},
    notificationType: PushNotificationData['notificationType']
  ): Promise<number> {
    try {
      const promises = userIds.map(userId =>
        this.sendNotificationToUser(userId, title, body, data, notificationType)
      );

      const results = await Promise.allSettled(promises);
      const successCount = results.filter(result =>
        result.status === 'fulfilled' && result.value === true
      ).length;

      console.log(`[NotificationService] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ${successCount}/${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
      return successCount;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private shouldSendNotification(
    type: PushNotificationData['notificationType'],
    settings: NotificationSettings
  ): boolean {
    switch (type) {
      case 'new_order':
        return settings.newOrdersEnabled;
      case 'new_application':
        return settings.newApplicationsEnabled;
      case 'order_update':
        return settings.orderUpdatesEnabled;
      case 'order_completed':
        return settings.orderCompletedEnabled;
      default:
        return true;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserPushTokens(userId: string): Promise<PushToken[]> {
    try {
      const { data, error } = await supabase
        .from('push_tokens')
        .select('token, device_type, device_id')
        .eq('user_id', userId)
        .eq('is_active', true);

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return [];
      }

      return data.map(item => ({
        token: item.token,
        deviceType: item.device_type as 'ios' | 'android' | 'web',
        deviceId: item.device_id
      }));
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Expo
   */
  private async sendPushNotification(
    token: string,
    title: string,
    body: string,
    data: any = {}
  ): Promise<void> {
    try {
      const message = {
        to: token,
        sound: 'default',
        title,
        body,
        data,
      };

      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(`Push notification failed: ${result.message || response.statusText}`);
      }

      console.log('[NotificationService] ‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserNotificationSettings(userId: string): Promise<NotificationSettings> {
    try {
      const { data, error } = await supabase
        .rpc('get_notification_settings', { target_user_id: userId });

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return {
          allNotificationsEnabled: true,
          newOrdersEnabled: true,
          newApplicationsEnabled: true,
          orderUpdatesEnabled: true,
          orderCompletedEnabled: true,
        };
      }

      const settings = data[0];
      return {
        allNotificationsEnabled: settings.all_notifications_enabled,
        newOrdersEnabled: settings.new_orders_enabled,
        newApplicationsEnabled: settings.new_applications_enabled,
        orderUpdatesEnabled: settings.order_updates_enabled,
        orderCompletedEnabled: settings.order_completed_enabled,
      };
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return {
        allNotificationsEnabled: true,
        newOrdersEnabled: true,
        newApplicationsEnabled: true,
        orderUpdatesEnabled: true,
        orderCompletedEnabled: true,
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateNotificationSettings(settings: NotificationSettings): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const { error } = await supabase
        .from('notification_settings')
        .upsert({
          user_id: authState.user.id,
          all_notifications_enabled: settings.allNotificationsEnabled,
          new_orders_enabled: settings.newOrdersEnabled,
          new_applications_enabled: settings.newApplicationsEnabled,
          order_updates_enabled: settings.orderUpdatesEnabled,
          order_completed_enabled: settings.orderCompletedEnabled,
        });

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return false;
      }

      console.log('[NotificationService] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return false;
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async logNotification(
    userId: string,
    title: string,
    body: string,
    data: any,
    notificationType: PushNotificationData['notificationType']
  ): Promise<void> {
    try {
      const { error } = await supabase
        .from('notification_logs')
        .insert({
          user_id: userId,
          title,
          body,
          data,
          notification_type: notificationType,
          status: 'sent'
        });

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö push —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unregisterPushTokens(): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return;
      }

      const { error } = await supabase
        .from('push_tokens')
        .update({ is_active: false })
        .eq('user_id', authState.user.id);

      if (error) {
        console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return;
      }

      console.log('[NotificationService] ‚úÖ Push —Ç–æ–∫–µ–Ω—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('[NotificationService] ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ push —Ç–æ–∫–µ–Ω–∞
   */
  getCurrentPushToken(): string | null {
    return this.currentPushToken;
  }
}

export const notificationService = NotificationService.getInstance();