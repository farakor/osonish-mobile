import { supabase } from './supabaseClient';
import * as FileSystem from 'expo-file-system';
import { decode } from 'base64-arraybuffer';
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface MediaUploadResult {
  success: boolean;
  urls?: string[];
  error?: string;
}

export class MediaService {
  private static instance: MediaService;
  private readonly BUCKET_NAME = 'order-media';
  private readonly ENABLE_STORAGE = true; // –ü–æ—Å—Ç–∞–≤—å—Ç–µ false –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Storage

  static getInstance(): MediaService {
    if (!MediaService.instance) {
      MediaService.instance = new MediaService();
    }
    return MediaService.instance;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
   */
  private async ensureBucketExists(): Promise<boolean> {
    try {
      console.log(`[MediaService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket '${this.BUCKET_NAME}'...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase Storage
      console.log('[MediaService] üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å listBuckets()...');
      const { data: buckets, error: listError } = await supabase.storage.listBuckets();

      if (listError) {
        console.error('[MediaService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Storage:', listError);
        console.error('[MediaService] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(listError, null, 2));
        console.error(`[MediaService] –ö–æ–¥ –æ—à–∏–±–∫–∏: ${listError.status}`);
        console.error(`[MediaService] –°–æ–æ–±—â–µ–Ω–∏–µ: ${listError.message}`);

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π bucket
        console.log('[MediaService] üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏...');
        try {
          const { data: testData, error: testError } = await supabase.storage
            .from(this.BUCKET_NAME)
            .list('', { limit: 1 });

          if (testError) {
            console.error('[MediaService] ‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', testError);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if (testError.message?.includes('JWT')) {
              console.error('[MediaService] üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –Ω—É–∂–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏');
              console.error('[MediaService] üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL: STORAGE_POLICIES_ANONYMOUS.sql');
            } else if (testError.message?.includes('not found')) {
              console.error('[MediaService] üì¶ Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–π—Ç–µ –≤ Dashboard');
              console.error('[MediaService] üí° Storage ‚Üí New Bucket ‚Üí name: order-media ‚Üí Public: ‚úÖ');
            } else if (testError.message?.includes('policy')) {
              console.error('[MediaService] üîí –ü—Ä–æ–±–ª–µ–º–∞ —Å RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏');
              console.error('[MediaService] üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: CREATE POLICY "Public buckets are viewable by everyone" ON storage.buckets FOR SELECT USING (true);');
            }
          } else {
            console.log('[MediaService] ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return true; // Bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ listBuckets() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
          }
        } catch (altError) {
          console.error('[MediaService] ‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', altError);
        }

        return false;
      }

      console.log(`[MediaService] üìã –ù–∞–π–¥–µ–Ω–æ buckets: ${buckets.length}`);
      console.log('[MediaService] –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö buckets:');
      buckets.forEach((bucket: { name: string, id: string, public: boolean }, index: number) => {
        console.log(`  ${index + 1}. "${bucket.name}" (id: ${bucket.id}, public: ${bucket.public})`);
      });

      const bucketExists = buckets.some((bucket: { name: string }) => bucket.name === this.BUCKET_NAME);

      if (!bucketExists) {
        console.error(`[MediaService] ‚ùå Bucket '${this.BUCKET_NAME}' –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å–ø–∏—Å–∫–µ!`);

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ bucket
        console.log('[MediaService] üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ bucket...');
        try {
          const { data: listData, error: directError } = await supabase.storage
            .from(this.BUCKET_NAME)
            .list('', { limit: 1 });

          if (directError) {
            console.error('[MediaService] ‚ùå –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', directError);
            if (directError.message?.includes('not found')) {
              console.error('[MediaService] üíÄ Bucket –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else if (directError.message?.includes('permission') || directError.message?.includes('policy')) {
              console.error('[MediaService] üîí –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (RLS –ø–æ–ª–∏—Ç–∏–∫–∏)');
              console.error('[MediaService] üí° –†–µ—à–µ–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Storage ‚Üí Policies');
            }
          } else {
            console.log('[MediaService] ‚úÖ –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! Bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.log('[MediaService] üîç –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π listBuckets');
            return true; // Bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          }
        } catch (directAltError) {
          console.error('[MediaService] ‚ùå –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', directAltError);
        }

        console.error('[MediaService] üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.error('  1. –°–æ–∑–¥–∞–π—Ç–µ bucket: https://supabase.com ‚Üí Storage ‚Üí Create bucket');
        console.error(`  2. Name: ${this.BUCKET_NAME} (—Ç–æ—á–Ω–æ —Ç–∞–∫!)`);
        console.error('  3. Public bucket: ‚úÖ –í–∫–ª—é—á–∏—Ç–µ');
        console.error('  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ Storage ‚Üí Policies');
        console.error('  5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: STORAGE_POLICIES_ANONYMOUS.sql');
        return false;
      }

      console.log(`[MediaService] ‚úÖ Bucket '${this.BUCKET_NAME}' –Ω–∞–π–¥–µ–Ω!`);
      return true;
    } catch (error) {
      console.error('[MediaService] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ bucket:', error);
      console.error('[MediaService] üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –≤ supabaseClient.ts');
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é Supabase
   */
  private async ensureAuthentication(): Promise<void> {
    console.log('[MediaService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.warn('[MediaService] ‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', authError?.message || 'Auth session missing!');

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ AsyncStorage
        console.log('[MediaService] üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Supabase —Å–µ—Å—Å–∏—é –∏–∑ AsyncStorage...');

        try {
          const storedSession = await AsyncStorage.getItem('@osonish_supabase_session');
          console.log('[MediaService] üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é:', storedSession ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

          if (storedSession) {
            console.log('[MediaService] üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Supabase —Å–µ—Å—Å–∏—é...');
            const session = JSON.parse(storedSession);
            console.log('[MediaService] üìã –°–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç:', {
              hasAccessToken: !!session.access_token,
              hasRefreshToken: !!session.refresh_token,
              expiresAt: session.expires_at
            });

            const { data, error: setSessionError } = await supabase.auth.setSession(session);

            if (setSessionError) {
              console.error('[MediaService] ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:', setSessionError.message);
              // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
              await AsyncStorage.removeItem('@osonish_supabase_session');
              console.log('[MediaService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (—Ç—Ä–µ–±—É—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ Storage)');
              return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
            console.log('[MediaService] ‚úÖ –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const { data: { user: restoredUser }, error: restoreError } = await supabase.auth.getUser();

            if (restoreError || !restoredUser) {
              console.warn('[MediaService] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
              console.warn('[MediaService] –û—à–∏–±–∫–∞:', restoreError?.message);
              console.log('[MediaService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (—Ç—Ä–µ–±—É—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ Storage)');
            } else {
              console.log('[MediaService] ‚úÖ Supabase —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
              console.log(`[MediaService] üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${restoredUser.id}`);
              console.log(`[MediaService] üìß Email: ${restoredUser.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            }
          } else {
            console.log('[MediaService] üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
            console.log('[MediaService] üîç –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–ª—é—á–∏ AsyncStorage...');

            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
            const allKeys = await AsyncStorage.getAllKeys();
            const relevantKeys = allKeys.filter(key => key.includes('osonish') || key.includes('supabase'));
            console.log('[MediaService] üóÇÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ Osonish:', relevantKeys);

            for (const key of relevantKeys) {
              const value = await AsyncStorage.getItem(key);
              console.log(`[MediaService] üîë ${key}: ${value ? '–∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ø—É—Å—Ç–æ–µ'}`);
            }
          }
        } catch (sessionError) {
          console.warn('[MediaService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
          console.log('[MediaService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (—Ç—Ä–µ–±—É—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ Storage)');
        }
      } else {
        console.log(`[MediaService] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.id}`);
        console.log(`[MediaService] üìß Email: ${user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      }
    } catch (error) {
      console.warn('[MediaService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      console.log('[MediaService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (—Ç—Ä–µ–±—É—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ Storage)');
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ Supabase Storage
   */
  async uploadMediaFiles(files: Array<{ uri: string, type: 'image' | 'video', name: string, size: number }>): Promise<MediaUploadResult> {
    try {
      console.log('[MediaService] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...');
      console.log(`[MediaService] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Storage
      if (!this.ENABLE_STORAGE) {
        console.log('[MediaService] ‚ö†Ô∏è Storage –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return {
          success: false,
          error: 'Storage –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase
      if (!supabase) {
        console.error('[MediaService] ‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return {
          success: false,
          error: 'Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
      }

      console.log('[MediaService] ‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log(`[MediaService] üåê Supabase URL: ${supabase.supabaseUrl}`);
      console.log(`[MediaService] üîë Auth: ${supabase.supabaseKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      await this.ensureAuthentication();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º bucket –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      const bucketReady = await this.ensureBucketExists();
      if (!bucketReady) {
        return {
          success: false,
          error: '–•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        };
      }

      const uploadPromises = files.map(async (file, index) => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
          const fileExtension = file.name.split('.').pop() || (file.type === 'image' ? 'jpg' : 'mp4');

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          const fileName = `${Date.now()}_${index}.${fileExtension}`;
          const filePath = `orders/${fileName}`;

          console.log(`[MediaService] üìÅ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª ${file.name} –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...`);
          console.log(`[MediaService] üì± URI: ${file.uri}`);
          console.log(`[MediaService] üìè –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(1)} KB`);
          console.log(`[MediaService] üéØ –¢–∏–ø: ${file.type}`);

          // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –≤ React Native
          const base64 = await FileSystem.readAsStringAsync(file.uri, {
            encoding: FileSystem.EncodingType.Base64,
          });

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ ArrayBuffer –¥–ª—è Supabase
          const arrayBuffer = decode(base64);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME type
          const contentType = file.type === 'image' ? 'image/jpeg' :
            file.type === 'video' ? 'video/mp4' :
              file.name.toLowerCase().includes('.png') ? 'image/png' :
                file.name.toLowerCase().includes('.jpg') || file.name.toLowerCase().includes('.jpeg') ? 'image/jpeg' :
                  'application/octet-stream';

          console.log(`[MediaService] üè∑Ô∏è Content-Type: ${contentType}`);
          console.log(`[MediaService] üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø—É—Ç—å: ${filePath}`);

          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
          const { data, error } = await supabase.storage
            .from(this.BUCKET_NAME)
            .upload(filePath, arrayBuffer, {
              contentType: contentType,
              upsert: false
            });

          if (error) {
            console.error(`[MediaService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RLS –æ—à–∏–±–æ–∫
            if (error.message?.includes('row-level security policy')) {
              console.error('');
              console.error('üîí RLS POLICY ERROR - –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:');
              console.error('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard ‚Üí Storage');
              console.error('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ bucket "order-media" PUBLIC');
              console.error('3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É: SELECT —Å —É—Å–ª–æ–≤–∏–µ–º "true"');
              console.error('4. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É: INSERT —Å —É—Å–ª–æ–≤–∏–µ–º "true"');
              console.error('5. –ò–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ QUICK_STORAGE_FIX.md');
              console.error('');
            } else if (error.message?.includes('JWT') || error.message?.includes('session missing')) {
              console.error('');
              console.error('üîë AUTHENTICATION ERROR - –†–ï–®–ï–ù–ò–ï:');
              console.error('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: STORAGE_POLICIES_ANONYMOUS.sql');
              console.error('2. –≠—Ç–æ —Ä–∞–∑—Ä–µ—à–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ order-media bucket');
              console.error('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL');
              console.error('');
            } else if (error.message?.includes('not found') || error.message?.includes('bucket')) {
              console.error('');
              console.error('üì¶ BUCKET ERROR - –†–ï–®–ï–ù–ò–ï:');
              console.error('1. –°–æ–∑–¥–∞–π—Ç–µ bucket "order-media" –≤ Supabase Dashboard');
              console.error('2. Storage ‚Üí New Bucket ‚Üí Name: order-media');
              console.error('3. Public bucket: ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏—Ç–µ');
              console.error('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–∑ STORAGE_POLICIES_ANONYMOUS.sql');
              console.error('');
            } else if (error.message?.includes('size') || error.message?.includes('limit')) {
              console.error('');
              console.error('üìè SIZE ERROR - —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
              console.error(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(file.size / 1024 / 1024).toFixed(1)} –ú–ë`);
              console.error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase');
              console.error('');
            }

            throw error;
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
          const { data: urlData } = supabase.storage
            .from(this.BUCKET_NAME)
            .getPublicUrl(filePath);

          console.log(`[MediaService] üìÑ –§–∞–π–ª ${file.name}:`);
          console.log(`[MediaService] üìÅ –ü—É—Ç—å: ${filePath}`);
          console.log(`[MediaService] üîó URL: ${urlData.publicUrl}`);

          return urlData.publicUrl;
        } catch (error) {
          console.error(`[MediaService] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
          throw error;
        }
      });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
      const urls = await Promise.all(uploadPromises);

      console.log(`[MediaService] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${urls.length} —Ñ–∞–π–ª–æ–≤`);

      return {
        success: true,
        urls
      };

    } catch (error) {
      console.error('[MediaService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã';

      if (error instanceof Error) {
        if (error.message?.includes('row-level security policy')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Storage. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏.';
          console.error('');
          console.error('üí° –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï:');
          console.error('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ QUICK_STORAGE_FIX.md');
          console.error('');
        } else if (error.message?.includes('JWT') || error.message?.includes('session missing')) {
          errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Storage.';
          console.error('');
          console.error('üí° –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï:');
          console.error('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: STORAGE_POLICIES_ANONYMOUS.sql');
          console.error('2. –≠—Ç–æ —Ä–∞–∑—Ä–µ—à–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤');
          console.error('');
        } else if (error.message?.includes('not found') || error.message?.includes('bucket')) {
          errorMessage = 'Bucket "order-media" –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Dashboard.';
          console.error('');
          console.error('üí° –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï:');
          console.error('1. Supabase Dashboard ‚Üí Storage ‚Üí New Bucket');
          console.error('2. Name: order-media, Public: ‚úÖ');
          console.error('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL: STORAGE_POLICIES_ANONYMOUS.sql');
          console.error('');
        } else if (error.message?.includes('size') || error.message?.includes('limit')) {
          errorMessage = '–§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–∏–µ —Ñ–∞–π–ª—ã.';
        } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        }
      }

      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏–∑ Storage (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async deleteMediaFiles(urls: string[]): Promise<boolean> {
    try {
      const filePaths = urls.map(url => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
        const urlParts = url.split('/');
        return urlParts.slice(-2).join('/'); // orders/filename.ext
      });

      const { error } = await supabase.storage
        .from(this.BUCKET_NAME)
        .remove(filePaths);

      if (error) {
        console.error('[MediaService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('[MediaService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
      return false;
    }
  }
}

export const mediaService = MediaService.getInstance(); 