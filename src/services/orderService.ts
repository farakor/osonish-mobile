import { Order, CreateOrderRequest, CreateOrderResponse, UpdateOrderRequest, UpdateOrderResponse, CancelOrderResponse, Applicant, CreateApplicantRequest, WorkerApplication, Review, CreateReviewRequest, WorkerRating, WorkerProfile } from '../types';
import { authService } from './authService';
import { notificationService } from './notificationService';
import { supabase, Database } from './supabaseClient';
import { getTranslatedNotification, getTranslatedNotificationsForUsers } from '../utils/notificationTranslations';

export class OrderService {
  private static instance: OrderService;
  private notifiedOrders: Set<string> = new Set(); // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ orderId

  static getInstance(): OrderService {
    if (!OrderService.instance) {
      OrderService.instance = new OrderService();
    }
    return OrderService.instance;
  }

  constructor() {
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  private async init(): Promise<void> {
    if (!supabase) {
      console.error('[OrderService] ‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
      const { error } = await supabase.from('orders').select('count').limit(1);
      if (error) {
        console.error('[OrderService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      console.log('[OrderService] ‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      this.startReminderChecker();
    } catch (error) {
      console.error('[OrderService] ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  async createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse> {
    try {
      console.log('[OrderService] üî® –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', request.title);
      console.log('[OrderService] üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:', new Date().toISOString());

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!request.title?.trim()) {
        return {
          success: false,
          error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        };
      }

      if (request.title.length > 70) {
        return {
          success: false,
          error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 70 —Å–∏–º–≤–æ–ª–æ–≤'
        };
      }

      if (!request.description?.trim()) {
        return {
          success: false,
          error: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        };
      }

      if (request.description.length > 500) {
        return {
          success: false,
          error: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤'
        };
      }

      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        };
      }

      const orderId = this.generateOrderId();
      console.log('[OrderService] üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∑–∞–∫–∞–∑–∞:', orderId);
      const currentTime = new Date().toISOString();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Supabase
      const { data, error } = await supabase
        .from('orders')
        .insert({
          id: orderId,
          title: request.title,
          description: request.description,
          category: request.category,
          location: request.location,
          latitude: request.latitude || null,
          longitude: request.longitude || null,
          budget: request.budget,
          workers_needed: request.workersNeeded,
          service_date: request.serviceDate,
          photos: request.photos || [],
          customer_id: authState.user.id,
          status: 'new',
          applicants_count: 0,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
          transport_paid: request.transportPaid || false,
          meal_included: request.mealIncluded || false,
          meal_paid: request.mealPaid || false,
          created_at: currentTime,
          updated_at: currentTime
        })
        .select()
        .single();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Supabase:', error);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'
        };
      }

      const newOrder: Order = {
        id: data.id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        latitude: data.latitude || undefined,
        longitude: data.longitude || undefined,
        budget: data.budget,
        workersNeeded: data.workers_needed,
        serviceDate: data.service_date,
        photos: data.photos || [],
        status: data.status as 'new' | 'in_progress' | 'completed' | 'cancelled',
        customerId: data.customer_id,
        applicantsCount: data.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: data.transport_paid || false,
        mealIncluded: data.meal_included || false,
        mealPaid: data.meal_paid || false,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', newOrder.title);
      console.log('[OrderService] üì∑ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–∫–∞–∑–µ:', newOrder.photos?.length || 0);
      if (newOrder.photos && newOrder.photos.length > 0) {
        console.log('[OrderService] üìÑ URL-—ã –º–µ–¥–∏–∞ –≤ –∑–∞–∫–∞–∑–µ:');
        newOrder.photos.forEach((url, index) => {
          console.log(`  ${index + 1}. ${url}`);
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
      console.log('[OrderService] üöÄ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞:', newOrder.id);
      this.sendNewOrderNotifications(newOrder).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', error);
      });

      return {
        success: true,
        data: newOrder
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∫—Ä–æ–º–µ –¥–∞—Ç—ã)
   */
  async updateOrder(request: UpdateOrderRequest): Promise<UpdateOrderResponse> {
    try {
      console.log('[OrderService] üî® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', request.orderId);
      console.log('[OrderService] üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', new Date().toISOString());

      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: existingOrder, error: fetchError } = await supabase
        .from('orders')
        .select('customer_id, status, service_date')
        .eq('id', request.orderId)
        .single();

      if (fetchError || !existingOrder) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', fetchError);
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      if (existingOrder.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return {
          success: false,
          error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏)
      if (!['new', 'response_received'].includes(existingOrder.status)) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ:', existingOrder.status);
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ'
        };
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º service_date)
      const updateData: any = {
        updated_at: new Date().toISOString()
      };

      if (request.title !== undefined) updateData.title = request.title;
      if (request.description !== undefined) updateData.description = request.description;
      if (request.category !== undefined) updateData.category = request.category;
      if (request.location !== undefined) updateData.location = request.location;
      if (request.latitude !== undefined) updateData.latitude = request.latitude;
      if (request.longitude !== undefined) updateData.longitude = request.longitude;
      if (request.budget !== undefined) updateData.budget = request.budget;
      if (request.workersNeeded !== undefined) updateData.workers_needed = request.workersNeeded;
      if (request.photos !== undefined) updateData.photos = request.photos;

      console.log('[OrderService] üìù –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è:', Object.keys(updateData));

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Supabase
      const { data, error } = await supabase
        .from('orders')
        .update(updateData)
        .eq('id', request.orderId)
        .select()
        .single();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Supabase:', error);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑'
        };
      }

      const updatedOrder: Order = {
        id: data.id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        latitude: data.latitude || undefined,
        longitude: data.longitude || undefined,
        budget: data.budget,
        workersNeeded: data.workers_needed,
        serviceDate: data.service_date, // –î–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π
        photos: data.photos || [],
        status: data.status as 'new' | 'in_progress' | 'completed' | 'cancelled',
        customerId: data.customer_id,
        applicantsCount: data.applicants_count,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedOrder.title);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑, –æ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      this.sendOrderUpdatedNotifications(request.orderId).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      });

      return {
        success: true,
        data: updatedOrder
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Ç–∫–ª–∏–∫–æ–≤ (–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
   */
  async cancelOrder(orderId: string): Promise<CancelOrderResponse> {
    try {
      console.log('[OrderService] ‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞:', orderId);
      console.log('[OrderService] üïí –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã:', new Date().toISOString());

      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: existingOrder, error: fetchError } = await supabase
        .from('orders')
        .select('customer_id, status, title')
        .eq('id', orderId)
        .single();

      if (fetchError || !existingOrder) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', fetchError);
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      if (existingOrder.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return {
          success: false,
          error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏)
      if (!['new', 'response_received'].includes(existingOrder.status)) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ:', existingOrder.status);
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ'
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑, –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const { data: applicants } = await supabase
        .from('applicants')
        .select('worker_id, worker_name')
        .eq('order_id', orderId)
        .in('status', ['pending', 'accepted']);

      console.log(`[OrderService] üìã –ù–∞–π–¥–µ–Ω–æ ${applicants?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑ (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
      const { error: deleteApplicantsError } = await supabase
        .from('applicants')
        .delete()
        .eq('order_id', orderId);

      if (deleteApplicantsError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤:', deleteApplicantsError);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑'
        };
      }

      console.log('[OrderService] ‚úÖ –û—Ç–∫–ª–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');

      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'cancelled' –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
      const { error: updateOrderError } = await supabase
        .from('orders')
        .update({
          status: 'cancelled',
          applicants_count: 0,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateOrderError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', updateOrderError);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'
        };
      }

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω:', existingOrder.title);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
      if (applicants && applicants.length > 0) {
        this.sendOrderCancelledNotifications(orderId, existingOrder.title, applicants).catch(error => {
          console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:', error);
        });
      }

      return {
        success: true
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase
   */
  async getAllOrders(): Promise<Order[]> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: item.transport_paid || false,
        mealIncluded: item.meal_included || false,
        mealPaid: item.meal_paid || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
   */
  async getCustomerOrders(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('customer_id', authState.user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: item.transport_paid || false,
        mealIncluded: item.meal_included || false,
        mealPaid: item.meal_paid || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async getNewOrdersForWorkers(): Promise<Order[]> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .in('status', ['new', 'response_received'])
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: item.transport_paid || false,
        mealIncluded: item.meal_included || false,
        mealPaid: item.meal_paid || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–∞—Ç—ã —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)
   */
  async getWorkerBusyDates(workerId?: string): Promise<Set<string>> {
    try {
      const authState = authService.getAuthState();
      const targetWorkerId = workerId || authState.user?.id;

      if (!targetWorkerId) {
        console.warn('[OrderService] ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        return new Set();
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          id,
          orders!inner(service_date)
        `)
        .eq('worker_id', targetWorkerId)
        .eq('status', 'accepted');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
        return new Set();
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const busyDates = new Set<string>();
      data?.forEach((item: any) => {
        const serviceDate = item.orders.service_date;
        if (serviceDate) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (YYYY-MM-DD)
          const dateOnly = serviceDate.split('T')[0];
          busyDates.add(dateOnly);
        }
      });

      console.log(`[OrderService] –ù–∞–π–¥–µ–Ω–æ ${busyDates.size} –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${targetWorkerId}`);
      return busyDates;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      return new Set();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   * –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç
   */
  async getAvailableOrdersForWorker(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ—Ç–∫–ª–∏–∫–∏
      const allAvailableOrders = await this.getNewOrdersForWorkers();

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const busyDates = await this.getWorkerBusyDates(authState.user.id);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã
      const filteredOrders = allAvailableOrders.filter(order => {
        const orderDate = order.serviceDate.split('T')[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        const isDateBusy = busyDates.has(orderDate);

        if (isDateBusy) {
          console.log(`[OrderService] üìÖ –ó–∞–∫–∞–∑ ${order.id} –∏—Å–∫–ª—é—á–µ–Ω - –¥–∞—Ç–∞ ${orderDate} —É–∂–µ –∑–∞–Ω—è—Ç–∞`);
        }

        return !isDateBusy;
      });

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allAvailableOrders.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
      console.log(`[OrderService] –ò—Å–∫–ª—é—á–µ–Ω–æ ${allAvailableOrders.length - filteredOrders.length} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã`);
      console.log(`[OrderService] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${filteredOrders.length} –∑–∞–∫–∞–∑–æ–≤`);

      return filteredOrders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–∫–∞–∑—á–∏–∫–∞)
   * –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—Ä–æ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö
   */
  async getUserNewOrders(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('customer_id', authState.user.id)
        .not('status', 'in', '(completed,cancelled)')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: item.transport_paid || false,
        mealIncluded: item.meal_included || false,
        mealPaid: item.meal_paid || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
   */
  async getOrderById(orderId: string): Promise<Order | null> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (error || !data) {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      return {
        id: data.id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        latitude: data.latitude || undefined,
        longitude: data.longitude || undefined,
        budget: data.budget,
        workersNeeded: data.workers_needed,
        serviceDate: data.service_date,
        photos: data.photos || [],
        status: data.status as 'new' | 'in_progress' | 'completed' | 'cancelled',
        customerId: data.customer_id,
        applicantsCount: data.applicants_count,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
        transportPaid: data.transport_paid || false,
        mealIncluded: data.meal_included || false,
        mealPaid: data.meal_paid || false,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };
    } catch (error) {
      console.error(`[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async updateOrderStatus(orderId: string, status: Order['status']): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('orders')
        .update({
          status,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        return false;
      }

      console.log(`[OrderService] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
   */
  async createApplicant(request: CreateApplicantRequest): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('service_date')
        .eq('id', request.orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      const conflictingApplications = await this.checkWorkerDateConflicts(authState.user.id, orderData.service_date);
      if (conflictingApplications.length > 0) {
        console.log(`[OrderService] ‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${conflictingApplications.length}`);
        // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å false –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
        // –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      }

      const applicantId = this.generateApplicantId();
      const currentTime = new Date().toISOString();

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ (—Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç)
      const [workerRating, completedJobsCount] = await Promise.all([
        this.getWorkerRating(authState.user.id),
        this.getWorkerCompletedJobsCount(authState.user.id)
      ]);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ –≤ Supabase
      const { error } = await supabase
        .from('applicants')
        .insert({
          id: applicantId,
          order_id: request.orderId,
          worker_id: authState.user.id,
          worker_name: `${authState.user.firstName} ${authState.user.lastName}`,
          worker_phone: authState.user.phone,
          rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ null
          completed_jobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
          message: request.message || '',
          proposed_price: request.proposedPrice,
          applied_at: currentTime,
          status: 'pending',
          created_at: currentTime,
          updated_at: currentTime
        });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –≤ Supabase:', error);
        return false;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
      await this.incrementApplicantsCount(request.orderId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞
      const applicantsCount = await this.getApplicantsCount(request.orderId);
      if (applicantsCount === 1) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'response_received'
        await this.updateOrderStatus(request.orderId, 'response_received');
        console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${request.orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'response_received' - –ø–æ–ª—É—á–µ–Ω –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
      this.sendNewApplicationNotification(request.orderId, authState.user).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ:', error);
      });

      console.log(`[OrderService] ‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${request.orderId}`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑
   */
  async hasUserAppliedToOrder(orderId: string): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return false;
      }

      const { data, error } = await supabase
        .from('applicants')
        .select('id')
        .eq('order_id', orderId)
        .eq('worker_id', authState.user.id)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 - no rows found
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
        return false;
      }

      return !!data;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
   */
  async getUserApplicationStatus(orderId: string): Promise<{ hasApplied: boolean; status?: 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled' }> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return { hasApplied: false };
      }

      const { data, error } = await supabase
        .from('applicants')
        .select('status, orders!inner(status)')
        .eq('order_id', orderId)
        .eq('worker_id', authState.user.id)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 - no rows found
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
        return { hasApplied: false };
      }

      if (!data) {
        return { hasApplied: false };
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      let applicationStatus = data.status;
      if (data.status === 'accepted' && data.orders.status === 'completed') {
        applicationStatus = 'completed';
      }

      return {
        hasApplied: true,
        status: applicationStatus as 'pending' | 'accepted' | 'rejected' | 'completed' | 'cancelled'
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
      return { hasApplied: false };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserApplications(): Promise<Set<string>> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return new Set();
      }

      const { data, error } = await supabase
        .from('applicants')
        .select('order_id')
        .eq('worker_id', authState.user.id);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return new Set();
      }

      return new Set(data?.map((item: any) => item.order_id) || []);
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return new Set();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
   */
  async getWorkerApplications(): Promise<WorkerApplication[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          orders!inner (
            id,
            title,
            description,
            category,
            location,
            latitude,
            longitude,
            budget,
            service_date,
            status,
            customer_id
          )
        `)
        .eq('worker_id', authState.user.id)
        .order('applied_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ Supabase:', error);
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
      const customerIds = [...new Set(data.map((item: any) => item.orders.customer_id))];

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö
      const { data: customers, error: customersError } = await supabase
        .from('users')
        .select('id, first_name, last_name, phone')
        .in('id', customerIds);

      if (customersError) {
        console.warn('[OrderService] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö:', customersError);
      }

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const customersMap = new Map();
      customers?.forEach((customer: any) => {
        customersMap.set(customer.id, customer);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç
      const [workerRating, completedJobsCount] = await Promise.all([
        this.getWorkerRating(authState.user.id),
        this.getWorkerCompletedJobsCount(authState.user.id)
      ]);

      const applications: WorkerApplication[] = data.map((item: any) => {
        const order = item.orders;
        const customer = customersMap.get(order.customer_id);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        let applicationStatus = item.status;
        if (item.status === 'accepted' && order.status === 'completed') {
          applicationStatus = 'completed';
        } else if (order.status === 'cancelled') {
          // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, —Ç–æ –∑–∞—è–≤–∫–∞ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π
          applicationStatus = 'cancelled';
        }

        return {
          id: item.id,
          orderId: order.id,
          orderTitle: order.title,
          orderCategory: order.category,
          orderDescription: order.description,
          orderLocation: order.location,
          orderLatitude: order.latitude,
          orderLongitude: order.longitude,
          orderBudget: order.budget,
          orderServiceDate: order.service_date,
          orderStatus: order.status,
          customerName: customer ? `${customer.first_name} ${customer.last_name}` : '–ó–∞–∫–∞–∑—á–∏–∫',
          customerPhone: '', // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
          rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
          completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
          message: item.message,
          proposedPrice: item.proposed_price,
          appliedAt: item.applied_at,
          status: applicationStatus
        };
      });

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è`);
      return applications;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async cancelWorkerApplication(applicationId: string): Promise<boolean> {
    try {
      console.log(`[OrderService] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–∞—è–≤–∫–∏ ${applicationId}`);

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–∏–∫–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å orderId
      const { data: applicant, error: getError } = await supabase
        .from('applicants')
        .select('order_id, status, worker_name')
        .eq('id', applicationId)
        .single();

      if (getError || !applicant) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–ª–∏–∫–µ:', getError);
        return false;
      }

      console.log(`[OrderService] üìã –ù–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫: —Å—Ç–∞—Ç—É—Å "${applicant.status}", –∑–∞–∫–∞–∑ ${applicant.order_id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ pending)
      if (applicant.status !== 'pending') {
        console.error(`[OrderService] ‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${applicant.status}`);
        return false;
      }

      const orderId = applicant.order_id;

      // –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∫–ª–∏–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
      console.log(`[OrderService] üîÑ –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∫–ª–∏–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π...`);
      const { error } = await supabase
        .from('applicants')
        .update({
          status: 'cancelled',
          updated_at: new Date().toISOString()
        })
        .eq('id', applicationId);

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞:', error);
        return false;
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–∫–ª–∏–∫ ${applicationId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π`);

      // –ü—Ä—è–º–æ–π –ø–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log(`[OrderService] üîÑ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
      const { data: remainingApplicants, error: countError } = await supabase
        .from('applicants')
        .select('id, status')
        .eq('order_id', orderId)
        .in('status', ['pending', 'accepted']);

      if (countError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', countError);
      } else {
        const activeCount = remainingApplicants?.length || 0;
        const applicantIds = remainingApplicants?.map(a => `${a.id} (${a.status})`) || [];
        console.log(`[OrderService] üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –±–∞–∑–µ: ${activeCount}`);
        console.log(`[OrderService] üìã ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:`, applicantIds);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–∫–∞–∑–µ
        const { error: updateError } = await supabase
          .from('orders')
          .update({
            applicants_count: activeCount,
            updated_at: new Date().toISOString()
          })
          .eq('id', orderId);

        if (updateError) {
          console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', updateError);
        } else {
          console.log(`[OrderService] ‚úÖ –°—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${activeCount}`);
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'new'
        if (activeCount === 0) {
          console.log(`[OrderService] üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'new'...`);
          await this.updateOrderStatus(orderId, 'new');
          console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 'new' - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤`);
        }
      }

      console.log(`[OrderService] üéâ –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ ${applicationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      return true;
    } catch (error) {
      console.error('[OrderService] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
   */
  async isWorkerAvailableOnDate(workerId: string, serviceDate: string): Promise<boolean> {
    try {
      const conflictingApplications = await this.checkWorkerDateConflicts(workerId, serviceDate);
      return conflictingApplications.length === 0;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã–º
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑—á–∏–∫—É
   * –°–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  filterApplicantsForCustomer(applicants: Applicant[]): Applicant[] {
    return applicants.filter(applicant => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ (pending –∏–ª–∏ accepted)
      if (applicant.status === 'rejected') {
        console.log(`[OrderService] üö´ –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${applicant.workerName}`);
        return false;
      }

      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
      if (applicant.status === 'cancelled') {
        console.log(`[OrderService] üö´ –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${applicant.workerName}`);
        return false;
      }

      // –ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫ pending, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (applicant.status === 'pending' && !applicant.isAvailable) {
        console.log(`[OrderService] ‚ö†Ô∏è –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${applicant.workerName}`);
        return false;
      }

      return true;
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async getApplicantsForOrder(orderId: string): Promise<Applicant[]> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('service_date')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return [];
      }

      const serviceDate = orderData.service_date;

      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          worker:worker_id (
            id,
            first_name,
            last_name,
            phone,
            profile_image
          )
        `)
        .eq('order_id', orderId)
        .order('applied_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const applicantsWithRealData = await Promise.all(
        data.map(async (item: any) => {
          const [workerRating, completedJobsCount, isAvailable] = await Promise.all([
            this.getWorkerRating(item.worker_id),
            this.getWorkerCompletedJobsCount(item.worker_id),
            this.isWorkerAvailableOnDate(item.worker_id, serviceDate)
          ]);

          const worker = item.worker;
          const workerName = worker ? `${worker.first_name} ${worker.last_name}` : item.worker_name;
          const workerPhone = worker?.phone || item.worker_phone;
          const workerAvatar = worker?.profile_image || null;

          return {
            id: item.id,
            orderId: item.order_id,
            workerId: item.worker_id,
            workerName: workerName,
            workerPhone: workerPhone,
            avatar: workerAvatar,
            rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
            message: item.message,
            proposedPrice: item.proposed_price,
            appliedAt: item.applied_at,
            status: item.status as 'pending' | 'accepted' | 'rejected' | 'completed',
            isAvailable: isAvailable // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
          };
        })
      );

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${applicantsWithRealData.length} –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
      return applicantsWithRealData;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
   */
  async getFilteredApplicantsForOrder(orderId: string): Promise<Applicant[]> {
    try {
      const allApplicants = await this.getApplicantsForOrder(orderId);
      console.log(`[OrderService] üîç –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, allApplicants.map(a => `${a.id} (${a.status})`));

      const filteredApplicants = this.filterApplicantsForCustomer(allApplicants);
      console.log(`[OrderService] üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:`, filteredApplicants.map(a => `${a.id} (${a.status})`));

      console.log(`[OrderService] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredApplicants.length} –∏–∑ ${allApplicants.length} –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
      return filteredApplicants;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async checkAndUpdateOrderStatus(orderId: string): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const order = await this.getOrderById(orderId);
      if (!order) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'new' –∏ 'response_received'
      if (order.status !== 'new' && order.status !== 'response_received') {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${order.status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
        return true;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const applicants = await this.getApplicantsForOrder(orderId);
      const acceptedApplicants = applicants.filter(applicant => applicant.status === 'accepted');

      console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId}: –ø—Ä–∏–Ω—è—Ç–æ ${acceptedApplicants.length} –∏–∑ ${order.workersNeeded} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'in_progress'
      if (acceptedApplicants.length >= order.workersNeeded) {
        const statusUpdated = await this.updateOrderStatus(orderId, 'in_progress');
        if (statusUpdated) {
          console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'in_progress' - –Ω–∞–±—Ä–∞–Ω–æ ${acceptedApplicants.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);

          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
          this.scheduleCompleteWorkReminder(order.customerId, orderId, order.serviceDate).catch(error => {
            console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
          });

          return true;
        } else {
          console.error(`[OrderService] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId}`);
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  private async checkWorkerDateConflicts(workerId: string, serviceDate: string): Promise<string[]> {
    try {
      console.log(`[OrderService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId} –Ω–∞ –¥–∞—Ç—É ${serviceDate}`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const targetDate = serviceDate.split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ YYYY-MM-DD —á–∞—Å—Ç—å
      console.log(`[OrderService] üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–∞ –¥–∞—Ç—É: ${targetDate}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          id,
          order_id,
          orders!inner(service_date)
        `)
        .eq('worker_id', workerId)
        .eq('status', 'accepted')
        .gte('orders.service_date', `${targetDate}T00:00:00.000Z`)
        .lt('orders.service_date', `${targetDate}T23:59:59.999Z`);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞—Ç:', error);
        return [];
      }

      const conflictingApplicationIds = data?.map(item => item.id) || [];
      console.log(`[OrderService] üìÖ –ù–∞–π–¥–µ–Ω–æ ${conflictingApplicationIds.length} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤`);

      return conflictingApplicationIds;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞—Ç:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
   */
  private async checkAndRevertOrderStatus(orderId: string): Promise<void> {
    try {
      console.log(`[OrderService] üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('status')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'response_received'
      if (orderData.status !== 'response_received') {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${orderData.status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (pending –∏–ª–∏ accepted) –æ—Ç–∫–ª–∏–∫–∏
      const { data: activeApplicants, error: applicantsError } = await supabase
        .from('applicants')
        .select('id')
        .eq('order_id', orderId)
        .in('status', ['pending', 'accepted']);

      if (applicantsError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', applicantsError);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'new'
      if (!activeApplicants || activeApplicants.length === 0) {
        const { error: updateError } = await supabase
          .from('orders')
          .update({
            status: 'new',
            applicants_count: 0,
            updated_at: new Date().toISOString()
          })
          .eq('id', orderId);

        if (updateError) {
          console.error('[OrderService] –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', updateError);
          return;
        }

        console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ 'new' (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤)`);
      } else {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId} –∏–º–µ–µ—Ç ${activeApplicants.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤, —Å—Ç–∞—Ç—É—Å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è`);
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
   */
  private async rejectWorkerOtherApplicationsOnSameDate(workerId: string, serviceDate: string, excludeApplicationId: string): Promise<void> {
    try {
      console.log(`[OrderService] üö´ –û—Ç–∫–ª–æ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId} –Ω–∞ –¥–∞—Ç—É ${serviceDate}`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const targetDate = serviceDate.split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ YYYY-MM-DD —á–∞—Å—Ç—å
      console.log(`[OrderService] üìÖ –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–∞ –¥–∞—Ç—É: ${targetDate}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
      const { data: pendingApplications, error: fetchError } = await supabase
        .from('applicants')
        .select(`
          id,
          order_id,
          orders!inner(service_date)
        `)
        .eq('worker_id', workerId)
        .eq('status', 'pending')
        .gte('orders.service_date', `${targetDate}T00:00:00.000Z`)
        .lt('orders.service_date', `${targetDate}T23:59:59.999Z`)
        .neq('id', excludeApplicationId);

      if (fetchError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –æ—Ç–∫–ª–∏–∫–æ–≤:', fetchError);
        return;
      }

      if (!pendingApplications || pendingApplications.length === 0) {
        console.log('[OrderService] ‚úÖ –ù–µ—Ç –¥—Ä—É–≥–∏—Ö pending –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        return;
      }

      // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ order_id, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
      const affectedOrderIds = [...new Set(pendingApplications.map(app => app.order_id))];

      // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
      const applicationIds = pendingApplications.map(app => app.id);
      const { error: updateError } = await supabase
        .from('applicants')
        .update({
          status: 'rejected',
          updated_at: new Date().toISOString()
        })
        .in('id', applicationIds);

      if (updateError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', updateError);
        return;
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ${applicationIds.length} –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      for (const orderId of affectedOrderIds) {
        await this.checkAndRevertOrderStatus(orderId);
        await this.updateActiveApplicantsCount(orderId);
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    }
  }

  /**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 */
  async updateApplicantStatus(applicantId: string, status: Applicant['status']): Promise<boolean> {
    try {
      // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (status === 'accepted') {
        console.log(`[OrderService] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ ${applicantId}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–∏–∫–µ –∏ –∑–∞–∫–∞–∑–µ
        const { data: applicantData, error: applicantError } = await supabase
          .from('applicants')
          .select(`
            id,
            worker_id,
            order_id,
            status,
            orders!inner(service_date)
          `)
          .eq('id', applicantId)
          .single();

        if (applicantError || !applicantData) {
          console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–∞:', applicantError);
          return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ –µ—â–µ pending
        if (applicantData.status !== 'pending') {
          console.log(`[OrderService] ‚ö†Ô∏è –û—Ç–∫–ª–∏–∫ ${applicantId} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${applicantData.status}`);
          return false;
        }

        const workerId = applicantData.worker_id;
        const serviceDate = applicantData.orders.service_date;

        console.log(`[OrderService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId} –Ω–∞ –¥–∞—Ç—É ${serviceDate}`);

        // –î–µ–ª–∞–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å —É—Å–ª–æ–≤–∏–µ–º, —á—Ç–æ –æ–Ω –≤—Å–µ –µ—â–µ pending
        const { data: updateResult, error: updateError } = await supabase
          .from('applicants')
          .update({
            status: 'accepted',
            updated_at: new Date().toISOString()
          })
          .eq('id', applicantId)
          .eq('status', 'pending') // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ –µ—â–µ pending
          .select();

        if (updateError) {
          console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:', updateError);
          return false;
        }

        if (!updateResult || updateResult.length === 0) {
          console.log(`[OrderService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ ${applicantId} - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω`);
          return false;
        }

        console.log(`[OrderService] ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ ${applicantId}`);

        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥—Ä—É–≥–∏–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
        const targetDate = serviceDate.split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ YYYY-MM-DD —á–∞—Å—Ç—å
        console.log(`[OrderService] üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–∞—Ç—É: ${targetDate}`);

        const { data: conflictingData, error: conflictError } = await supabase
          .from('applicants')
          .select(`
            id,
            order_id,
            orders!inner(service_date)
          `)
          .eq('worker_id', workerId)
          .eq('status', 'accepted')
          .gte('orders.service_date', `${targetDate}T00:00:00.000Z`)
          .lt('orders.service_date', `${targetDate}T23:59:59.999Z`)
          .neq('id', applicantId);

        if (conflictError) {
          console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:', conflictError);
        } else if (conflictingData && conflictingData.length > 0) {
          console.log(`[OrderService] ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã: ${conflictingData.length}`);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –æ—Ç–∫–ª–æ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–∫–ª–∏–∫
          await supabase
            .from('applicants')
            .update({
              status: 'rejected',
              updated_at: new Date().toISOString()
            })
            .eq('id', applicantId);

          console.log(`[OrderService] üö´ –û—Ç–∫–ª–∏–∫ ${applicantId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –¥–∞—Ç`);
          return false;
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ pending –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
        await this.rejectWorkerOtherApplicationsOnSameDate(workerId, serviceDate, applicantId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        this.sendWorkerSelectedNotification(applicantId).catch(error => {
          console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
        });

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Ä–∞–±–æ—Ç—ã
        this.scheduleWorkReminder(workerId, applicantData.order_id, serviceDate).catch(error => {
          console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ:', error);
        });

        return true;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const { error } = await supabase
          .from('applicants')
          .update({
            status,
            updated_at: new Date().toISOString()
          })
          .eq('id', applicantId);

        if (error) {
          console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:', error);
          return false;
        }

        console.log(`[OrderService] –°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ ${applicantId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);

        // –ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        if (status === 'rejected') {
          // –ü–æ–ª—É—á–∞–µ–º order_id –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
          const { data: applicantData, error: fetchError } = await supabase
            .from('applicants')
            .select('order_id')
            .eq('id', applicantId)
            .single();

          if (!fetchError && applicantData) {
            await this.checkAndRevertOrderStatus(applicantData.order_id);
            await this.updateActiveApplicantsCount(applicantData.order_id);
          }
        }

        return true;
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }



  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
   */
  async getOrdersStats(): Promise<{ total: number; new: number; inProgress: number; completed: number; cancelled: number }> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('status');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        return { total: 0, new: 0, inProgress: 0, completed: 0, cancelled: 0 };
      }

      const stats = {
        total: data.length,
        new: data.filter((order: any) => order.status === 'new').length,
        inProgress: data.filter((order: any) => order.status === 'in_progress').length,
        completed: data.filter((order: any) => order.status === 'completed').length,
        cancelled: data.filter((order: any) => order.status === 'cancelled').length
      };

      console.log('[OrderService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', stats);
      return stats;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      return { total: 0, new: 0, inProgress: 0, completed: 0, cancelled: 0 };
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private async incrementApplicantsCount(orderId: string): Promise<void> {
    try {
      const { error } = await supabase.rpc('increment_applicants_count', {
        order_id: orderId
      });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private async getApplicantsCount(orderId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('applicants_count')
        .eq('id', orderId)
        .single();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
        return 0;
      }

      return data?.applicants_count || 0;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      return 0;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   * –°—á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ pending –∏ accepted –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async updateActiveApplicantsCount(orderId: string): Promise<void> {
    try {
      console.log(`[OrderService] üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
      const filteredApplicants = await this.getFilteredApplicantsForOrder(orderId);
      const activeCount = filteredApplicants.length;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase
        .from('orders')
        .update({
          applicants_count: activeCount,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
        return;
      }

      console.log(`[OrderService] ‚úÖ –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${activeCount} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private generateOrderId(): string {
    return `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
   */
  private generateApplicantId(): string {
    return `applicant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllOrders(): Promise<void> {
    try {
      const { error } = await supabase.from('orders').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ Supabase:', error);
      } else {
        console.log('[OrderService] ‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã –≤ Supabase');
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllApplicants(): Promise<void> {
    try {
      const { error } = await supabase.from('applicants').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ Supabase:', error);
      } else {
        console.log('[OrderService] ‚úÖ –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã –≤ Supabase');
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
   */
  async completeOrder(orderId: string): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('customer_id, status')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderError);
        return false;
      }

      if (orderData.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return false;
      }

      if (orderData.status !== 'in_progress') {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'completed' –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', updateError);
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ 'completed'
      const { error: applicantsError } = await supabase
        .from('applicants')
        .update({ status: 'completed' })
        .eq('order_id', orderId)
        .eq('status', 'accepted');

      if (applicantsError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', applicantsError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
      this.sendOrderCompletedNotifications(orderId).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      });

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async getAcceptedWorkersForOrder(orderId: string): Promise<Applicant[]> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          worker:worker_id (
            first_name,
            last_name,
            phone,
            profile_image
          )
        `)
        .eq('order_id', orderId)
        .eq('status', 'accepted');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
        return [];
      }

      if (!data) return [];

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const workersWithRealData = await Promise.all(
        data.map(async (item: any) => {
          const [workerRating, completedJobsCount] = await Promise.all([
            this.getWorkerRating(item.worker_id),
            this.getWorkerCompletedJobsCount(item.worker_id)
          ]);

          return {
            id: item.id,
            orderId: item.order_id,
            workerId: item.worker_id,
            workerName: `${item.worker.first_name} ${item.worker.last_name}`,
            workerPhone: item.worker.phone,
            rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
            avatar: item.worker.profile_image,
            message: item.message,
            proposedPrice: item.proposed_price,
            appliedAt: item.applied_at,
            status: item.status as 'pending' | 'accepted' | 'rejected' | 'completed'
          };
        })
      );

      return workersWithRealData;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
   */
  async createReview(request: CreateReviewRequest): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–∫–∞–∑—á–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('customer_id')
        .eq('id', request.orderId)
        .single();

      if (orderError || !orderData || orderData.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
      const { data: existingReview } = await supabase
        .from('reviews')
        .select('id')
        .eq('order_id', request.orderId)
        .eq('worker_id', request.workerId)
        .single();

      if (existingReview) {
        console.error('[OrderService] –û—Ç–∑—ã–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
      const reviewData = {
        order_id: request.orderId,
        customer_id: authState.user.id, // Supabase –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ TEXT –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        worker_id: request.workerId,
        rating: request.rating,
        comment: request.comment || null,
        created_at: new Date().toISOString()
      };

      console.log('[OrderService] üìù –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        ...reviewData,
        comment: reviewData.comment ? `"${reviewData.comment}"` : 'NULL (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)'
      });

      const { data, error } = await supabase
        .from('reviews')
        .insert(reviewData)
        .select();

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', {
          error,
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        return false;
      }

      console.log('[OrderService] ‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω –≤ Supabase:', {
        id: data[0]?.id,
        orderId: data[0]?.order_id,
        workerId: data[0]?.worker_id,
        rating: data[0]?.rating,
        comment: data[0]?.comment ? `"${data[0].comment}"` : 'NULL (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)',
        createdAt: data[0]?.created_at
      });

      console.log('[OrderService] ‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ
   */
  async getWorkerReviews(workerId: string): Promise<Review[]> {
    try {
      const { data, error } = await supabase
        .from('reviews')
        .select(`
          *,
          order:order_id (title),
          customer:customer_id (first_name, last_name)
        `)
        .eq('worker_id', workerId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        return [];
      }

      if (!data) return [];

      return data.map((item: any) => ({
        id: item.id,
        orderId: item.order_id,
        customerId: item.customer_id,
        workerId: item.worker_id,
        rating: item.rating,
        comment: item.comment,
        createdAt: item.created_at
      }));
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   */
  async getWorkerRating(workerId: string): Promise<WorkerRating | null> {
    try {
      const { data, error } = await supabase
        .from('reviews')
        .select('rating')
        .eq('worker_id', workerId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        return null;
      }

      if (!data || data.length === 0) {
        return {
          workerId,
          averageRating: 0,
          totalReviews: 0
        };
      }

      const totalReviews = data.length;
      const sumRating = data.reduce((sum: number, review: any) => sum + review.rating, 0);
      const averageRating = Math.round((sumRating / totalReviews) * 10) / 10; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞

      return {
        workerId,
        averageRating,
        totalReviews
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async getWorkerCompletedJobsCount(workerId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select('id')
        .eq('worker_id', workerId)
        .eq('status', 'completed');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:', error);
        return 0;
      }

      return data?.length || 0;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  async getWorkerEarnings(workerId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          proposed_price,
          order:order_id (budget)
        `)
        .eq('worker_id', workerId)
        .in('status', ['accepted', 'completed']); // –°—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
        return 0;
      }

      if (!data) return 0;

      return data.reduce((total: number, applicant: any) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞
        const price = applicant.proposed_price || applicant.order?.budget || 0;
        return total + price;
      }, 0);
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
      return 0;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  private async sendNewOrderNotifications(order: Order): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', order.id);
      console.log('[OrderService] üïí –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:', new Date().toISOString());

      // üîß –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      if (this.notifiedOrders.has(order.id)) {
        console.log('[OrderService] ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞', order.id, '—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π
      this.notifiedOrders.add(order.id);
      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑', order.id, '–¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: workers, error } = await supabase
        .from('users')
        .select('id')
        .eq('role', 'worker');

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
        return;
      }

      if (!workers || workers.length === 0) {
        console.log('[OrderService] ‚ö†Ô∏è –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      const workerIds = workers.map(worker => worker.id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const notificationParams = {
        title: order.title,
        budget: order.budget,
        location: order.location
      };

      console.log(`[OrderService] üë• –ù–∞–π–¥–µ–Ω–æ ${workerIds.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:`, workerIds);

      const translatedNotifications = await getTranslatedNotificationsForUsers(
        workerIds,
        'new_order',
        notificationParams
      );

      console.log(`[OrderService] üìù –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translatedNotifications.size}`);
      console.log('[OrderService] üóÇÔ∏è –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
      translatedNotifications.forEach((notification, userId) => {
        console.log(`  - ${userId}: "${notification.title}" (${notification.body.substring(0, 50)}...)`);
      });

      const data = {
        orderId: order.id,
        orderTitle: order.title,
        orderBudget: order.budget,
        orderLocation: order.location,
        type: 'new_order'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      let sentCount = 0;
      console.log('[OrderService] üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      for (const workerId of workerIds) {
        console.log(`[OrderService] üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${workerId}`);
        const notification = translatedNotifications.get(workerId);
        if (notification) {
          console.log(`[OrderService] üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${workerId}: "${notification.title}"`);
          const sent = await notificationService.sendNotificationToUser(
            workerId,
            notification.title,
            notification.body,
            data,
            'new_order'
          );
          if (sent) {
            sentCount++;
            console.log(`[OrderService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${workerId}`);
          } else {
            console.log(`[OrderService] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${workerId}`);
          }
        } else {
          console.log(`[OrderService] ‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${workerId}`);
        }
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫—ç—à–∞ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
      this.notifiedOrders.delete(order.id);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
   */
  public clearNotificationCache(): void {
    console.log('[OrderService] üßπ –û—á–∏—â–∞–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
    this.notifiedOrders.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  public getNotifiedOrders(): string[] {
    return Array.from(this.notifiedOrders);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
   */
  private async sendNewApplicationNotification(orderId: string, worker: any): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, customer_id')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      const notificationParams = {
        workerName: `${worker.firstName} ${worker.lastName}`,
        orderTitle: orderData.title
      };

      const notification = await getTranslatedNotification(
        orderData.customer_id,
        'new_application',
        notificationParams
      );

      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        workerId: worker.id,
        workerName: `${worker.firstName} ${worker.lastName}`,
        type: 'new_application'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
      const sent = await notificationService.sendNotificationToUser(
        orderData.customer_id,
        notification.title,
        notification.body,
        data,
        'new_application'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –≤—ã–±–æ—Ä–µ
   */
  private async sendWorkerSelectedNotification(applicantId: string): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∞, –∑–∞–∫–∞–∑–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const { data: applicantData, error: applicantError } = await supabase
        .from('applicants')
        .select(`
          id,
          worker_id,
          order_id,
          orders!inner(id, title, budget, location, customer_id)
        `)
        .eq('id', applicantId)
        .single();

      if (applicantError || !applicantData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–∞:', applicantError);
        return;
      }

      const order = applicantData.orders;

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const notificationParams = {
        orderTitle: order.title,
        budget: order.budget
      };

      const notification = await getTranslatedNotification(
        applicantData.worker_id,
        'worker_selected',
        notificationParams
      );

      const data = {
        orderId: order.id,
        orderTitle: order.title,
        orderBudget: order.budget,
        orderLocation: order.location,
        applicantId: applicantData.id,
        type: 'worker_selected'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
      const sent = await notificationService.sendNotificationToUser(
        applicantData.worker_id,
        notification.title,
        notification.body,
        data,
        'order_update'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∑–∞ –¥–µ–Ω—å –¥–æ —Ä–∞–±–æ—Ç—ã
   */
  private async scheduleWorkReminder(workerId: string, orderId: string, serviceDate: string): Promise<void> {
    try {
      console.log('[OrderService] üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', workerId);
      console.log('[OrderService] üìÖ –ó–∞–∫–∞–∑:', orderId, '–î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã:', serviceDate);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, location')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', orderError);
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ –¥–µ–Ω—å –¥–æ —Ä–∞–±–æ—Ç—ã)
      const workDate = new Date(serviceDate);
      const reminderDate = new Date(workDate);
      reminderDate.setDate(workDate.getDate() - 1);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 18:00 (6 PM) –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
      reminderDate.setHours(18, 0, 0, 0);

      console.log('[OrderService] ‚è∞ –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', reminderDate.toISOString());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
      const now = new Date();
      if (reminderDate <= now) {
        console.log('[OrderService] ‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { error: insertError } = await supabase
        .from('scheduled_reminders')
        .insert({
          user_id: workerId,
          order_id: orderId,
          reminder_date: reminderDate.toISOString(),
          reminder_type: 'work_reminder',
          is_sent: false,
          created_at: new Date().toISOString()
        });

      if (insertError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', insertError);
        return;
      }

      console.log('[OrderService] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:', reminderDate.toISOString());

      // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      const timeDiff = reminderDate.getTime() - now.getTime();
      if (timeDiff <= 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        console.log('[OrderService] üöÄ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É');
        await this.sendWorkReminder(workerId, orderData);

        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await supabase
          .from('scheduled_reminders')
          .update({ is_sent: true, sent_at: new Date().toISOString() })
          .eq('user_id', workerId)
          .eq('order_id', orderId)
          .eq('reminder_type', 'work_reminder');
      }

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Ä–∞–±–æ—Ç–µ
   */
  private async sendWorkReminder(workerId: string, orderData: any): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:', workerId);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const notificationParams = {
        orderTitle: orderData.title,
        location: orderData.location
      };

      const notification = await getTranslatedNotification(
        workerId,
        'work_reminder',
        notificationParams
      );

      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        orderLocation: orderData.location,
        type: 'work_reminder'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
      const sent = await notificationService.sendNotificationToUser(
        workerId,
        notification.title,
        notification.body,
        data,
        'work_reminder'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ:', error);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
   */
  private async scheduleCompleteWorkReminder(customerId: string, orderId: string, serviceDate: string): Promise<void> {
    try {
      console.log('[OrderService] üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:', customerId);
      console.log('[OrderService] üìÖ –ó–∞–∫–∞–∑:', orderId, '–î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã:', serviceDate);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, location')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', orderError);
        return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ serviceDate
      const workDate = new Date(serviceDate);
      const reminderDate = new Date(workDate);
      reminderDate.setDate(workDate.getDate() + 1); // –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 19:00 (7 PM)
      reminderDate.setHours(19, 0, 0, 0);

      console.log('[OrderService] ‚è∞ –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', reminderDate.toISOString());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
      const now = new Date();
      if (reminderDate <= now) {
        console.log('[OrderService] ‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { error: insertError } = await supabase
        .from('scheduled_reminders')
        .insert({
          user_id: customerId, // ID –∑–∞–∫–∞–∑—á–∏–∫–∞
          order_id: orderId,
          reminder_date: reminderDate.toISOString(),
          reminder_type: 'complete_work_reminder',
          is_sent: false,
          created_at: new Date().toISOString()
        });

      if (insertError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', insertError);
        return;
      }

      console.log('[OrderService] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:', reminderDate.toISOString());

      // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      const timeDiff = reminderDate.getTime() - now.getTime();
      if (timeDiff <= 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        console.log('[OrderService] üöÄ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É');
        await this.sendCompleteWorkReminder(customerId, orderData);

        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await supabase
          .from('scheduled_reminders')
          .update({ is_sent: true, sent_at: new Date().toISOString() })
          .eq('user_id', customerId)
          .eq('order_id', orderId)
          .eq('reminder_type', 'complete_work_reminder');
      }

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
   */
  private async sendCompleteWorkReminder(customerId: string, orderData: any): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫—É:', customerId);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      const notificationParams = {
        orderTitle: orderData.title
      };

      const notification = await getTranslatedNotification(
        customerId,
        'complete_work_reminder',
        notificationParams
      );

      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        type: 'complete_work_reminder'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
      const sent = await notificationService.sendNotificationToUser(
        customerId,
        notification.title,
        notification.body,
        data,
        'complete_work_reminder'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  private async sendOrderCompletedNotifications(orderId: string): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, budget')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const { data: acceptedApplicants, error: applicantsError } = await supabase
        .from('applicants')
        .select('worker_id')
        .eq('order_id', orderId)
        .eq('status', 'completed');

      if (applicantsError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', applicantsError);
        return;
      }

      if (!acceptedApplicants || acceptedApplicants.length === 0) {
        console.log('[OrderService] ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      const workerIds = acceptedApplicants.map(applicant => applicant.worker_id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const notificationParams = {
        orderTitle: orderData.title
      };

      const translatedNotifications = await getTranslatedNotificationsForUsers(
        workerIds,
        'order_completed',
        notificationParams
      );

      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        orderBudget: orderData.budget,
        type: 'order_completed'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      let sentCount = 0;
      for (const workerId of workerIds) {
        const notification = translatedNotifications.get(workerId);
        if (notification) {
          const sent = await notificationService.sendNotificationToUser(
            workerId,
            notification.title,
            notification.body,
            data,
            'order_completed'
          );
          if (sent) sentCount++;
        }
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  private async sendOrderUpdatedNotifications(orderId: string): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, budget, location')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑
      const { data: applicants, error: applicantsError } = await supabase
        .from('applicants')
        .select('worker_id')
        .eq('order_id', orderId)
        .in('status', ['pending', 'accepted']);

      if (applicantsError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤:', applicantsError);
        return;
      }

      if (!applicants || applicants.length === 0) {
        console.log('[OrderService] ‚ö†Ô∏è –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        return;
      }

      const workerIds = applicants.map(applicant => applicant.worker_id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const notificationParams = {
        orderTitle: orderData.title
      };

      const translatedNotifications = await getTranslatedNotificationsForUsers(
        workerIds,
        'order_updated',
        notificationParams
      );

      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        orderBudget: orderData.budget,
        orderLocation: orderData.location,
        type: 'order_updated'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      let sentCount = 0;
      for (const workerId of workerIds) {
        const notification = translatedNotifications.get(workerId);
        if (notification) {
          const sent = await notificationService.sendNotificationToUser(
            workerId,
            notification.title,
            notification.body,
            data,
            'order_update'
          );
          if (sent) sentCount++;
        }
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
   */
  private async sendOrderCancelledNotifications(orderId: string, orderTitle: string, applicants: any[]): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞...');

      const workerIds = applicants.map(applicant => applicant.worker_id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const notificationParams = {
        orderTitle: orderTitle
      };

      const translatedNotifications = await getTranslatedNotificationsForUsers(
        workerIds,
        'order_cancelled',
        notificationParams
      );

      const data = {
        orderId: orderId,
        orderTitle: orderTitle,
        type: 'order_cancelled'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      let sentCount = 0;
      for (const workerId of workerIds) {
        const notification = translatedNotifications.get(workerId);
        if (notification) {
          const sent = await notificationService.sendNotificationToUser(
            workerId,
            notification.title,
            notification.body,
            data,
            'order_cancelled'
          );
          if (sent) sentCount++;
        }
      }

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –æ—Ç–∑—ã–≤–∞–º–∏
   */
  async getWorkerProfile(workerId: string): Promise<WorkerProfile | null> {
    try {
      console.log(`[OrderService] üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId}...`);
      console.log(`[OrderService] üîç –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è worker_id: ${workerId}`);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', workerId)
        .eq('role', 'worker')
        .single();

      if (userError || !userData) {
        console.error('[OrderService] ‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
        return null;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
      const workerRating = await this.getWorkerRating(workerId);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
      const completedJobs = await this.getWorkerCompletedJobsCount(workerId);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const { data: reviewsData, error: reviewsError } = await supabase
        .from('reviews')
        .select('*')
        .eq('worker_id', workerId)
        .order('created_at', { ascending: false });

      let reviews: Review[] = [];
      if (!reviewsError && reviewsData && reviewsData.length > 0) {
        console.log(`[OrderService] üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${reviewsData.length} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Supabase`);

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const customerIds = [...new Set(reviewsData.map(review => review.customer_id))];
        const orderIds = [...new Set(reviewsData.map(review => review.order_id))];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö
        let customersMap = new Map();
        if (customerIds.length > 0) {
          const { data: customers } = await supabase
            .from('users')
            .select('id, first_name, last_name')
            .in('id', customerIds);

          if (customers) {
            customers.forEach(customer => {
              customersMap.set(customer.id, `${customer.first_name} ${customer.last_name}`);
            });
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö
        let ordersMap = new Map();
        if (orderIds.length > 0) {
          const { data: orders } = await supabase
            .from('orders')
            .select('id, title')
            .in('id', orderIds);

          if (orders) {
            orders.forEach(order => {
              ordersMap.set(order.id, order.title);
            });
          }
        }

        reviews = reviewsData.map((item: any) => ({
          id: item.id,
          orderId: item.order_id,
          customerId: item.customer_id,
          workerId: item.worker_id,
          customerName: customersMap.get(item.customer_id) || '–ó–∞–∫–∞–∑—á–∏–∫',
          rating: item.rating,
          comment: item.comment,
          createdAt: item.created_at,
          orderTitle: ordersMap.get(item.order_id)
        }));

        console.log(`[OrderService] üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:`,
          reviews.map(review => ({
            id: review.id,
            rating: review.rating,
            comment: review.comment ? `"${review.comment}"` : 'NULL (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)',
            customerName: review.customerName,
            orderTitle: review.orderTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
          }))
        );
      } else {
        console.log(`[OrderService] ‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ${workerId}`,
          reviewsError ? `–û—à–∏–±–∫–∞: ${reviewsError.message}` : '–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
      }

      const workerProfile: WorkerProfile = {
        id: userData.id,
        firstName: userData.first_name,
        lastName: userData.last_name,
        phone: userData.phone,
        profileImage: userData.profile_image,
        averageRating: workerRating?.averageRating || 0,
        totalReviews: workerRating?.totalReviews || 0,
        completedJobs,
        joinedAt: userData.created_at,
        reviews
      };

      console.log(`[OrderService] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω: ${workerProfile.firstName} ${workerProfile.lastName}`);
      console.log(`[OrderService] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${completedJobs} —Ä–∞–±–æ—Ç, ${workerProfile.totalReviews} –æ—Ç–∑—ã–≤–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ ${workerProfile.averageRating}`);

      return workerProfile;
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
   */
  async checkAndSendScheduledReminders(): Promise<void> {
    try {
      console.log('[OrderService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
      if (!supabase) {
        console.error('[OrderService] ‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã scheduled_reminders
      const { error: tableCheckError } = await supabase
        .from('scheduled_reminders')
        .select('id')
        .limit(1);

      if (tableCheckError?.message?.includes('relation "scheduled_reminders" does not exist')) {
        console.warn('[OrderService] ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ scheduled_reminders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
        console.warn('[OrderService] üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: osonish-admin/SQL/scheduled_reminders_table.sql');
        return;
      }

      const now = new Date();
      const checkTime = new Date(now.getTime() + 15 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç
      const { data: reminders, error } = await supabase
        .from('scheduled_reminders')
        .select(`
          id,
          user_id,
          order_id,
          reminder_date,
          reminder_type
        `)
        .eq('is_sent', false)
        .in('reminder_type', ['work_reminder', 'complete_work_reminder'])
        .lte('reminder_date', checkTime.toISOString())
        .gte('reminder_date', now.toISOString());

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
        if (error.message?.includes('relation "scheduled_reminders" does not exist')) {
          console.error('[OrderService] üí° –¢–∞–±–ª–∏—Ü–∞ scheduled_reminders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          console.error('[OrderService] üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: osonish-admin/SQL/create_reminders_table_simple.sql');
        } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
          console.error('[OrderService] üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
        } else if (error.message?.includes('JWT') || error.message?.includes('session')) {
          console.error('[OrderService] üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π Supabase');
        } else if (error.message?.includes('policy')) {
          console.error('[OrderService] üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã scheduled_reminders');
        }

        return;
      }

      if (!reminders || reminders.length === 0) {
        console.log('[OrderService] ‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return;
      }

      console.log(`[OrderService] üìã –ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      for (const reminder of reminders) {
        try {
          const recipientType = reminder.reminder_type === 'work_reminder' ? '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é' : '–∑–∞–∫–∞–∑—á–∏–∫—É';
          console.log(`[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id} ${recipientType} ${reminder.user_id}`);

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
          let orderData;
          if (reminder.order_id.startsWith('test-order-')) {
            // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            orderData = {
              id: reminder.order_id,
              title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
              location: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –≥. –¢–∞—à–∫–µ–Ω—Ç'
            };
          } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            const { data, error: orderError } = await supabase
              .from('orders')
              .select('id, title, location')
              .eq('id', reminder.order_id)
              .single();

            if (orderError || !data) {
              console.error(`[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ ${reminder.order_id}:`, orderError);
              continue;
            }
            orderData = data;
          }

          // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
          if (reminder.reminder_type === 'work_reminder') {
            await this.sendWorkReminder(reminder.user_id, orderData);
          } else if (reminder.reminder_type === 'complete_work_reminder') {
            await this.sendCompleteWorkReminder(reminder.user_id, orderData);
          }

          // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
          const { error: updateError } = await supabase
            .from('scheduled_reminders')
            .update({
              is_sent: true,
              sent_at: new Date().toISOString()
            })
            .eq('id', reminder.id);

          if (updateError) {
            console.error(`[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.id}:`, updateError);
          } else {
            console.log(`[OrderService] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ`);
          }

        } catch (reminderError) {
          console.error(`[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.id}:`, reminderError);
        }
      }

      console.log('[OrderService] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  private startReminderChecker(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    const checkInterval = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

    setInterval(() => {
      this.checkAndSendScheduledReminders().catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      });
    }, checkInterval);

    // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => {
      this.checkAndSendScheduledReminders().catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      });
    }, 60 * 1000); // 1 –º–∏–Ω—É—Ç–∞

    console.log(`[OrderService] ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${checkInterval / 60000} –º–∏–Ω—É—Ç)`);
  }


  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  async testWorkReminder(workerId: string, orderTitle: string = '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑', location: string = '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å'): Promise<boolean> {
    try {
      console.log('[OrderService] üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ...');

      const testOrderData = {
        id: 'test-order-id',
        title: orderTitle,
        location: location
      };

      await this.sendWorkReminder(workerId, testOrderData);

      console.log('[OrderService] ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ:', error);
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  async testCompleteWorkReminder(customerId: string, orderTitle: string = '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'): Promise<boolean> {
    try {
      console.log('[OrderService] üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã...');

      const testOrderData = {
        id: 'test-order-id',
        title: orderTitle
      };

      await this.sendCompleteWorkReminder(customerId, testOrderData);

      console.log('[OrderService] ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
      return false;
    }
  }

  // ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–í–û–ù–ö–û–í ====================

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∑–≤–æ–Ω–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   */
  async logCallAttempt(callData: {
    orderId: string;
    callerId: string;
    receiverId: string;
    callerType: 'customer' | 'worker';
    receiverType: 'customer' | 'worker';
    phoneNumber: string;
    callSource: 'order_details' | 'applicants_list' | 'job_details';
  }): Promise<boolean> {
    try {
      console.log('[OrderService] üîç logCallAttempt –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏:', callData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
      if (!supabase) {
        console.error('[OrderService] ‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return false;
      }

      console.log('[OrderService] üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ:', callData.orderId);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('status, created_at')
        .eq('id', callData.orderId)
        .single();

      if (orderError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', orderError);
        return false;
      }

      console.log('[OrderService] üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–ª—É—á–µ–Ω–∞:', orderData);

      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      const orderCreatedAt = new Date(orderData.created_at);
      const now = new Date();
      const daysSinceOrderCreated = Math.floor((now.getTime() - orderCreatedAt.getTime()) / (1000 * 60 * 60 * 24));

      const logEntry = {
        order_id: callData.orderId,
        caller_id: callData.callerId,
        receiver_id: callData.receiverId,
        caller_type: callData.callerType,
        receiver_type: callData.receiverType,
        phone_number: callData.phoneNumber,
        call_source: callData.callSource,
        order_status: orderData.status,
        days_since_order_created: daysSinceOrderCreated,
        call_initiated_at: new Date().toISOString()
      };

      console.log('[OrderService] üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ call_logs:', logEntry);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ call_logs
      const { error: insertError } = await supabase
        .from('call_logs')
        .insert(logEntry);

      if (insertError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ call_logs:', insertError);
        return false;
      }

      console.log('[OrderService] ‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
      return true;

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É
   */
  async getCallStatsByOrder(orderId: string): Promise<{
    totalCalls: number;
    customerCalls: number;
    workerCalls: number;
    callsByDay: Array<{ date: string; count: number }>;
  } | null> {
    try {
      console.log('[OrderService] üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);

      const { data: callLogs, error } = await supabase
        .from('call_logs')
        .select('*')
        .eq('order_id', orderId)
        .order('call_initiated_at', { ascending: true });

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
        return null;
      }

      const totalCalls = callLogs.length;
      const customerCalls = callLogs.filter(log => log.caller_type === 'customer').length;
      const workerCalls = callLogs.filter(log => log.caller_type === 'worker').length;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–≤–æ–Ω–∫–∏ –ø–æ –¥–Ω—è–º
      const callsByDay = callLogs.reduce((acc: { [key: string]: number }, log) => {
        const date = new Date(log.call_initiated_at).toISOString().split('T')[0];
        acc[date] = (acc[date] || 0) + 1;
        return acc;
      }, {});

      const callsByDayArray = Object.entries(callsByDay).map(([date, count]) => ({
        date,
        count
      }));

      return {
        totalCalls,
        customerCalls,
        workerCalls,
        callsByDay: callsByDayArray
      };

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async getCallAnalytics(dateFrom?: string, dateTo?: string): Promise<{
    totalCalls: number;
    callsByType: { customer: number; worker: number };
    callsBySource: { [key: string]: number };
    callsByOrderStatus: { [key: string]: number };
    avgCallsPerOrder: number;
    peakHours: Array<{ hour: number; count: number }>;
  } | null> {
    try {
      console.log('[OrderService] üìà –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–≤–æ–Ω–∫–æ–≤');

      let query = supabase
        .from('call_logs')
        .select('*');

      if (dateFrom) {
        query = query.gte('call_initiated_at', dateFrom);
      }
      if (dateTo) {
        query = query.lte('call_initiated_at', dateTo);
      }

      const { data: callLogs, error } = await query;

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
        return null;
      }

      const totalCalls = callLogs.length;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É –∑–≤–æ–Ω—è—â–µ–≥–æ
      const callsByType = {
        customer: callLogs.filter(log => log.caller_type === 'customer').length,
        worker: callLogs.filter(log => log.caller_type === 'worker').length
      };

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∑–≤–æ–Ω–∫–∞
      const callsBySource = callLogs.reduce((acc: { [key: string]: number }, log) => {
        acc[log.call_source] = (acc[log.call_source] || 0) + 1;
        return acc;
      }, {});

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞
      const callsByOrderStatus = callLogs.reduce((acc: { [key: string]: number }, log) => {
        acc[log.order_status] = (acc[log.order_status] || 0) + 1;
        return acc;
      }, {});

      // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑
      const uniqueOrders = new Set(callLogs.map(log => log.order_id));
      const avgCallsPerOrder = uniqueOrders.size > 0 ? totalCalls / uniqueOrders.size : 0;

      // –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∑–≤–æ–Ω–∫–æ–≤
      const callsByHour = callLogs.reduce((acc: { [key: number]: number }, log) => {
        const hour = new Date(log.call_initiated_at).getHours();
        acc[hour] = (acc[hour] || 0) + 1;
        return acc;
      }, {});

      const peakHours = Object.entries(callsByHour)
        .map(([hour, count]) => ({ hour: parseInt(hour), count }))
        .sort((a, b) => b.count - a.count);

      return {
        totalCalls,
        callsByType,
        callsBySource,
        callsByOrderStatus,
        avgCallsPerOrder: Math.round(avgCallsPerOrder * 100) / 100,
        peakHours
      };

    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const orderService = OrderService.getInstance();