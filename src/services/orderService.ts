import { Order, CreateOrderRequest, CreateOrderResponse, Applicant, CreateApplicantRequest, WorkerApplication, Review, CreateReviewRequest, WorkerRating } from '../types';
import { authService } from './authService';
import { notificationService } from './notificationService';
import { supabase, Database } from './supabaseClient';

export class OrderService {
  private static instance: OrderService;

  static getInstance(): OrderService {
    if (!OrderService.instance) {
      OrderService.instance = new OrderService();
    }
    return OrderService.instance;
  }

  constructor() {
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  private async init(): Promise<void> {
    if (!supabase) {
      console.error('[OrderService] ‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
      const { error } = await supabase.from('orders').select('count').limit(1);
      if (error) {
        console.error('[OrderService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      console.log('[OrderService] ‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('[OrderService] ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  async createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        };
      }

      const orderId = this.generateOrderId();
      const currentTime = new Date().toISOString();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Supabase
      const { data, error } = await supabase
        .from('orders')
        .insert({
          id: orderId,
          title: request.title,
          description: request.description,
          category: request.category,
          location: request.location,
          latitude: request.latitude || null,
          longitude: request.longitude || null,
          budget: request.budget,
          workers_needed: request.workersNeeded,
          service_date: request.serviceDate,
          photos: request.photos || [],
          customer_id: authState.user.id,
          status: 'new',
          applicants_count: 0,
          created_at: currentTime,
          updated_at: currentTime
        })
        .select()
        .single();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Supabase:', error);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'
        };
      }

      const newOrder: Order = {
        id: data.id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        latitude: data.latitude || undefined,
        longitude: data.longitude || undefined,
        budget: data.budget,
        workersNeeded: data.workers_needed,
        serviceDate: data.service_date,
        photos: data.photos || [],
        status: data.status as 'new' | 'in_progress' | 'completed' | 'cancelled',
        customerId: data.customer_id,
        applicantsCount: data.applicants_count,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', newOrder.title);
      console.log('[OrderService] üì∑ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–∫–∞–∑–µ:', newOrder.photos?.length || 0);
      if (newOrder.photos && newOrder.photos.length > 0) {
        console.log('[OrderService] üìÑ URL-—ã –º–µ–¥–∏–∞ –≤ –∑–∞–∫–∞–∑–µ:');
        newOrder.photos.forEach((url, index) => {
          console.log(`  ${index + 1}. ${url}`);
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
      this.sendNewOrderNotifications(newOrder).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', error);
      });

      return {
        success: true,
        data: newOrder
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase
   */
  async getAllOrders(): Promise<Order[]> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
   */
  async getCustomerOrders(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('customer_id', authState.user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async getNewOrdersForWorkers(): Promise<Order[]> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('status', 'new')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫)
   */
  async getAvailableOrdersForWorker(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [allNewOrders, userApplications] = await Promise.all([
        this.getNewOrdersForWorkers(),
        this.getUserApplications()
      ]);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫–ª–∏–∫
      const availableOrders = allNewOrders.filter(order =>
        !userApplications.has(order.id)
      );

      console.log(`[OrderService] –ò–∑ ${allNewOrders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ ${availableOrders.length} (–∏—Å–∫–ª—é—á–µ–Ω–æ ${userApplications.size} —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏)`);
      return availableOrders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–∫–∞–∑—á–∏–∫–∞)
   * –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫—Ä–æ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
   */
  async getUserNewOrders(): Promise<Order[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('customer_id', authState.user.id)
        .neq('status', 'completed')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase:', error);
        return [];
      }

      const orders: Order[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        category: item.category,
        location: item.location,
        latitude: item.latitude || undefined,
        longitude: item.longitude || undefined,
        budget: item.budget,
        workersNeeded: item.workers_needed,
        serviceDate: item.service_date,
        photos: item.photos || [],
        status: item.status as 'new' | 'response_received' | 'in_progress' | 'completed' | 'cancelled',
        customerId: item.customer_id,
        applicantsCount: item.applicants_count,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      return orders;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
   */
  async getOrderById(orderId: string): Promise<Order | null> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (error || !data) {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      return {
        id: data.id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        latitude: data.latitude || undefined,
        longitude: data.longitude || undefined,
        budget: data.budget,
        workersNeeded: data.workers_needed,
        serviceDate: data.service_date,
        photos: data.photos || [],
        status: data.status as 'new' | 'in_progress' | 'completed' | 'cancelled',
        customerId: data.customer_id,
        applicantsCount: data.applicants_count,
        createdAt: data.created_at,
        updatedAt: data.updated_at
      };
    } catch (error) {
      console.error(`[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async updateOrderStatus(orderId: string, status: Order['status']): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('orders')
        .update({
          status,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        return false;
      }

      console.log(`[OrderService] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
   */
  async createApplicant(request: CreateApplicantRequest): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const applicantId = this.generateApplicantId();
      const currentTime = new Date().toISOString();

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ (—Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç)
      const [workerRating, completedJobsCount] = await Promise.all([
        this.getWorkerRating(authState.user.id),
        this.getWorkerCompletedJobsCount(authState.user.id)
      ]);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ –≤ Supabase
      const { error } = await supabase
        .from('applicants')
        .insert({
          id: applicantId,
          order_id: request.orderId,
          worker_id: authState.user.id,
          worker_name: `${authState.user.firstName} ${authState.user.lastName}`,
          worker_phone: authState.user.phone,
          rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ null
          completed_jobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
          message: request.message || '',
          proposed_price: request.proposedPrice,
          applied_at: currentTime,
          status: 'pending',
          created_at: currentTime,
          updated_at: currentTime
        });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –≤ Supabase:', error);
        return false;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
      await this.incrementApplicantsCount(request.orderId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞
      const applicantsCount = await this.getApplicantsCount(request.orderId);
      if (applicantsCount === 1) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'response_received'
        await this.updateOrderStatus(request.orderId, 'response_received');
        console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${request.orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'response_received' - –ø–æ–ª—É—á–µ–Ω –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
      this.sendNewApplicationNotification(request.orderId, authState.user).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ:', error);
      });

      console.log(`[OrderService] ‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${request.orderId}`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑
   */
  async hasUserAppliedToOrder(orderId: string): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return false;
      }

      const { data, error } = await supabase
        .from('applicants')
        .select('id')
        .eq('order_id', orderId)
        .eq('worker_id', authState.user.id)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 - no rows found
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
        return false;
      }

      return !!data;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserApplications(): Promise<Set<string>> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        return new Set();
      }

      const { data, error } = await supabase
        .from('applicants')
        .select('order_id')
        .eq('worker_id', authState.user.id);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return new Set();
      }

      return new Set(data?.map((item: any) => item.order_id) || []);
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return new Set();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
   */
  async getWorkerApplications(): Promise<WorkerApplication[]> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          orders!inner (
            id,
            title,
            description,
            category,
            location,
            latitude,
            longitude,
            budget,
            service_date,
            status,
            customer_id
          )
        `)
        .eq('worker_id', authState.user.id)
        .order('applied_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ Supabase:', error);
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
      const customerIds = [...new Set(data.map((item: any) => item.orders.customer_id))];

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö
      const { data: customers, error: customersError } = await supabase
        .from('users')
        .select('id, first_name, last_name, phone')
        .in('id', customerIds);

      if (customersError) {
        console.warn('[OrderService] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö:', customersError);
      }

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const customersMap = new Map();
      customers?.forEach((customer: any) => {
        customersMap.set(customer.id, customer);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç
      const [workerRating, completedJobsCount] = await Promise.all([
        this.getWorkerRating(authState.user.id),
        this.getWorkerCompletedJobsCount(authState.user.id)
      ]);

      const applications: WorkerApplication[] = data.map((item: any) => {
        const order = item.orders;
        const customer = customersMap.get(order.customer_id);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        let applicationStatus = item.status;
        if (item.status === 'accepted' && order.status === 'completed') {
          applicationStatus = 'completed';
        }

        return {
          id: item.id,
          orderId: order.id,
          orderTitle: order.title,
          orderCategory: order.category,
          orderDescription: order.description,
          orderLocation: order.location,
          orderLatitude: order.latitude,
          orderLongitude: order.longitude,
          orderBudget: order.budget,
          orderServiceDate: order.service_date,
          orderStatus: order.status,
          customerName: customer ? `${customer.first_name} ${customer.last_name}` : '–ó–∞–∫–∞–∑—á–∏–∫',
          customerPhone: '', // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
          rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
          completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
          message: item.message,
          proposedPrice: item.proposed_price,
          appliedAt: item.applied_at,
          status: applicationStatus
        };
      });

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è`);
      return applications;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async cancelWorkerApplication(applicationId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('applicants')
        .delete()
        .eq('id', applicationId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:', error);
        return false;
      }

      console.log(`[OrderService] ‚úÖ –ó–∞—è–≤–∫–∞ ${applicationId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async getApplicantsForOrder(orderId: string): Promise<Applicant[]> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          worker:worker_id (
            id,
            first_name,
            last_name,
            phone
          )
        `)
        .eq('order_id', orderId)
        .order('applied_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ Supabase:', error);
        return [];
      }

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç
      const applicantsWithRealData = await Promise.all(
        data.map(async (item: any) => {
          const [workerRating, completedJobsCount] = await Promise.all([
            this.getWorkerRating(item.worker_id),
            this.getWorkerCompletedJobsCount(item.worker_id)
          ]);

          const worker = item.worker;
          const workerName = worker ? `${worker.first_name} ${worker.last_name}` : item.worker_name;
          const workerPhone = worker?.phone || item.worker_phone;

          return {
            id: item.id,
            orderId: item.order_id,
            workerId: item.worker_id,
            workerName: workerName,
            workerPhone: workerPhone,
            rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
            message: item.message,
            proposedPrice: item.proposed_price,
            appliedAt: item.applied_at,
            status: item.status as 'pending' | 'accepted' | 'rejected' | 'completed'
          };
        })
      );

      console.log(`[OrderService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${applicantsWithRealData.length} –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
      return applicantsWithRealData;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async checkAndUpdateOrderStatus(orderId: string): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const order = await this.getOrderById(orderId);
      if (!order) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'new' –∏ 'response_received'
      if (order.status !== 'new' && order.status !== 'response_received') {
        console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${order.status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
        return true;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const applicants = await this.getApplicantsForOrder(orderId);
      const acceptedApplicants = applicants.filter(applicant => applicant.status === 'accepted');

      console.log(`[OrderService] –ó–∞–∫–∞–∑ ${orderId}: –ø—Ä–∏–Ω—è—Ç–æ ${acceptedApplicants.length} –∏–∑ ${order.workersNeeded} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);

      // –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'in_progress'
      if (acceptedApplicants.length >= order.workersNeeded) {
        const statusUpdated = await this.updateOrderStatus(orderId, 'in_progress');
        if (statusUpdated) {
          console.log(`[OrderService] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'in_progress' - –Ω–∞–±—Ä–∞–Ω–æ ${acceptedApplicants.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);
          return true;
        } else {
          console.error(`[OrderService] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId}`);
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞
   */
  async updateApplicantStatus(applicantId: string, status: Applicant['status']): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('applicants')
        .update({
          status,
          updated_at: new Date().toISOString()
        })
        .eq('id', applicantId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:', error);
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –µ—Å–ª–∏ –µ–≥–æ –≤—ã–±—Ä–∞–ª–∏
      if (status === 'accepted') {
        this.sendWorkerSelectedNotification(applicantId).catch(error => {
          console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
        });
      }

      console.log(`[OrderService] –°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ ${applicantId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞:', error);
      return false;
    }
  }



  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
   */
  async getOrdersStats(): Promise<{ total: number; new: number; inProgress: number; completed: number; cancelled: number }> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('status');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        return { total: 0, new: 0, inProgress: 0, completed: 0, cancelled: 0 };
      }

      const stats = {
        total: data.length,
        new: data.filter((order: any) => order.status === 'new').length,
        inProgress: data.filter((order: any) => order.status === 'in_progress').length,
        completed: data.filter((order: any) => order.status === 'completed').length,
        cancelled: data.filter((order: any) => order.status === 'cancelled').length
      };

      console.log('[OrderService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', stats);
      return stats;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      return { total: 0, new: 0, inProgress: 0, completed: 0, cancelled: 0 };
    }
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private async incrementApplicantsCount(orderId: string): Promise<void> {
    try {
      const { error } = await supabase.rpc('increment_applicants_count', {
        order_id: orderId
      });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private async getApplicantsCount(orderId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('applicants_count')
        .eq('id', orderId)
        .single();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
        return 0;
      }

      return data?.applicants_count || 0;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
      return 0;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  private generateOrderId(): string {
    return `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
   */
  private generateApplicantId(): string {
    return `applicant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllOrders(): Promise<void> {
    try {
      const { error } = await supabase.from('orders').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ Supabase:', error);
      } else {
        console.log('[OrderService] ‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã –≤ Supabase');
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllApplicants(): Promise<void> {
    try {
      const { error } = await supabase.from('applicants').delete().neq('id', '00000000-0000-0000-0000-000000000000');
      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ Supabase:', error);
      } else {
        console.log('[OrderService] ‚úÖ –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã –≤ Supabase');
      }
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
   */
  async completeOrder(orderId: string): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('customer_id, status')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderError);
        return false;
      }

      if (orderData.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return false;
      }

      if (orderData.status !== 'in_progress') {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'completed' –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', updateError);
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ 'completed'
      const { error: applicantsError } = await supabase
        .from('applicants')
        .update({ status: 'completed' })
        .eq('order_id', orderId)
        .eq('status', 'accepted');

      if (applicantsError) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:', applicantsError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
      this.sendOrderCompletedNotifications(orderId).catch(error => {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      });

      console.log('[OrderService] ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async getAcceptedWorkersForOrder(orderId: string): Promise<Applicant[]> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          *,
          worker:worker_id (
            first_name,
            last_name,
            phone,
            profile_image
          )
        `)
        .eq('order_id', orderId)
        .eq('status', 'accepted');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
        return [];
      }

      if (!data) return [];

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const workersWithRealData = await Promise.all(
        data.map(async (item: any) => {
          const [workerRating, completedJobsCount] = await Promise.all([
            this.getWorkerRating(item.worker_id),
            this.getWorkerCompletedJobsCount(item.worker_id)
          ]);

          return {
            id: item.id,
            orderId: item.order_id,
            workerId: item.worker_id,
            workerName: `${item.worker.first_name} ${item.worker.last_name}`,
            workerPhone: item.worker.phone,
            rating: workerRating?.averageRating || null, // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            completedJobs: completedJobsCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
            avatar: item.worker.profile_image,
            message: item.message,
            proposedPrice: item.proposed_price,
            appliedAt: item.applied_at,
            status: item.status as 'pending' | 'accepted' | 'rejected' | 'completed'
          };
        })
      );

      return workersWithRealData;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
   */
  async createReview(request: CreateReviewRequest): Promise<boolean> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.error('[OrderService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–∫–∞–∑—á–∏–∫ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('customer_id')
        .eq('id', request.orderId)
        .single();

      if (orderError || !orderData || orderData.customer_id !== authState.user.id) {
        console.error('[OrderService] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
      const { data: existingReview } = await supabase
        .from('reviews')
        .select('id')
        .eq('order_id', request.orderId)
        .eq('worker_id', request.workerId)
        .single();

      if (existingReview) {
        console.error('[OrderService] –û—Ç–∑—ã–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
      const reviewData = {
        order_id: request.orderId,
        customer_id: authState.user.id, // Supabase –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ TEXT –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        worker_id: request.workerId,
        rating: request.rating,
        comment: request.comment || null,
        created_at: new Date().toISOString()
      };

      console.log('[OrderService] –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:', reviewData);

      const { data, error } = await supabase
        .from('reviews')
        .insert(reviewData)
        .select();

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', {
          error,
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        return false;
      }

      console.log('[OrderService] ‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω:', data);

      console.log('[OrderService] ‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      return true;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ
   */
  async getWorkerReviews(workerId: string): Promise<Review[]> {
    try {
      const { data, error } = await supabase
        .from('reviews')
        .select(`
          *,
          order:order_id (title),
          customer:customer_id (first_name, last_name)
        `)
        .eq('worker_id', workerId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        return [];
      }

      if (!data) return [];

      return data.map((item: any) => ({
        id: item.id,
        orderId: item.order_id,
        customerId: item.customer_id,
        workerId: item.worker_id,
        rating: item.rating,
        comment: item.comment,
        createdAt: item.created_at
      }));
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   */
  async getWorkerRating(workerId: string): Promise<WorkerRating | null> {
    try {
      const { data, error } = await supabase
        .from('reviews')
        .select('rating')
        .eq('worker_id', workerId);

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        return null;
      }

      if (!data || data.length === 0) {
        return {
          workerId,
          averageRating: 0,
          totalReviews: 0
        };
      }

      const totalReviews = data.length;
      const sumRating = data.reduce((sum: number, review: any) => sum + review.rating, 0);
      const averageRating = Math.round((sumRating / totalReviews) * 10) / 10; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞

      return {
        workerId,
        averageRating,
        totalReviews
      };
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async getWorkerCompletedJobsCount(workerId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select('id')
        .eq('worker_id', workerId)
        .eq('status', 'completed');

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:', error);
        return 0;
      }

      return data?.length || 0;
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  async getWorkerEarnings(workerId: string): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('applicants')
        .select(`
          proposed_price,
          order:order_id (budget)
        `)
        .eq('worker_id', workerId)
        .in('status', ['accepted', 'completed']); // –°—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

      if (error) {
        console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
        return 0;
      }

      if (!data) return 0;

      return data.reduce((total: number, applicant: any) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –±—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑–∞
        const price = applicant.proposed_price || applicant.order?.budget || 0;
        return total + price;
      }, 0);
    } catch (error) {
      console.error('[OrderService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', error);
      return 0;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  private async sendNewOrderNotifications(order: Order): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: workers, error } = await supabase
        .from('users')
        .select('id')
        .eq('role', 'worker');

      if (error) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
        return;
      }

      if (!workers || workers.length === 0) {
        console.log('[OrderService] ‚ö†Ô∏è –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      const workerIds = workers.map(worker => worker.id);
      const title = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!';
      const body = `${order.title} - ${order.budget} —Å–æ–º –≤ ${order.location}`;
      const data = {
        orderId: order.id,
        orderTitle: order.title,
        orderBudget: order.budget,
        orderLocation: order.location,
        type: 'new_order'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const sentCount = await notificationService.sendNotificationToUsers(
        workerIds,
        title,
        body,
        data,
        'new_order'
      );

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
   */
  private async sendNewApplicationNotification(orderId: string, worker: any): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, customer_id')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      const title = '–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑!';
      const body = `${worker.firstName} ${worker.lastName} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ "${orderData.title}"`;
      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        workerId: worker.id,
        workerName: `${worker.firstName} ${worker.lastName}`,
        type: 'new_application'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
      const sent = await notificationService.sendNotificationToUser(
        orderData.customer_id,
        title,
        body,
        data,
        'new_application'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –≤—ã–±–æ—Ä–µ
   */
  private async sendWorkerSelectedNotification(applicantId: string): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∞, –∑–∞–∫–∞–∑–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const { data: applicantData, error: applicantError } = await supabase
        .from('applicants')
        .select(`
          id,
          worker_id,
          order_id,
          orders!inner(id, title, budget, location, customer_id)
        `)
        .eq('id', applicantId)
        .single();

      if (applicantError || !applicantData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–∞:', applicantError);
        return;
      }

      const order = applicantData.orders;
      const title = '–í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!';
      const body = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ "${order.title}" –∑–∞ ${order.budget} —Å–æ–º`;
      const data = {
        orderId: order.id,
        orderTitle: order.title,
        orderBudget: order.budget,
        orderLocation: order.location,
        applicantId: applicantData.id,
        type: 'worker_selected'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
      const sent = await notificationService.sendNotificationToUser(
        applicantData.worker_id,
        title,
        body,
        data,
        'order_update'
      );

      if (sent) {
        console.log('[OrderService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é');
      }
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
    }
  }



  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  private async sendOrderCompletedNotifications(orderId: string): Promise<void> {
    try {
      console.log('[OrderService] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select('id, title, budget')
        .eq('id', orderId)
        .single();

      if (orderError || !orderData) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', orderError);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const { data: acceptedApplicants, error: applicantsError } = await supabase
        .from('applicants')
        .select('worker_id')
        .eq('order_id', orderId)
        .eq('status', 'completed');

      if (applicantsError) {
        console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', applicantsError);
        return;
      }

      if (!acceptedApplicants || acceptedApplicants.length === 0) {
        console.log('[OrderService] ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      const workerIds = acceptedApplicants.map(applicant => applicant.worker_id);
      const title = '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!';
      const body = `–ó–∞–∫–∞–∑ "${orderData.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É!`;
      const data = {
        orderId: orderData.id,
        orderTitle: orderData.title,
        orderBudget: orderData.budget,
        type: 'order_completed'
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const sentCount = await notificationService.sendNotificationToUsers(
        workerIds,
        title,
        body,
        data,
        'order_completed'
      );

      console.log(`[OrderService] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞`);
    } catch (error) {
      console.error('[OrderService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const orderService = OrderService.getInstance();