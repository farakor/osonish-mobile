import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { orderService } from './orderService';

// –ò–º—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
const AUTO_COMPLETE_ORDERS_TASK = 'AUTO_COMPLETE_ORDERS_TASK';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
 */
class BackgroundTaskService {
  private static instance: BackgroundTaskService;
  private isRegistered = false;

  static getInstance(): BackgroundTaskService {
    if (!BackgroundTaskService.instance) {
      BackgroundTaskService.instance = new BackgroundTaskService();
    }
    return BackgroundTaskService.instance;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
   */
  async registerBackgroundFetch(): Promise<void> {
    try {
      if (this.isRegistered) {
        console.log('[BackgroundTask] ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á—É
      TaskManager.defineTask(AUTO_COMPLETE_ORDERS_TASK, async () => {
        try {
          console.log('[BackgroundTask] üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');

          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
          await orderService.autoCompleteOrders();

          console.log('[BackgroundTask] ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          return BackgroundTask.BackgroundTaskResult.NewData;
        } catch (error) {
          console.error('[BackgroundTask] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', error);
          return BackgroundTask.BackgroundTaskResult.Failed;
        }
      });

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
      await BackgroundTask.registerTaskAsync(AUTO_COMPLETE_ORDERS_TASK, {
        minimumInterval: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
        stopOnTerminate: false,
        startOnBoot: true,
      });

      this.isRegistered = true;
      console.log('[BackgroundTask] ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      console.error('[BackgroundTask] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
   */
  async unregisterBackgroundFetch(): Promise<void> {
    try {
      if (!this.isRegistered) {
        console.log('[BackgroundTask] ‚ÑπÔ∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        return;
      }

      await BackgroundTask.unregisterTaskAsync(AUTO_COMPLETE_ORDERS_TASK);
      this.isRegistered = false;
      console.log('[BackgroundTask] ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');

    } catch (error) {
      console.error('[BackgroundTask] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
   */
  async getBackgroundFetchStatus(): Promise<string> {
    try {
      const status = await BackgroundTask.getStatusAsync();
      console.log('[BackgroundTask] üìä –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:', status);
      return status;
    } catch (error) {
      console.error('[BackgroundTask] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      return 'unknown';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
   */
  isTaskRegistered(): boolean {
    return this.isRegistered;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const backgroundTaskService = BackgroundTaskService.getInstance();
