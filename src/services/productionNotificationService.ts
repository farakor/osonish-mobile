import { Platform } from 'react-native';
import Constants from 'expo-constants';

/**
 * Production —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Expo Push Service (Expo —à–ª—ë—Ç –¥–∞–ª—å—à–µ –≤ FCM/APNs)
 */

interface ProductionPushMessage {
  to: string;
  title: string;
  body: string;
  data?: any;
  sound?: string;
  priority?: 'normal' | 'high';
  channelId?: string;
}

class ProductionNotificationService {
  private static instance: ProductionNotificationService;
  static getInstance(): ProductionNotificationService {
    if (!ProductionNotificationService.instance) {
      ProductionNotificationService.instance = new ProductionNotificationService();
    }
    return ProductionNotificationService.instance;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ production —Å–±–æ—Ä–∫–µ
   */
  private isProductionBuild(): boolean {
    return !__DEV__ && (Constants.appOwnership as string) === 'standalone';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç FCM Server Key –∏–∑ EAS credentials
   */
  // –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ FCM/APNs ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Expo API

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FCM (Android)
   */
  private async sendFCMNotification(_message: ProductionPushMessage): Promise<boolean> {
    return this.sendViaExpoAPI(_message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ APNs (iOS)
   */
  private async sendAPNsNotification(_message: ProductionPushMessage): Promise<boolean> {
    return this.sendViaExpoAPI(_message);
  }

  /**
   * Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Expo API
   */
  private async sendViaExpoAPI(message: ProductionPushMessage): Promise<boolean> {
    try {
      console.log('\nüöÄ [ProductionNotificationService] –û–¢–ü–†–ê–í–ö–ê –ß–ï–†–ï–ó EXPO PUSH SERVICE');
      console.log('[ProductionNotificationService] üéØ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', message.to.substring(0, 30) + '...');
      console.log('[ProductionNotificationService] üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', message.title);
      console.log('[ProductionNotificationService] üìÑ –¢–µ–∫—Å—Ç:', message.body);
      console.log('[ProductionNotificationService] üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', Platform.OS);
      console.log('[ProductionNotificationService] üèóÔ∏è –°—Ä–µ–¥–∞:', this.isProductionBuild() ? 'Production' : 'Development/Expo Go');

      const expoMessage = {
        to: message.to,
        sound: message.sound || 'default',
        title: message.title,
        body: message.body,
        data: message.data || {},
        priority: message.priority || 'high',
        channelId: message.channelId || 'default',
      };

      console.log('[ProductionNotificationService] üì¶ –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Expo API:');
      console.log(JSON.stringify(expoMessage, null, 2));

      console.log('[ProductionNotificationService] üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Expo API...');
      const requestStartTime = Date.now();

      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(expoMessage),
      });

      const requestTime = Date.now() - requestStartTime;
      console.log(`[ProductionNotificationService] ‚è±Ô∏è HTTP –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${requestTime}–º—Å`);
      console.log(`[ProductionNotificationService] üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        console.error(`[ProductionNotificationService] ‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        const errorText = await response.text();
        console.error('[ProductionNotificationService] üìÑ –¢–µ–ª–æ –æ—à–∏–±–∫–∏:', errorText);
        return false;
      }

      const result = await response.json();
      console.log('[ProductionNotificationService] üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Expo API:');
      console.log(JSON.stringify(result, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
      const isSuccess = result.data && result.data.status === 'ok';

      if (isSuccess) {
        console.log('[ProductionNotificationService] ‚úÖ –£–°–ü–ï–®–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ Expo API');
        if (result.data.id) {
          console.log('[ProductionNotificationService] üÜî ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', result.data.id);
        }
      } else {
        console.error('[ProductionNotificationService] ‚ùå –û–®–ò–ë–ö–ê: Expo API –æ—Ç–∫–ª–æ–Ω–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        if (result.data && result.data.status) {
          console.error('[ProductionNotificationService] üìä –°—Ç–∞—Ç—É—Å –æ—Ç Expo:', result.data.status);
        }
        if (result.data && result.data.message) {
          console.error('[ProductionNotificationService] üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Expo:', result.data.message);
        }
        if (result.errors) {
          console.error('[ProductionNotificationService] üö® –û—à–∏–±–∫–∏ –æ—Ç Expo:', result.errors);
        }
      }

      return isSuccess;
    } catch (error) {
      console.error('\nüö® [ProductionNotificationService] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê EXPO API üö®');
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞:', error);
      console.error('[ProductionNotificationService] üìä Stack trace:', error instanceof Error ? error.stack : '–ù–µ—Ç stack trace');
      console.error('[ProductionNotificationService] üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('[ProductionNotificationService] üí° - –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      console.error('[ProductionNotificationService] üí° - –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      console.error('[ProductionNotificationService] üí° - –ü—Ä–æ–±–ª–µ–º—ã —Å Expo Push Service');
      return false;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendPushNotification(message: ProductionPushMessage): Promise<boolean> {
    try {
      console.log('[ProductionNotificationService] üì± –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      console.log('[ProductionNotificationService] üèóÔ∏è Production build:', this.isProductionBuild());
      console.log('[ProductionNotificationService] üì± Platform:', Platform.OS);
      console.log('[ProductionNotificationService] üéØ To:', message.to.substring(0, 20) + '...');

      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Expo API. Expo —Å–∞–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –≤ FCM/APNs –ø–æ —Ç–æ–∫–µ–Ω—É –∏ –ø—Ä–æ–µ–∫—Ç—É
      return await this.sendViaExpoAPI(message);

    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥–µ
   */
  isTokenCompatible(token: string): boolean {
    if (!token) return false;

    // Expo —Ç–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ
    if (token.startsWith('ExponentPushToken[')) {
      return true;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ (–Ω–µ Expo) —Ç–æ–∫–µ–Ω—ã —Å—á–∏—Ç–∞–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥–µ
   */
  getEnvironmentInfo() {
    return {
      isProduction: this.isProductionBuild(),
      platform: Platform.OS,
      appOwnership: Constants.appOwnership,
      isDev: __DEV__,
      expectedService: 'Expo Push Service'
    };
  }
}

export const productionNotificationService = ProductionNotificationService.getInstance();