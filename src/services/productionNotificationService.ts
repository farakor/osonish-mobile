import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç expo-notifications
let Notifications: any = null;
try {
  Notifications = require('expo-notifications');
  console.log('[ProductionNotificationService] ‚úÖ expo-notifications –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.warn('[ProductionNotificationService] ‚ö†Ô∏è expo-notifications –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
}

import { supabase } from './supabaseClient';
import { authService } from './authService';

// –¢–∏–ø—ã –¥–ª—è production —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface ProductionNotificationConfig {
  useCustomServer: boolean;
  customServerUrl?: string;
  customServerToken?: string;
  fcmServerKey?: string;
  apnsKeyId?: string;
  apnsTeamId?: string;
}

export interface NotificationAnalytics {
  userId: string;
  notificationType: string;
  status: 'sent' | 'delivered' | 'opened' | 'failed';
  platform: string;
  appVersion: string;
  error?: string;
  timestamp: string;
}

export interface PushNotificationData {
  title: string;
  body: string;
  data?: any;
  userId: string;
  notificationType: 'new_order' | 'new_application' | 'order_update' | 'order_completed' | 'work_reminder' | 'complete_work_reminder';
}

class ProductionNotificationService {
  private static instance: ProductionNotificationService;
  private isInitialized = false;
  private currentPushToken: string | null = null;
  private isRegistering = false;
  private config: ProductionNotificationConfig;

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  private static readonly STORAGE_KEY_CONFIG = '@osonish_notification_config';
  private static readonly STORAGE_KEY_ANALYTICS = '@osonish_notification_analytics';

  static getInstance(): ProductionNotificationService {
    if (!ProductionNotificationService.instance) {
      ProductionNotificationService.instance = new ProductionNotificationService();
    }
    return ProductionNotificationService.instance;
  }

  constructor() {
    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Expo Push Service
    this.config = {
      useCustomServer: false,
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async init(config?: Partial<ProductionNotificationConfig>): Promise<void> {
    if (this.isInitialized) {
      console.log('[ProductionNotificationService] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    this.isInitialized = true;

    try {
      console.log('[ProductionNotificationService] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await this.loadConfig(config);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Notifications
      if (!Notifications) {
        console.log('[ProductionNotificationService] ‚ö†Ô∏è Notifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
        return;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await this.requestPermissions();

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await this.registerForPushNotifications();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      this.setupNotificationListeners();

      console.log('[ProductionNotificationService] ‚úÖ Production —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('[ProductionNotificationService] üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
        useCustomServer: this.config.useCustomServer,
        hasCustomServerUrl: !!this.config.customServerUrl,
        platform: Platform.OS
      });
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private async loadConfig(config?: Partial<ProductionNotificationConfig>): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const savedConfig = await AsyncStorage.getItem(ProductionNotificationService.STORAGE_KEY_CONFIG);
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        this.config = { ...this.config, ...parsedConfig };
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      if (config) {
        this.config = { ...this.config, ...config };
        await this.saveConfig();
      }

      console.log('[ProductionNotificationService] ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
        useCustomServer: this.config.useCustomServer,
        hasCustomUrl: !!this.config.customServerUrl
      });
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private async saveConfig(): Promise<void> {
    try {
      await AsyncStorage.setItem(
        ProductionNotificationService.STORAGE_KEY_CONFIG,
        JSON.stringify(this.config)
      );
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async updateConfig(config: Partial<ProductionNotificationConfig>): Promise<void> {
    this.config = { ...this.config, ...config };
    await this.saveConfig();
    console.log('[ProductionNotificationService] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async requestPermissions(): Promise<boolean> {
    try {
      if (!Notifications || !Device.isDevice) {
        return false;
      }

      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.warn('[ProductionNotificationService] ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return false;
      }

      console.log('[ProductionNotificationService] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async registerForPushNotifications(): Promise<void> {
    if (this.isRegistering) {
      console.log('[ProductionNotificationService] ‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return;
    }

    this.isRegistering = true;

    try {
      if (!Notifications || !Device.isDevice) {
        console.log('[ProductionNotificationService] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é push —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º projectId
      const projectId = Constants.expoConfig?.extra?.eas?.projectId ||
        Constants.easConfig?.projectId ||
        Constants.manifest?.extra?.eas?.projectId;

      if (!projectId) {
        console.warn('[ProductionNotificationService] ‚ö†Ô∏è ProjectId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º Expo push token
      const tokenData = await Notifications.getExpoPushTokenAsync({
        projectId: projectId,
      });

      if (this.currentPushToken === tokenData.data) {
        console.log('[ProductionNotificationService] üì± Push token –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        return;
      }

      this.currentPushToken = tokenData.data;
      console.log('[ProductionNotificationService] üì± Push token –ø–æ–ª—É—á–µ–Ω:',
        this.currentPushToken.substring(0, 20) + '...');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.savePushTokenToDatabase(tokenData.data);

      // –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await this.logAnalytics({
        userId: authService.getAuthState().user?.id || 'unknown',
        notificationType: 'token_registration',
        status: 'sent',
        platform: Platform.OS,
        appVersion: Constants.expoConfig?.version || '1.0.0',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push —Ç–æ–∫–µ–Ω–∞:', error);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await this.logAnalytics({
        userId: authService.getAuthState().user?.id || 'unknown',
        notificationType: 'token_registration',
        status: 'failed',
        platform: Platform.OS,
        appVersion: Constants.expoConfig?.version || '1.0.0',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    } finally {
      this.isRegistering = false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async savePushTokenToDatabase(token: string): Promise<void> {
    try {
      const authState = authService.getAuthState();
      if (!authState.isAuthenticated || !authState.user) {
        console.warn('[ProductionNotificationService] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
      }

      const deviceType = Platform.OS as 'ios' | 'android';
      const deviceId = Constants.deviceId || Constants.sessionId;

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const { error: deleteError } = await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', authState.user.id)
        .eq('device_id', deviceId);

      if (deleteError) {
        console.warn('[ProductionNotificationService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', deleteError);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error } = await supabase
        .from('push_tokens')
        .insert({
          user_id: authState.user.id,
          token: token,
          device_type: deviceType,
          device_id: deviceId,
          is_active: true
        });

      if (error) {
        console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î:', error);
        throw error;
      }

      console.log('[ProductionNotificationService] ‚úÖ Push token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private setupNotificationListeners(): void {
    if (!Notifications) {
      return;
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    Notifications.addNotificationReceivedListener(async (notification) => {
      console.log('[ProductionNotificationService] üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', notification);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
      const data = notification.request?.content?.data;
      if (data?.userId && data?.notificationType) {
        await this.logAnalytics({
          userId: data.userId,
          notificationType: data.notificationType,
          status: 'delivered',
          platform: Platform.OS,
          appVersion: Constants.expoConfig?.version || '1.0.0',
          timestamp: new Date().toISOString()
        });
      }
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Notifications.addNotificationResponseReceivedListener(async (response) => {
      console.log('[ProductionNotificationService] üëÜ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', response);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ
      const data = response?.notification?.request?.content?.data;
      if (data?.userId && data?.notificationType) {
        await this.logAnalytics({
          userId: data.userId,
          notificationType: data.notificationType,
          status: 'opened',
          platform: Platform.OS,
          appVersion: Constants.expoConfig?.version || '1.0.0',
          timestamp: new Date().toISOString()
        });
      }

      this.handleNotificationTap(response);
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private handleNotificationTap(response: any): void {
    try {
      const data = response?.notification?.request?.content?.data;
      console.log('[ProductionNotificationService] üéØ –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä:
      // - new_order -> –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
      // - new_application -> –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
      // - work_reminder -> –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞

    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (production –≤–µ—Ä—Å–∏—è)
   */
  async sendNotificationToUser(
    userId: string,
    title: string,
    body: string,
    data: any = {},
    notificationType: PushNotificationData['notificationType']
  ): Promise<boolean> {
    try {
      console.log('[ProductionNotificationService] üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tokens = await this.getUserPushTokens(userId);
      if (tokens.length === 0) {
        console.log('[ProductionNotificationService] ‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö push —Ç–æ–∫–µ–Ω–æ–≤');
        return false;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const latestToken = tokens[tokens.length - 1];
      console.log('[ProductionNotificationService] üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω:',
        latestToken.token.substring(0, 20) + '...');

      let success = false;

      // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (this.config.useCustomServer && this.config.customServerUrl) {
        success = await this.sendViaCustomServer(
          latestToken.token,
          title,
          body,
          { ...data, userId, notificationType }
        );
      } else {
        success = await this.sendViaExpoService(
          latestToken.token,
          title,
          body,
          { ...data, userId, notificationType }
        );
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.logAnalytics({
        userId,
        notificationType,
        status: success ? 'sent' : 'failed',
        platform: Platform.OS,
        appVersion: Constants.expoConfig?.version || '1.0.0',
        timestamp: new Date().toISOString()
      });

      return success;
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await this.logAnalytics({
        userId,
        notificationType,
        status: 'failed',
        platform: Platform.OS,
        appVersion: Constants.expoConfig?.version || '1.0.0',
        error: error.message,
        timestamp: new Date().toISOString()
      });

      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Expo Push Service
   */
  private async sendViaExpoService(
    token: string,
    title: string,
    body: string,
    data: any = {}
  ): Promise<boolean> {
    try {
      console.log('[ProductionNotificationService] üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Expo Push Service');

      const message = {
        to: token,
        sound: 'default',
        title,
        body,
        data,
        priority: 'high',
        channelId: 'default',
      };

      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();

      if (!response.ok) {
        console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ Expo API:', result);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç–≤–µ—Ç–µ
      if (result.data && result.data[0]?.status === 'ok') {
        console.log('[ProductionNotificationService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Expo');
        return true;
      } else {
        console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç Expo:', result.data?.[0]?.details);
        return false;
      }
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ Expo –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
   */
  private async sendViaCustomServer(
    token: string,
    title: string,
    body: string,
    data: any = {}
  ): Promise<boolean> {
    try {
      console.log('[ProductionNotificationService] üñ•Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');

      if (!this.config.customServerUrl || !this.config.customServerToken) {
        console.error('[ProductionNotificationService] ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
        return false;
      }

      const payload = {
        token,
        title,
        body,
        data,
        platform: Platform.OS
      };

      const response = await fetch(`${this.config.customServerUrl}/send-notification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.customServerToken}`
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', response.statusText);
        return false;
      }

      const result = await response.json();
      console.log('[ProductionNotificationService] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
      return result.success || false;
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserPushTokens(userId: string): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .from('push_tokens')
        .select('token, device_type, device_id, created_at')
        .eq('user_id', userId)
        .eq('is_active', true)
        .order('created_at', { ascending: true });

      if (error) {
        console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private async logAnalytics(analytics: NotificationAnalytics): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const stored = await AsyncStorage.getItem(ProductionNotificationService.STORAGE_KEY_ANALYTICS);
      const analyticsArray = stored ? JSON.parse(stored) : [];

      analyticsArray.push(analytics);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      if (analyticsArray.length > 1000) {
        analyticsArray.splice(0, analyticsArray.length - 1000);
      }

      await AsyncStorage.setItem(
        ProductionNotificationService.STORAGE_KEY_ANALYTICS,
        JSON.stringify(analyticsArray)
      );

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        await supabase
          .from('notification_analytics')
          .insert(analytics);
      } catch (dbError) {
        console.warn('[ProductionNotificationService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –ë–î:', dbError.message);
      }

      console.log('[ProductionNotificationService] üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
        type: analytics.notificationType,
        status: analytics.status,
        platform: analytics.platform
      });
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async getAnalytics(): Promise<NotificationAnalytics[]> {
    try {
      const stored = await AsyncStorage.getItem(ProductionNotificationService.STORAGE_KEY_ANALYTICS);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async clearAnalytics(): Promise<void> {
    try {
      await AsyncStorage.removeItem(ProductionNotificationService.STORAGE_KEY_ANALYTICS);
      console.log('[ProductionNotificationService] üóëÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('[ProductionNotificationService] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ production —Å–∏—Å—Ç–µ–º—ã
   */
  async diagnose(): Promise<void> {
    console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRODUCTION –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');

    try {
      // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üì± –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
      console.log('  - Device.isDevice:', Device.isDevice);
      console.log('  - Platform.OS:', Platform.OS);
      console.log('  - Notifications –¥–æ—Å—Ç—É–ø–Ω—ã:', !!Notifications);
      console.log('  - –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω:', this.currentPushToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');

      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      console.log('\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
      console.log('  - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:', this.config.useCustomServer);
      console.log('  - URL —Å–µ—Ä–≤–µ—Ä–∞:', this.config.customServerUrl || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      console.log('  - –¢–æ–∫–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:', this.config.customServerToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');

      // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (Notifications) {
        console.log('\nüîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è:');
        const { status } = await Notifications.getPermissionsAsync();
        console.log('  - –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', status);
      }

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
      console.log('\nüìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:');
      const analytics = await this.getAnalytics();
      console.log('  - –ó–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', analytics.length);

      if (analytics.length > 0) {
        const recent = analytics.slice(-5);
        console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:');
        recent.forEach((record, index) => {
          console.log(`    ${index + 1}. ${record.notificationType} - ${record.status} (${record.platform})`);
        });
      }

      console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  getCurrentPushToken(): string | null {
    return this.currentPushToken;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfig(): ProductionNotificationConfig {
    return { ...this.config };
  }
}

export const productionNotificationService = ProductionNotificationService.getInstance();
