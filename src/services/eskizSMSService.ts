/**
 * Eskiz.uz SMS Service –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ —É–∑–±–µ–∫—Å–∫–∏–π SMS-—à–ª—é–∑
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: https://documenter.getpostman.com/view/663428/RzfmES4z?version=latest
 */

export interface EskizConfig {
  email: string;
  password: string;
  baseUrl?: string;
}

export interface EskizAuthResponse {
  message: string;
  data: {
    token: string;
  };
  token_type: string;
}

export interface EskizSMSRequest {
  mobile_phone: string;
  message: string;
  from?: string;
  callback_url?: string;
}

export interface EskizSMSResponse {
  id: string;
  status: string;
  message: string;
}

export interface EskizBalanceResponse {
  balance: number;
}

export interface EskizUserInfoResponse {
  id: number;
  name: string;
  email: string;
  role: string;
  status: string;
  sms_api_login: string;
  sms_api_password: string;
  uz_price: number;
  ru_price: number;
  test_phone: string;
}

interface VerificationCodeData {
  phone: string;
  code: string;
  timestamp: number;
  attempts: number;
}

export class EskizSMSService {
  private config: EskizConfig | null = null;
  private accessToken: string | null = null;
  private tokenExpiryTime: number = 0;
  private verificationCodes: Map<string, VerificationCodeData> = new Map();

  private readonly BASE_URL = 'https://notify.eskiz.uz/api';
  private readonly CODE_EXPIRY_TIME = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  private readonly MAX_ATTEMPTS = 3;
  private readonly TOKEN_REFRESH_BUFFER = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
   */
  init(config: EskizConfig): void {
    this.config = {
      ...config,
      baseUrl: config.baseUrl || this.BASE_URL
    };
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Eskiz API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
   */
  private async authenticate(): Promise<boolean> {
    if (!this.config) {
      console.error('[EskizSMS] –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return false;
    }

    try {
      console.log('[EskizSMS] üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Eskiz API...');

      const response = await fetch(`${this.config.baseUrl}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: this.config.email,
          password: this.config.password,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', response.status, errorText);
        return false;
      }

      const data: EskizAuthResponse = await response.json();

      if (data.data && data.data.token) {
        this.accessToken = data.data.token;
        // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –¥–Ω–µ–π, –Ω–æ –º—ã –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ –∫–∞–∂–¥—ã–µ 29 –¥–Ω–µ–π
        this.tokenExpiryTime = Date.now() + (29 * 24 * 60 * 60 * 1000);
        console.log('[EskizSMS] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        return true;
      } else {
        console.error('[EskizSMS] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', data);
        return false;
      }
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async ensureValidToken(): Promise<boolean> {
    if (!this.accessToken || Date.now() > (this.tokenExpiryTime - this.TOKEN_REFRESH_BUFFER)) {
      console.log('[EskizSMS] üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
      return await this.authenticate();
    }
    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
   */
  private formatPhoneNumber(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = phone.replace(/\D/g, '');

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 998, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (digits.startsWith('998')) {
      return digits;
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ –¥–ª–∏–Ω–∞ 10, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 998
    if (digits.startsWith('8') && digits.length === 10) {
      return '998' + digits.slice(1);
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 –∏ –¥–ª–∏–Ω–∞ 9, –¥–æ–±–∞–≤–ª—è–µ–º 998
    if (digits.startsWith('9') && digits.length === 9) {
      return '998' + digits;
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (12 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 998)
    if (digits.length === 12 && digits.startsWith('998')) {
      return digits;
    }

    console.warn('[EskizSMS] ‚ö†Ô∏è –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞:', phone);
    return digits;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Eskiz API
   */
  private async sendSMSViaEskiz(phone: string, message: string, from?: string): Promise<{ success: boolean; messageId?: string; error?: string }> {
    if (!(await this.ensureValidToken())) {
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Eskiz API' };
    }

    try {
      const formattedPhone = this.formatPhoneNumber(phone);

      const requestBody: EskizSMSRequest = {
        mobile_phone: formattedPhone,
        message: message,
      };

      if (from) {
        requestBody.from = from;
      }

      console.log('[EskizSMS] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä:', formattedPhone);

      const response = await fetch(`${this.config!.baseUrl}/message/sms/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (response.ok && data.id) {
        console.log('[EskizSMS] ‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID:', data.id);
        return { success: true, messageId: data.id };
      } else {
        console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', data);
        return { success: false, error: data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS' };
      }
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS:', error);
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS' };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async getBalance(): Promise<{ success: boolean; balance?: number; error?: string }> {
    if (!(await this.ensureValidToken())) {
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Eskiz API' };
    }

    try {
      const response = await fetch(`${this.config!.baseUrl}/user/get-limit`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
        },
      });

      if (response.ok) {
        const data: EskizBalanceResponse = await response.json();
        return { success: true, balance: data.balance };
      } else {
        const errorData = await response.json();
        return { success: false, error: errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' };
      }
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å' };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async getUserInfo(): Promise<{ success: boolean; userInfo?: EskizUserInfoResponse; error?: string }> {
    if (!(await this.ensureValidToken())) {
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Eskiz API' };
    }

    try {
      const response = await fetch(`${this.config!.baseUrl}/auth/user`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
        },
      });

      if (response.ok) {
        const userInfo: EskizUserInfoResponse = await response.json();
        return { success: true, userInfo };
      } else {
        const errorData = await response.json();
        return { success: false, error: errorData.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' };
      }
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã–º –¥–ª—è App Store/Google Play
   */
  private isTestNumber(phone: string): boolean {
    const formattedPhone = this.formatPhoneNumber(phone);
    // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è App Store –∏ Google Play
    return formattedPhone === '998999999999';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async sendVerificationCode(phone: string, from?: string): Promise<{ success: boolean; error?: string }> {
    try {
      const formattedPhone = this.formatPhoneNumber(phone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –∫–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
      const existingCode = this.verificationCodes.get(formattedPhone);
      if (existingCode && (Date.now() - existingCode.timestamp) < 60000) { // 1 –º–∏–Ω—É—Ç–∞
        return { success: false, error: '–ö–æ–¥ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.' };
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ App Store/Google Play
      if (this.isTestNumber(formattedPhone)) {
        const testCode = '123456'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        console.log(`[EskizSMS TEST] –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä ${formattedPhone}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥: ${testCode}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.verificationCodes.set(formattedPhone, {
          phone: formattedPhone,
          code: testCode,
          timestamp: Date.now(),
          attempts: 0
        });

        return { success: true };
      }

      const code = this.generateCode();
      const message = `${code} - –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Oson Ish`;

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω –ø—Ä–æ–¥–∞–∫—à–Ω)
      const { shouldSendRealSMS } = require('../config/smsMode.js');

      if (!shouldSendRealSMS()) {
        console.log(`[EskizSMS DEV] SMS –∫–æ–¥ –¥–ª—è ${formattedPhone}: ${code}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.verificationCodes.set(formattedPhone, {
          phone: formattedPhone,
          code,
          timestamp: Date.now(),
          attempts: 0
        });

        return { success: true };
      }

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SMS
      const result = await this.sendSMSViaEskiz(formattedPhone, message, from);

      if (result.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.verificationCodes.set(formattedPhone, {
          phone: formattedPhone,
          code,
          timestamp: Date.now(),
          attempts: 0
        });

        console.log('[EskizSMS] ‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä:', formattedPhone);
      }

      return result;
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞' };
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
   */
  async verifyCode(phone: string, inputCode: string): Promise<{ success: boolean; error?: string }> {
    try {
      const formattedPhone = this.formatPhoneNumber(phone);
      const codeData = this.verificationCodes.get(formattedPhone);

      if (!codeData) {
        return { success: false, error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
      if (Date.now() - codeData.timestamp > this.CODE_EXPIRY_TIME) {
        this.verificationCodes.delete(formattedPhone);
        return { success: false, error: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      if (codeData.attempts >= this.MAX_ATTEMPTS) {
        this.verificationCodes.delete(formattedPhone);
        return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' };
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      codeData.attempts++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
      if (codeData.code === inputCode) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.verificationCodes.delete(formattedPhone);
        console.log('[EskizSMS] ‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞:', formattedPhone);
        return { success: true };
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–ø—ã—Ç–æ–∫
        this.verificationCodes.set(formattedPhone, codeData);
        return {
          success: false,
          error: `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${this.MAX_ATTEMPTS - codeData.attempts}`
        };
      }
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
      return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞' };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  cleanupExpiredCodes(): void {
    const now = Date.now();
    this.verificationCodes.forEach((codeData, phone) => {
      if (now - codeData.timestamp > this.CODE_EXPIRY_TIME) {
        this.verificationCodes.delete(phone);
        console.log('[EskizSMS] üßπ –£–¥–∞–ª–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phone);
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  async checkServiceStatus(): Promise<{ success: boolean; authenticated: boolean; balance?: number; error?: string }> {
    try {
      const authResult = await this.ensureValidToken();
      if (!authResult) {
        return { success: false, authenticated: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è' };
      }

      const balanceResult = await this.getBalance();
      return {
        success: true,
        authenticated: true,
        balance: balanceResult.balance,
        error: balanceResult.error
      };
    } catch (error) {
      console.error('[EskizSMS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:', error);
      return { success: false, authenticated: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞' };
    }
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Eskiz (–ø—Ä—è–º–æ –≤ –∫–æ–¥–µ –¥–ª—è React Native)
const ESKIZ_CONFIG: EskizConfig = {
  email: 'info@oson-ish.uz',
  password: 'O0gKE3R1MLVT8JRwbXnQf70TuIvLhHrekjEiwu6g', // –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ .env
  baseUrl: 'https://notify.eskiz.uz/api'
};

// –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
console.log('[EskizSMS] üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Eskiz:', {
  email: ESKIZ_CONFIG.email,
  password: ESKIZ_CONFIG.password, // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  baseUrl: ESKIZ_CONFIG.baseUrl,
  hasPassword: !!ESKIZ_CONFIG.password
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const eskizSMSService = new EskizSMSService();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
eskizSMSService.init(ESKIZ_CONFIG);

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  eskizSMSService.cleanupExpiredCodes();
}, 5 * 60 * 1000);

console.log('[EskizSMS] üöÄ Eskiz SMS —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Eskiz SMS —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export const initEskizSMSService = (config?: EskizConfig) => {
  if (config) {
    eskizSMSService.init(config);
    console.log('[EskizSMS] üîÑ Eskiz SMS —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
  }
};
