/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Supabase Auth —Å SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Eskiz.uz
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */

import { supabase } from './supabaseClient';
import { eskizSMSService } from './eskizSMSService';
import { smsService } from './smsService';
import { smsConfig } from '../config/smsConfig';
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface SupabaseAuthUser {
  id: string;
  phone: string;
  email?: string;
  user_metadata?: any;
  app_metadata?: any;
  created_at: string;
  updated_at: string;
}

export interface SupabaseAuthSession {
  access_token: string;
  refresh_token: string;
  expires_at: number;
  user: SupabaseAuthUser;
}

export interface PhoneAuthRequest {
  phone: string;
  options?: {
    data?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  };
}

export interface PhoneVerifyRequest {
  phone: string;
  token: string; // SMS –∫–æ–¥
  options?: {
    data?: any;
  };
}

export interface AuthResponse {
  success: boolean;
  user?: SupabaseAuthUser;
  session?: SupabaseAuthSession;
  error?: string;
}

class SupabaseAuthService {
  private readonly STORAGE_KEY = '@osonish_supabase_phone_auth';

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SMS —Å–µ—Ä–≤–∏—Å–∞
   */
  private getSMSService() {
    switch (smsConfig.provider) {
      case 'eskiz':
        return eskizSMSService;
      case 'twilio':
      default:
        return smsService;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private formatPhoneNumber(phone: string): string {
    const digits = phone.replace(/\D/g, '');

    if (digits.startsWith('998')) {
      return '+' + digits;
    }

    if (digits.startsWith('8') && digits.length === 10) {
      return '+998' + digits.slice(1);
    }

    if (digits.startsWith('9') && digits.length === 9) {
      return '+998' + digits;
    }

    return phone;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private async getOrCreateUserByPhone(phone: string, userData?: any): Promise<{ user: SupabaseAuthUser | null; error?: string }> {
    try {
      if (!supabase) {
        return { user: null, error: 'Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const formattedPhone = this.formatPhoneNumber(phone);

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { data: existingUser, error: fetchError } = await supabase
        .from('users')
        .select('*')
        .eq('phone', formattedPhone)
        .single();

      if (existingUser && !fetchError) {
        console.log('[SupabaseAuth] üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingUser.id);
        return { user: existingUser };
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      console.log('[SupabaseAuth] üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞:', formattedPhone);

      const newUserData = {
        phone: formattedPhone,
        first_name: userData?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        last_name: userData?.lastName || 'Oson Ish',
        middle_name: userData?.middleName || null,
        birth_date: userData?.birthDate || '1990-01-01', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        role: userData?.role || 'customer',
        profile_image: userData?.profileImage || null,
        city: userData?.city || null,
        preferred_language: userData?.preferredLanguage || 'ru',
        is_verified: true, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ SMS
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert([newUserData])
        .select()
        .single();

      if (createError) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
        return { user: null, error: createError.message };
      }

      console.log('[SupabaseAuth] ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.id);
      return { user: newUser };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { user: null, error: `–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${error}` };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ Supabase Auth —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async createSupabaseAuthSession(user: SupabaseAuthUser): Promise<{ session: SupabaseAuthSession | null; error?: string }> {
    try {
      if (!supabase) {
        return { session: null, error: 'Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      // –°–æ–∑–¥–∞–µ–º email –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Supabase Auth
      const email = `osonish.${user.phone.replace(/[^0-9]/g, '')}@osonish.app`;
      const password = `osonish_${user.id}_${Date.now()}`;

      console.log('[SupabaseAuth] üîê –°–æ–∑–¥–∞–Ω–∏–µ Auth —Å–µ—Å—Å–∏–∏ –¥–ª—è:', email);

      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      let authResult = await supabase.auth.signInWithPassword({
        email,
        password
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Auth, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (authResult.error && authResult.error.message.includes('Invalid login credentials')) {
        console.log('[SupabaseAuth] üë§ –°–æ–∑–¥–∞–Ω–∏–µ Auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        authResult = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              phone: user.phone,
              user_id: user.id
            }
          }
        });
      }

      if (authResult.error) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ Auth:', authResult.error.message);
        return { session: null, error: authResult.error.message };
      }

      if (!authResult.data.session) {
        return { session: null, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é' };
      }

      const session: SupabaseAuthSession = {
        access_token: authResult.data.session.access_token,
        refresh_token: authResult.data.session.refresh_token,
        expires_at: authResult.data.session.expires_at || 0,
        user: user
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ AsyncStorage
      await AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(session));

      console.log('[SupabaseAuth] ‚úÖ Auth —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return { session };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Auth —Å–µ—Å—Å–∏–∏:', error);
      return { session: null, error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${error}` };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async signInWithPhone(request: PhoneAuthRequest): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('[SupabaseAuth] üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä:', request.phone);

      const formattedPhone = this.formatPhoneNumber(request.phone);
      const smsService = this.getSMSService();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥
      const smsResult = await smsService.sendVerificationCode(formattedPhone, smsConfig.senderName);

      if (!smsResult.success) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', smsResult.error);
        return { success: false, error: smsResult.error };
      }

      console.log('[SupabaseAuth] ‚úÖ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return { success: true };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞:', error);
      return { success: false, error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ${error}` };
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  async verifyOtp(request: PhoneVerifyRequest): Promise<AuthResponse> {
    try {
      console.log('[SupabaseAuth] üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', request.phone);

      const formattedPhone = this.formatPhoneNumber(request.phone);
      const smsService = this.getSMSService();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS –∫–æ–¥
      const verificationResult = await smsService.verifyCode(formattedPhone, request.token);

      if (!verificationResult.success) {
        console.error('[SupabaseAuth] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥:', verificationResult.error);
        return { success: false, error: verificationResult.error };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await this.getOrCreateUserByPhone(formattedPhone, request.options?.data);

      if (!userResult.user) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResult.error);
        return { success: false, error: userResult.error };
      }

      // –°–æ–∑–¥–∞–µ–º Supabase Auth —Å–µ—Å—Å–∏—é
      const sessionResult = await this.createSupabaseAuthSession(userResult.user);

      if (!sessionResult.session) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionResult.error);
        return { success: false, error: sessionResult.error };
      }

      console.log('[SupabaseAuth] üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResult.user.id);

      return {
        success: true,
        user: userResult.user,
        session: sessionResult.session
      };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return { success: false, error: `–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error}` };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  async getSession(): Promise<{ session: SupabaseAuthSession | null; error?: string }> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      const storedSession = await AsyncStorage.getItem(this.STORAGE_KEY);

      if (storedSession) {
        const session: SupabaseAuthSession = JSON.parse(storedSession);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        if (session.expires_at > Date.now() / 1000) {
          return { session };
        } else {
          console.log('[SupabaseAuth] ‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º...');
          await AsyncStorage.removeItem(this.STORAGE_KEY);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ Supabase
      if (supabase) {
        const { data: { session }, error } = await supabase.auth.getSession();

        if (error) {
          console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error.message);
          return { session: null, error: error.message };
        }

        if (session) {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
          const { data: userData } = await supabase
            .from('users')
            .select('*')
            .eq('phone', session.user.phone || session.user.user_metadata?.phone)
            .single();

          if (userData) {
            const customSession: SupabaseAuthSession = {
              access_token: session.access_token,
              refresh_token: session.refresh_token,
              expires_at: session.expires_at || 0,
              user: userData
            };

            await AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(customSession));
            return { session: customSession };
          }
        }
      }

      return { session: null };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      return { session: null, error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${error}` };
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async signOut(): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('[SupabaseAuth] üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

      // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      await AsyncStorage.removeItem(this.STORAGE_KEY);

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Supabase Auth
      if (supabase) {
        const { error } = await supabase.auth.signOut();

        if (error) {
          console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Supabase:', error.message);
          return { success: false, error: error.message };
        }
      }

      console.log('[SupabaseAuth] ‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return { success: true };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      return { success: false, error: `–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${error}` };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUser(userId: string, updates: Partial<SupabaseAuthUser>): Promise<{ success: boolean; user?: SupabaseAuthUser; error?: string }> {
    try {
      if (!supabase) {
        return { success: false, error: 'Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const { data: updatedUser, error } = await supabase
        .from('users')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return { success: false, error: error.message };
      }

      console.log('[SupabaseAuth] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', userId);
      return { success: true, user: updatedUser };

    } catch (error) {
      console.error('[SupabaseAuth] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { success: false, error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}` };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const supabaseAuthService = new SupabaseAuthService();
