import * as Location from 'expo-location';
import { API_CONFIG } from '../config/api';

export interface LocationCoords {
  latitude: number;
  longitude: number;
}

export interface LocationPermissionResult {
  granted: boolean;
  error?: string;
}

export interface ReverseGeocodeResult {
  address: string;
  region?: string;
  city?: string;
  country?: string;
}

export class LocationService {
  private static instance: LocationService;
  private currentLocation: LocationCoords | null = null;
  private permissionGranted: boolean = false;



  public static getInstance(): LocationService {
    if (!LocationService.instance) {
      LocationService.instance = new LocationService();
    }
    return LocationService.instance;
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  async requestLocationPermission(): Promise<LocationPermissionResult> {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();

      if (status !== 'granted') {
        console.log('[LocationService] ‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return {
          granted: false,
          error: '–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
        };
      }

      this.permissionGranted = true;
      console.log('[LocationService] ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ');
      return { granted: true };
    } catch (error) {
      console.error('[LocationService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      return {
        granted: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentLocation(): Promise<LocationCoords | null> {
    try {
      if (!this.permissionGranted) {
        const permission = await this.requestLocationPermission();
        if (!permission.granted) {
          return null;
        }
      }

      console.log('[LocationService] üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...');

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
        timeInterval: 10000,
        distanceInterval: 100
      });

      const coords: LocationCoords = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude
      };

      this.currentLocation = coords;
      console.log('[LocationService] ‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', coords);

      return coords;
    } catch (error) {
      console.error('[LocationService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
   */
  getCachedLocation(): LocationCoords | null {
    return this.currentLocation;
  }

  /**
   * –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Yandex Geocoder API –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ
   */
  async reverseGeocode(latitude: number, longitude: number): Promise<ReverseGeocodeResult | null> {
    try {
      console.log('[LocationService] üîÑ –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:', { latitude, longitude });

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Yandex Geocoder API
      const yandexResult = await this.reverseGeocodeYandex(latitude, longitude);
      if (yandexResult) {
        console.log('[LocationService] ‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Yandex:', yandexResult.address);
        return yandexResult;
      }

      // Fallback –Ω–∞ Expo Location –µ—Å–ª–∏ Yandex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('[LocationService] ‚ö†Ô∏è Yandex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Expo Location');
      const results = await Location.reverseGeocodeAsync({
        latitude,
        longitude
      });

      if (results.length > 0) {
        const result = results[0];
        const address = this.formatAddress(result);

        const geocodeResult: ReverseGeocodeResult = {
          address,
          region: result.region || undefined,
          city: result.city || undefined,
          country: result.country || undefined
        };

        console.log('[LocationService] ‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Expo:', address);
        return geocodeResult;
      }

      return null;
    } catch (error) {
      console.error('[LocationService] –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –ü—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É
   */
  async geocodeAddress(address: string): Promise<LocationCoords | null> {
    try {
      console.log('[LocationService] üîÑ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:', address);

      const results = await Location.geocodeAsync(address);

      if (results.length > 0) {
        const result = results[0];
        const coords: LocationCoords = {
          latitude: result.latitude,
          longitude: result.longitude
        };

        console.log('[LocationService] ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', coords);
        return coords;
      }

      return null;
    } catch (error) {
      console.error('[LocationService] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–∏–≤–∏–∑–Ω—ã –ó–µ–º–ª–∏
   */
  calculateDistance(
    lat1: number,
    lon1: number,
    lat2: number,
    lon2: number
  ): number {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

    const dLat = this.toRadians(lat2 - lat1);
    const dLon = this.toRadians(lon2 - lon1);

    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.toRadians(lat1)) *
      Math.cos(this.toRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;

    return Math.round(distance * 10) / 10; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatDistance(distanceKm: number): string {
    if (distanceKm < 1) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–µ—Ç—Ä–∞—Ö –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–Ω—å—à–µ 1 –∫–º
      const meters = Math.round(distanceKm * 1000);
      // –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 10–º
      return `${Math.max(meters, 10)} –º`;
    } else if (distanceKm < 10) {
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç 1 –¥–æ 10 –∫–º
      return `${Math.round(distanceKm * 10) / 10} –∫–º`;
    } else {
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
      return `${Math.round(distanceKm)} –∫–º`;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
   */
  isWithinRadius(
    centerLat: number,
    centerLon: number,
    pointLat: number,
    pointLon: number,
    radiusKm: number
  ): boolean {
    const distance = this.calculateDistance(centerLat, centerLon, pointLat, pointLon);
    return distance <= radiusKm;
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  /**
   * –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Yandex Geocoder API
   */
  private async reverseGeocodeYandex(latitude: number, longitude: number): Promise<ReverseGeocodeResult | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
      if (!API_CONFIG.YANDEX_GEOCODER_API_KEY || API_CONFIG.YANDEX_GEOCODER_API_KEY === 'YOUR_YANDEX_API_KEY_HERE') {
        console.log('[LocationService] ‚ö†Ô∏è Yandex API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ src/config/api.ts');
        return null;
      }

      // Yandex Geocoder API endpoint —Å API –∫–ª—é—á–æ–º
      const url = `https://geocode-maps.yandex.ru/1.x/?apikey=${API_CONFIG.YANDEX_GEOCODER_API_KEY}&geocode=${longitude},${latitude}&format=json&results=1&lang=ru_RU`;

      console.log('[LocationService] üîÑ –ó–∞–ø—Ä–æ—Å –∫ Yandex Geocoder (—Å API –∫–ª—é—á–æ–º):', url.replace(API_CONFIG.YANDEX_GEOCODER_API_KEY, 'API_KEY_HIDDEN'));

      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        console.log('[LocationService] ‚ö†Ô∏è Yandex API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status);
        return null;
      }

      const data = await response.json();
      console.log('[LocationService] üì• –û—Ç–≤–µ—Ç Yandex API –ø–æ–ª—É—á–µ–Ω');

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Yandex API
      const geoObjectCollection = data?.response?.GeoObjectCollection;
      const geoObjects = geoObjectCollection?.featureMember;

      if (geoObjects && geoObjects.length > 0) {
        const geoObject = geoObjects[0].GeoObject;
        const metaData = geoObject.metaDataProperty.GeocoderMetaData;

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const fullAddress = metaData.text || metaData.AddressDetails?.Country?.AddressLine || geoObject.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';

        console.log('[LocationService] üìç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:', fullAddress);

        // –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
        const addressComponents = metaData.Address?.Components || [];
        let city = '';
        let region = '';
        let country = '';

        addressComponents.forEach((component: any) => {
          switch (component.kind) {
            case 'locality':
              city = component.name;
              break;
            case 'province':
              region = component.name;
              break;
            case 'country':
              country = component.name;
              break;
          }
        });

        const result: ReverseGeocodeResult = {
          address: fullAddress,
          city: city || undefined,
          region: region || undefined,
          country: country || undefined
        };

        console.log('[LocationService] ‚úÖ Yandex –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);
        return result;
      }

      console.log('[LocationService] ‚ö†Ô∏è Yandex API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      return null;
    } catch (error) {
      if (error.name === 'AbortError') {
        console.log('[LocationService] ‚è∞ Yandex API —Ç–∞–π–º–∞—É—Ç (5 —Å–µ–∫)');
      } else {
        console.error('[LocationService] ‚ùå –û—à–∏–±–∫–∞ Yandex –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      }
      return null;
    }
  }

  private toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }

  private formatAddress(result: Location.LocationGeocodedAddress): string {
    const parts: string[] = [];

    if (result.street) {
      parts.push(result.street);
    }
    if (result.name && result.name !== result.street) {
      parts.push(result.name);
    }
    if (result.district) {
      parts.push(result.district);
    }
    if (result.city) {
      parts.push(result.city);
    }

    return parts.length > 0 ? parts.join(', ') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
  }
}

export const locationService = LocationService.getInstance();