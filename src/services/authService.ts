import AsyncStorage from '@react-native-async-storage/async-storage';
import { User, AuthState, LoginRequest, VerifyCodeRequest, RegisterRequest, AuthResponse } from '../types';
import { smsService } from './smsService';
import { supabase } from './supabaseClient';
import { mediaService } from './mediaService';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const STORAGE_KEYS = {
  SESSION_TOKEN: '@osonish_session_token',
  CURRENT_USER_ID: '@osonish_current_user_id',
  SUPABASE_SESSION: '@osonish_supabase_session' // –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è Supabase —Å–µ—Å—Å–∏–∏
};

class AuthService {
  private authState: AuthState = {
    isAuthenticated: false,
    user: null
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async init(): Promise<void> {
    console.log('[AuthService] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthService...');

    try {
      if (!supabase) {
        console.error('[AuthService] ‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }
      console.log('[AuthService] ‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      console.log('[AuthService] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ AsyncStorage...');
      const storedUserId = await AsyncStorage.getItem(STORAGE_KEYS.CURRENT_USER_ID);
      const storedToken = await AsyncStorage.getItem(STORAGE_KEYS.SESSION_TOKEN);
      const storedSupabaseSession = await AsyncStorage.getItem(STORAGE_KEYS.SUPABASE_SESSION);

      console.log('[AuthService] üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        hasUserId: !!storedUserId,
        hasToken: !!storedToken,
        hasSupabaseSession: !!storedSupabaseSession
      });

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Supabase —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      if (storedSupabaseSession) {
        console.log('[AuthService] üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Supabase —Å–µ—Å—Å–∏—é...');
        try {
          const session = JSON.parse(storedSupabaseSession);
          console.log('[AuthService] üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', {
            hasAccessToken: !!session.access_token,
            hasRefreshToken: !!session.refresh_token,
            expiresAt: session.expires_at,
            userId: session.user?.id
          });

          const { data, error } = await supabase.auth.setSession(session);

          if (error) {
            console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Supabase —Å–µ—Å—Å–∏–∏:', error.message);
            await AsyncStorage.removeItem(STORAGE_KEYS.SUPABASE_SESSION);
            console.log('[AuthService] üóëÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
          } else {
            console.log('[AuthService] ‚úÖ Supabase —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            if (data.user) {
              console.log('[AuthService] üë§ Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.user.id);
            }
          }
        } catch (error) {
          console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Supabase —Å–µ—Å—Å–∏–∏:', error);
          await AsyncStorage.removeItem(STORAGE_KEYS.SUPABASE_SESSION);
          console.log('[AuthService] üóëÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
        }
      } else {
        console.log('[AuthService] üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è Supabase —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (storedUserId && storedToken) {
        console.log('[AuthService] üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é...');
        console.log('[AuthService] üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:', storedUserId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        const user = await this.loadUserFromSupabase(storedUserId);
        if (user) {
          this.authState = {
            isAuthenticated: true,
            user
          };
          console.log(`[AuthService] ‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.firstName} ${user.lastName}`);
        } else {
          console.warn('[AuthService] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é');
          // –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –æ—á–∏—â–∞–µ–º
          await this.clearSession();
        }
      } else {
        console.log('[AuthService] üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      console.log('[AuthService] üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthService:', error);
      await this.clearSession();
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
  private async loadUserFromSupabase(userId: string): Promise<User | null> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();

      if (error || !data) {
        console.log(`[AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase`);
        return null;
      }

      return {
        id: data.id,
        phone: data.phone,
        firstName: data.first_name,
        lastName: data.last_name,
        middleName: data.middle_name,
        birthDate: data.birth_date,
        profileImage: data.profile_image,
        role: data.role as 'customer' | 'worker',
        city: data.city,
        isVerified: data.is_verified || false,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };
    } catch (error) {
      console.error(`[AuthService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  private async saveSession(user: User): Promise<void> {
    try {
      await AsyncStorage.setItem(STORAGE_KEYS.CURRENT_USER_ID, user.id);
      await AsyncStorage.setItem(STORAGE_KEYS.SESSION_TOKEN, 'authenticated'); // –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω

      // –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é Supabase —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.createSupabaseAuthSession(user);

      console.log('[AuthService] ‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
  private async clearSession(): Promise<void> {
    try {
      await AsyncStorage.multiRemove([
        STORAGE_KEYS.SESSION_TOKEN,
        STORAGE_KEYS.CURRENT_USER_ID,
        STORAGE_KEYS.SUPABASE_SESSION
      ]);

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Supabase Auth
      if (supabase) {
        await supabase.auth.signOut();
      }

      this.authState = {
        isAuthenticated: false,
        user: null
      };

      console.log('[AuthService] ‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ Supabase –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  private async createSupabaseAuthSession(user: User): Promise<void> {
    console.log('[AuthService] üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Supabase Auth —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

    try {
      if (!supabase) {
        console.error('[AuthService] ‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º email –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const email = `osonish.${user.phone.replace(/[^0-9]/g, '')}@gmail.com`;
      const password = `osonish_${user.id}`;

      console.log('[AuthService] üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email –¥–ª—è Auth:', email);
      console.log('[AuthService] üîê –ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

      // –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é
      console.log('[AuthService] üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
      let authResult = await supabase.auth.signInWithPassword({
        email,
        password
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (authResult.error?.message?.includes('Invalid login credentials')) {
        console.log('[AuthService] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Auth –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å...');

        authResult = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              user_id: user.id,
              phone: user.phone,
              first_name: user.firstName,
              last_name: user.lastName
            }
          }
        });

        if (authResult.data?.user) {
          console.log('[AuthService] ‚úÖ –ù–æ–≤–∞—è Auth —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', authResult.data.user.id);
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Auth —Å–µ—Å—Å–∏–∏
        if (authResult.error?.message?.includes('User already registered')) {
          console.log('[AuthService] üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Supabase Auth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
          console.log('[AuthService] üí° –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤');
          return;
        }
      } else if (authResult.data?.user) {
        console.log('[AuthService] ‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Auth —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é:', authResult.data.user.id);
      }

      if (authResult.error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback
        if (!authResult.error.message?.includes('User already registered')) {
          console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ Supabase Auth:', authResult.error.message);
        } else {
          console.log('[AuthService] üí° –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Auth —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
        console.log('[AuthService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ');
        return;
      }

      if (authResult.data.session) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        console.log('[AuthService] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º Supabase —Å–µ—Å—Å–∏—é –≤ AsyncStorage...');
        console.log('[AuthService] üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', {
          hasAccessToken: !!authResult.data.session.access_token,
          hasRefreshToken: !!authResult.data.session.refresh_token,
          expiresAt: authResult.data.session.expires_at,
          userId: authResult.data.session.user?.id
        });

        await AsyncStorage.setItem(STORAGE_KEYS.SUPABASE_SESSION, JSON.stringify(authResult.data.session));
        console.log('[AuthService] ‚úÖ Supabase —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ AsyncStorage');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
        const savedSession = await AsyncStorage.getItem(STORAGE_KEYS.SUPABASE_SESSION);
        console.log('[AuthService] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', savedSession ? '—Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ AsyncStorage' : '—Å–µ—Å—Å–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ AsyncStorage');

        console.log('[AuthService] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Supabase —Å–µ—Å—Å–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      } else {
        console.warn('[AuthService] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Supabase Auth');
      }
    } catch (error) {
      console.error('[AuthService] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Auth —Å–µ—Å—Å–∏–∏:', error);
      console.log('[AuthService] üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ');
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  private formatPhoneNumber(phone: string): string {
    const digits = phone.replace(/\D/g, '');
    if (digits.startsWith('998') && digits.length === 12) {
      return '+' + digits;
    } else if (digits.length === 9) {
      return '+998' + digits;
    } else if (digits.length === 12 && digits.startsWith('998')) {
      return '+998' + digits.slice(1);
    }
    return phone;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getAuthState(): AuthState {
    return { ...this.authState };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  async getUserByPhone(phone: string): Promise<User | null> {
    try {
      if (!supabase) {
        console.error('[AuthService] Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return null;
      }

      const formattedPhone = this.formatPhoneNumber(phone);

      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('phone', formattedPhone)
        .single();

      if (error || !data) {
        return null;
      }

      return {
        id: data.id,
        phone: data.phone,
        firstName: data.first_name,
        lastName: data.last_name,
        middleName: data.middle_name,
        birthDate: data.birth_date,
        profileImage: data.profile_image,
        role: data.role as 'customer' | 'worker',
        city: data.city,
        isVerified: data.is_verified || false,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', error);
      return null;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private generateUserId(): string {
    return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ö–æ–¥)
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    try {
      console.log('[AuthService] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', credentials.phone);

      const formattedPhone = this.formatPhoneNumber(credentials.phone);
      const existingUser = await this.getUserByPhone(formattedPhone);

      if (!existingUser) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.'
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS-–∫–æ–¥
      const smsResult = await smsService.sendVerificationCode(formattedPhone);
      if (!smsResult.success) {
        return {
          success: false,
          error: smsResult.error
        };
      }

      return {
        success: true,
        requiresVerification: true,
        phone: formattedPhone
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
      };
    }
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS-–∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞
  async verifyLoginCode(request: VerifyCodeRequest): Promise<AuthResponse> {
    try {
      console.log('[AuthService] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞:', request.phone);

      const formattedPhone = this.formatPhoneNumber(request.phone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS-–∫–æ–¥
      const verificationResult = await smsService.verifyCode(formattedPhone, request.code);
      if (!verificationResult.success) {
        return {
          success: false,
          error: verificationResult.error
        };
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
      const user = await this.getUserByPhone(formattedPhone);
      if (!user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      this.authState = {
        isAuthenticated: true,
        user
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      await this.saveSession(user);

      console.log(`[AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} ${user.lastName} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);

      return {
        success: true,
        user,
        requiresVerification: false
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      };
    }
  }

  // –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async startRegistration(phone: string): Promise<AuthResponse> {
    try {
      console.log('[AuthService] –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phone);

      const formattedPhone = this.formatPhoneNumber(phone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await this.getUserByPhone(formattedPhone);
      if (existingUser) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS-–∫–æ–¥
      const smsResult = await smsService.sendVerificationCode(formattedPhone);
      if (!smsResult.success) {
        return {
          success: false,
          error: smsResult.error
        };
      }

      return {
        success: true,
        requiresVerification: true,
        phone: formattedPhone
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      };
    }
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS-–∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async verifyRegistrationCode(request: VerifyCodeRequest): Promise<AuthResponse> {
    try {
      console.log('[AuthService] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', request.phone);

      const formattedPhone = this.formatPhoneNumber(request.phone);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS-–∫–æ–¥
      const verificationResult = await smsService.verifyCode(formattedPhone, request.code);
      if (!verificationResult.success) {
        return {
          success: false,
          error: verificationResult.error
        };
      }

      return {
        success: true,
        phone: formattedPhone,
        requiresProfileInfo: true
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      };
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async completeRegistration(userData: RegisterRequest): Promise<AuthResponse> {
    try {
      console.log('[AuthService] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', userData.phone);

      if (!supabase) {
        return {
          success: false,
          error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        };
      }

      const formattedPhone = this.formatPhoneNumber(userData.phone);
      const userId = this.generateUserId();

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
      const { data, error } = await supabase
        .from('users')
        .insert({
          id: userId,
          phone: formattedPhone,
          first_name: userData.firstName,
          last_name: userData.lastName,
          middle_name: userData.middleName || null,
          birth_date: userData.birthDate,
          role: userData.role,
          city: userData.city || null,
          profile_image: userData.profileImage || null,
          is_verified: true
        })
        .select()
        .single();

      if (error) {
        console.error('[AuthService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', error);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        };
      }

      const newUser: User = {
        id: data.id,
        phone: data.phone,
        firstName: data.first_name,
        lastName: data.last_name,
        middleName: data.middle_name,
        birthDate: data.birth_date,
        profileImage: data.profile_image,
        role: data.role as 'customer' | 'worker',
        city: data.city,
        isVerified: data.is_verified,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      this.authState = {
        isAuthenticated: true,
        user: newUser
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      await this.saveSession(newUser);

      console.log(`[AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.firstName} ${newUser.lastName} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);

      return {
        success: true,
        user: newUser
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Storage
  async uploadProfileImage(imageUri: string): Promise<{ success: boolean; url?: string; error?: string }> {
    try {
      if (!this.authState.user) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        };
      }

      console.log('[AuthService] üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      console.log('[AuthService] üì± URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUri);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const response = await fetch(imageUri);
      const blob = await response.blob();
      const fileSize = blob.size;

      console.log(`[AuthService] üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${(fileSize / 1024).toFixed(1)} KB`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const fileName = `profile_${this.authState.user.id}_${Date.now()}.jpg`;
      const file = {
        uri: imageUri,
        type: 'image' as const,
        name: fileName,
        size: fileSize
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mediaService –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const uploadResult = await mediaService.uploadMediaFiles([file]);

      if (!uploadResult.success || !uploadResult.urls || uploadResult.urls.length === 0) {
        console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', uploadResult.error);
        return {
          success: false,
          error: uploadResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
      }

      const profileImageUrl = uploadResult.urls[0];
      console.log('[AuthService] ‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', profileImageUrl);

      return {
        success: true,
        url: profileImageUrl
      };
    } catch (error) {
      console.error('[AuthService] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateProfile(updates: Partial<User>): Promise<AuthResponse> {
    try {
      if (!this.authState.user || !supabase) {
        return {
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        };
      }

      const userId = this.authState.user.id;
      let profileImageUrl = updates.profileImage;

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π URI, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ Storage
      if (updates.profileImage && updates.profileImage.startsWith('file://')) {
        console.log('[AuthService] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage...');

        const uploadResult = await this.uploadProfileImage(updates.profileImage);
        if (!uploadResult.success) {
          return {
            success: false,
            error: uploadResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'
          };
        }

        profileImageUrl = uploadResult.url;
        console.log('[AuthService] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, URL:', profileImageUrl);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase
      const { data, error } = await supabase
        .from('users')
        .update({
          first_name: updates.firstName,
          last_name: updates.lastName,
          middle_name: updates.middleName,
          birth_date: updates.birthDate,
          profile_image: profileImageUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('[AuthService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ Supabase:', error);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const updatedUser: User = {
        id: data.id,
        phone: data.phone,
        firstName: data.first_name,
        lastName: data.last_name,
        middleName: data.middle_name,
        birthDate: data.birth_date,
        profileImage: data.profile_image,
        role: data.role as 'customer' | 'worker',
        city: data.city,
        isVerified: data.is_verified,
        createdAt: data.created_at,
        updatedAt: data.updated_at,
      };

      this.authState = {
        isAuthenticated: true,
        user: updatedUser
      };

      console.log(`[AuthService] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${updatedUser.firstName} ${updatedUser.lastName} –æ–±–Ω–æ–≤–ª–µ–Ω`);

      return {
        success: true,
        user: updatedUser
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
      };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  async logout(): Promise<void> {
    try {
      await this.clearSession();
      console.log('[AuthService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
  async getAllUsersFromSupabase(): Promise<User[]> {
    try {
      if (!supabase) {
        console.error('[AuthService] Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return [];
      }

      const { data, error } = await supabase
        .from('users')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('[AuthService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase:', error);
        return [];
      }

      const users: User[] = data.map((item: any) => ({
        id: item.id,
        phone: item.phone,
        firstName: item.first_name,
        lastName: item.last_name,
        middleName: item.middle_name,
        birthDate: item.birth_date,
        profileImage: item.profile_image,
        role: item.role as 'customer' | 'worker',
        city: item.city,
        isVerified: item.is_verified || false,
        createdAt: item.created_at,
        updatedAt: item.updated_at,
      }));

      console.log(`[AuthService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase`);
      return users;
    } catch (error) {
      console.error('[AuthService] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  async findUserById(userId: string): Promise<User | null> {
    return await this.loadUserFromSupabase(userId);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async clearAllData(): Promise<void> {
    try {
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase
      if (supabase) {
        try {
          const { error } = await supabase.from('users').delete().neq('id', '00000000-0000-0000-0000-000000000000');
          if (error) {
            console.error('[AuthService] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase:', error);
          } else {
            console.log('[AuthService] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã –≤ Supabase');
          }
        } catch (error) {
          console.error('[AuthService] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Supabase:', error);
        }
      }

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      await this.clearSession();

      console.log('[AuthService] ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ Supabase)
  getAllUsers(): User[] {
    console.warn('[AuthService] getAllUsers —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getAllUsersFromSupabase()');
    return [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const authService = new AuthService(); 