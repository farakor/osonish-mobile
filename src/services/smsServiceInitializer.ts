/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä SMS —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è Oson Ish
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä
 */

const { smsConfig, validateSMSConfig } = require('../config/smsConfig.js');
import { initSMSService } from './smsService';
import { initEskizSMSService } from './eskizSMSService';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMS —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export const initializeSMSServices = async (): Promise<{ success: boolean; error?: string }> => {
  try {
    console.log('[SMSInitializer] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMS —Å–µ—Ä–≤–∏—Å–æ–≤...');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const validation = validateSMSConfig();
    if (!validation.isValid) {
      const errorMessage = `–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS: ${validation.errors.join(', ')}`;
      console.error('[SMSInitializer] ‚ùå', errorMessage);
      return { success: false, error: errorMessage };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    switch (smsConfig.provider) {
      case 'eskiz':
        if (!smsConfig.eskiz) {
          const error = '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Eskiz –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
          console.error('[SMSInitializer] ‚ùå', error);
          return { success: false, error };
        }

        console.log('[SMSInitializer] üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Eskiz SMS —Å–µ—Ä–≤–∏—Å–∞...');
        initEskizSMSService(smsConfig.eskiz);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        if (!__DEV__) {
          const { eskizSMSService } = await import('./eskizSMSService');
          const statusCheck = await eskizSMSService.checkServiceStatus();

          if (!statusCheck.success) {
            const error = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Eskiz: ${statusCheck.error}`;
            console.error('[SMSInitializer] ‚ùå', error);
            return { success: false, error };
          }

          console.log('[SMSInitializer] ‚úÖ Eskiz SMS —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          console.log('[SMSInitializer] üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:', statusCheck.balance);
        }
        break;

      case 'twilio':
        if (!smsConfig.twilio) {
          const error = '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Twilio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
          console.error('[SMSInitializer] ‚ùå', error);
          return { success: false, error };
        }

        console.log('[SMSInitializer] üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twilio SMS —Å–µ—Ä–≤–∏—Å–∞...');
        initSMSService();
        console.log('[SMSInitializer] ‚úÖ Twilio SMS —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        break;

      default:
        const error = `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${smsConfig.provider}`;
        console.error('[SMSInitializer] ‚ùå', error);
        return { success: false, error };
    }

    console.log('[SMSInitializer] üéâ SMS —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('[SMSInitializer] üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', smsConfig.provider);
    console.log('[SMSInitializer] üì§ –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', smsConfig.senderName);

    return { success: true };
  } catch (error) {
    const errorMessage = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SMS —Å–µ—Ä–≤–∏—Å–æ–≤: ${error}`;
    console.error('[SMSInitializer] ‚ùå', errorMessage);
    return { success: false, error: errorMessage };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
 */
export const getSMSProviderInfo = () => {
  return {
    provider: smsConfig.provider,
    senderName: smsConfig.senderName,
    isConfigured: validateSMSConfig().isValid,
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SMS —Å–µ—Ä–≤–∏—Å–∞
 */
export const checkSMSServiceStatus = async (): Promise<{
  success: boolean;
  provider: string;
  authenticated?: boolean;
  balance?: number;
  error?: string;
}> => {
  try {
    const providerInfo = getSMSProviderInfo();

    if (!providerInfo.isConfigured) {
      return {
        success: false,
        provider: providerInfo.provider,
        error: 'SMS —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }

    switch (smsConfig.provider) {
      case 'eskiz':
        const { eskizSMSService } = await import('./eskizSMSService');
        const eskizStatus = await eskizSMSService.checkServiceStatus();

        return {
          success: eskizStatus.success,
          provider: 'eskiz',
          authenticated: eskizStatus.authenticated,
          balance: eskizStatus.balance,
          error: eskizStatus.error
        };

      case 'twilio':
        // –î–ª—è Twilio –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
          success: true,
          provider: 'twilio',
          authenticated: true
        };

      default:
        return {
          success: false,
          provider: smsConfig.provider,
          error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä'
        };
    }
  } catch (error) {
    return {
      success: false,
      provider: smsConfig.provider,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error}`
    };
  }
};
