/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –æ—Ç–∫–ª–∏–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–∑–≤–∞—Ç—å –≤ DevScreen –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
 */

import { orderService } from '../services/orderService';
import { authService } from '../services/authService';
import { supabase } from '../services/supabaseClient';
import { Alert } from 'react-native';

interface TestUser {
  id: string;
  phone: string;
  firstName: string;
  lastName: string;
  role: 'customer' | 'worker';
}

export class ConflictManagementTester {
  private customerA: TestUser | null = null;
  private customerB: TestUser | null = null;
  private workerIvan: TestUser | null = null;
  private orderA: string | null = null;
  private orderB: string | null = null;
  private testDate: string;

  constructor() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å –≤—Ä–µ–º–µ–Ω–µ–º
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 10:00
    this.testDate = tomorrow.toISOString();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
   */
  async runFullTest(): Promise<void> {
    try {
      console.log('üß™ [TEST] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –æ—Ç–∫–ª–∏–∫–æ–≤');

      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.createTestUsers();

      // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
      await this.createTestOrders();

      // –®–∞–≥ 3: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –æ–±–∞ –∑–∞–∫–∞–∑–∞
      await this.workerApplyToBothOrders();

      // –®–∞–≥ 4: –ó–∞–∫–∞–∑—á–∏–∫ –ë –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      await this.customerBSelectsWorker();

      // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.verifyResults();

      console.log('‚úÖ [TEST] –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
      Alert.alert('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } catch (error) {
      console.error('‚ùå [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', String(error));
    } finally {
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.cleanupTestData();
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async createTestUsers(): Promise<void> {
    console.log('üìù [TEST] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ ID
    this.customerA = {
      id: 'test-customer-a-' + Date.now(),
      phone: '+998901234567',
      firstName: '–ó–∞–∫–∞–∑—á–∏–∫',
      lastName: '–ê',
      role: 'customer'
    };

    this.customerB = {
      id: 'test-customer-b-' + Date.now(),
      phone: '+998901234568',
      firstName: '–ó–∞–∫–∞–∑—á–∏–∫',
      lastName: '–ë',
      role: 'customer'
    };

    this.workerIvan = {
      id: 'test-worker-ivan-' + Date.now(),
      phone: '+998901234569',
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      role: 'worker'
    };

    console.log('‚úÖ [TEST] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  private async createTestOrders(): Promise<void> {
    console.log('üìù [TEST] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...');

    if (!this.customerA || !this.customerB) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ê
    const { data: orderAData, error: orderAError } = await supabase
      .from('orders')
      .insert({
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –ê - –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–±–æ—Ä–∫–∞ –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        category: '–£–±–æ—Ä–∫–∞',
        location: '–¢–∞—à–∫–µ–Ω—Ç, –ß–∏–ª–∞–Ω–∑–∞—Ä',
        budget: 200000,
        workers_needed: 1,
        service_date: this.testDate,
        customer_id: this.customerA.id,
        status: 'new',
        applicants_count: 0
      })
      .select()
      .single();

    if (orderAError) throw orderAError;
    this.orderA = orderAData.id;
    console.log('‚úÖ [TEST] –ó–∞–∫–∞–∑ –ê —Å–æ–∑–¥–∞–Ω:', this.orderA);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ –ë —Å –¥—Ä—É–≥–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–æ —Ç–æ–π –∂–µ –¥–∞—Ç–æ–π
    const orderBDate = new Date(this.testDate);
    orderBDate.setHours(14, 30, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 14:30

    const { data: orderBData, error: orderBError } = await supabase
      .from('orders')
      .insert({
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –ë - –†–µ–º–æ–Ω—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Å–º–µ—Å–∏—Ç–µ–ª—å –≤ –≤–∞–Ω–Ω–æ–π',
        category: '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
        location: '–¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥',
        budget: 150000,
        workers_needed: 1,
        service_date: orderBDate.toISOString(),
        customer_id: this.customerB.id,
        status: 'new',
        applicants_count: 0
      })
      .select()
      .single();

    if (orderBError) throw orderBError;
    this.orderB = orderBData.id;
    console.log('‚úÖ [TEST] –ó–∞–∫–∞–∑ –ë —Å–æ–∑–¥–∞–Ω:', this.orderB);
  }

  /**
   * –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –æ–±–∞ –∑–∞–∫–∞–∑–∞
   */
  private async workerApplyToBothOrders(): Promise<void> {
    console.log('üìù [TEST] –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –æ–±–∞ –∑–∞–∫–∞–∑–∞...');

    if (!this.workerIvan || !this.orderA || !this.orderB) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤');
    }

    // –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê
    const applicantA = await orderService.createApplicant({
      orderId: this.orderA,
      workerId: this.workerIvan.id,
      message: '–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–±–æ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ',
      proposedPrice: 200000
    });

    if (!applicantA) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê');
    console.log('‚úÖ [TEST] –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê —Å–æ–∑–¥–∞–Ω');

    // –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë
    const applicantB = await orderService.createApplicant({
      orderId: this.orderB,
      workerId: this.workerIvan.id,
      message: '–û–ø—ã—Ç–Ω—ã–π —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, –≤—ã–ø–æ–ª–Ω—é –±—ã—Å—Ç—Ä–æ',
      proposedPrice: 150000
    });

    if (!applicantB) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë');
    console.log('‚úÖ [TEST] –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë —Å–æ–∑–¥–∞–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
    await this.checkOrderStatuses('–ü–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–æ–≤');
  }

  /**
   * –ó–∞–∫–∞–∑—á–∏–∫ –ë –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  private async customerBSelectsWorker(): Promise<void> {
    console.log('üìù [TEST] –ó–∞–∫–∞–∑—á–∏–∫ –ë –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ò–≤–∞–Ω–∞...');

    if (!this.workerIvan || !this.orderB) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫ –ò–≤–∞–Ω–∞ –Ω–∞ –∑–∞–∫–∞–∑ –ë
    const { data: applicantData, error } = await supabase
      .from('applicants')
      .select('id')
      .eq('order_id', this.orderB)
      .eq('worker_id', this.workerIvan.id)
      .single();

    if (error || !applicantData) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë');
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–∫–ª–∏–∫
    const success = await orderService.updateApplicantStatus(applicantData.id, 'accepted');

    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫');
    }

    console.log('‚úÖ [TEST] –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ò–≤–∞–Ω –≤—ã–±—Ä–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ –ë');

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private async verifyResults(): Promise<void> {
    console.log('üîç [TEST] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');

    if (!this.workerIvan || !this.orderA || !this.orderB) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ –ê (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rejected)
    const { data: applicantA, error: errorA } = await supabase
      .from('applicants')
      .select('status')
      .eq('order_id', this.orderA)
      .eq('worker_id', this.workerIvan.id)
      .single();

    if (errorA || !applicantA) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê');
    }

    if (applicantA.status !== 'rejected') {
      throw new Error(`–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å rejected, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${applicantA.status}`);
    }
    console.log('‚úÖ [TEST] –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ –ë (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å accepted)
    const { data: applicantB, error: errorB } = await supabase
      .from('applicants')
      .select('status')
      .eq('order_id', this.orderB)
      .eq('worker_id', this.workerIvan.id)
      .single();

    if (errorB || !applicantB) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë');
    }

    if (applicantB.status !== 'accepted') {
      throw new Error(`–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å accepted, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${applicantB.status}`);
    }
    console.log('‚úÖ [TEST] –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –ë –ø—Ä–∏–Ω—è—Ç');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
    await this.checkOrderStatuses('–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ê (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å new –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤)
    const { data: orderA, error: orderAError } = await supabase
      .from('orders')
      .select('status, applicants_count')
      .eq('id', this.orderA)
      .single();

    if (orderAError || !orderA) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –ê');
    }

    if (orderA.applicants_count === 0 && orderA.status !== 'new') {
      throw new Error(`–ó–∞–∫–∞–∑ –ê –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å new, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${orderA.status}`);
    }
    console.log('‚úÖ [TEST] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ê –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:', orderA.status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ë (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å in_progress)
    const { data: orderB, error: orderBError } = await supabase
      .from('orders')
      .select('status')
      .eq('id', this.orderB)
      .single();

    if (orderBError || !orderB) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –ë');
    }

    if (orderB.status !== 'in_progress') {
      throw new Error(`–ó–∞–∫–∞–∑ –ë –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å in_progress, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${orderB.status}`);
    }
    console.log('‚úÖ [TEST] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:', orderB.status);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
   */
  private async checkOrderStatuses(stage: string): Promise<void> {
    if (!this.orderA || !this.orderB) return;

    const { data: orders } = await supabase
      .from('orders')
      .select('id, status, applicants_count')
      .in('id', [this.orderA, this.orderB]);

    console.log(`üìä [TEST] –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ (${stage}):`);
    orders?.forEach(order => {
      const orderName = order.id === this.orderA ? '–ê' : '–ë';
      console.log(`   –ó–∞–∫–∞–∑ ${orderName}: —Å—Ç–∞—Ç—É—Å=${order.status}, –æ—Ç–∫–ª–∏–∫–æ–≤=${order.applicants_count}`);
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async cleanupTestData(): Promise<void> {
    console.log('üßπ [TEST] –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    try {
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (—ç—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ —á–µ—Ä–µ–∑ CASCADE)
      if (this.orderA) {
        await supabase.from('orders').delete().eq('id', this.orderA);
      }
      if (this.orderB) {
        await supabase.from('orders').delete().eq('id', this.orderB);
      }

      console.log('‚úÖ [TEST] –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ö†Ô∏è [TEST] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async runQuickTest(): Promise<void> {
    const authState = authService.getAuthState();
    if (!authState.isAuthenticated || !authState.user) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    console.log('üöÄ [TEST] –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    this.customerA = {
      id: authState.user.id,
      phone: authState.user.phone,
      firstName: authState.user.firstName,
      lastName: authState.user.lastName,
      role: authState.user.role
    };

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
    await this.runFullTest();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
export const testConflictManagement = async (): Promise<void> => {
  const tester = new ConflictManagementTester();
  await tester.runQuickTest();
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
export const runFullConflictTest = async (): Promise<void> => {
  const tester = new ConflictManagementTester();
  await tester.runFullTest();
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –¥–∞—Ç
export const testDateComparison = async (): Promise<void> => {
  console.log('üß™ [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç...');

  const date1 = '2024-01-15T10:00:00.000Z';
  const date2 = '2024-01-15T14:30:00.000Z';
  const date3 = '2024-01-16T10:00:00.000Z';

  const extractDate = (dateString: string) => dateString.split('T')[0];

  console.log(`–î–∞—Ç–∞ 1: ${date1} -> ${extractDate(date1)}`);
  console.log(`–î–∞—Ç–∞ 2: ${date2} -> ${extractDate(date2)}`);
  console.log(`–î–∞—Ç–∞ 3: ${date3} -> ${extractDate(date3)}`);

  console.log(`–î–∞—Ç–∞ 1 === –î–∞—Ç–∞ 2: ${extractDate(date1) === extractDate(date2)}`);
  console.log(`–î–∞—Ç–∞ 1 === –î–∞—Ç–∞ 3: ${extractDate(date1) === extractDate(date3)}`);

  Alert.alert('–¢–µ—Å—Ç –¥–∞—Ç', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
};
