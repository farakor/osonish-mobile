/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤
 */

import { Alert } from 'react-native';
import { supabase } from '../services/supabaseClient';
import { authService } from '../services/authService';

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function debugUserOrders(): Promise<void> {
  try {
    console.log('üîç [DEBUG] –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authState = authService.getAuthState();
    if (!authState.isAuthenticated || !authState.user) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];
    console.log('üîç [DEBUG] –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:', today);
    console.log('üîç [DEBUG] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authState.user.id);

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: allOrders, error: allError } = await supabase
      .from('orders')
      .select('id, title, status, service_date, created_at, customer_id')
      .eq('customer_id', authState.user.id)
      .order('created_at', { ascending: false });

    if (allError) {
      console.error('üîç [DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:', allError);
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã: ${allError.message}`);
      return;
    }

    console.log(`üîç [DEBUG] –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${allOrders?.length || 0}`);

    if (allOrders && allOrders.length > 0) {
      console.log('üîç [DEBUG] –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:');
      allOrders.forEach((order, index) => {
        console.log(`  ${index + 1}. ID: ${order.id}`);
        console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: "${order.title}"`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${order.status}`);
        console.log(`     –î–∞—Ç–∞ —Å–ª—É–∂–±—ã: ${order.service_date}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${order.created_at}`);
        console.log('     ---');
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: todayOrders, error: todayError } = await supabase
      .from('orders')
      .select('id, title, status, service_date')
      .eq('customer_id', authState.user.id)
      .eq('service_date', today);

    if (todayError) {
      console.error('üîç [DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', todayError);
    } else {
      console.log(`üîç [DEBUG] –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${today}): ${todayOrders?.length || 0}`);

      if (todayOrders && todayOrders.length > 0) {
        console.log('üîç [DEBUG] –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:');
        todayOrders.forEach((order, index) => {
          console.log(`  ${index + 1}. "${order.title}" - —Å—Ç–∞—Ç—É—Å: ${order.status}`);
        });
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const totalCount = allOrders?.length || 0;
    const todayCount = todayOrders?.length || 0;

    Alert.alert(
      '–û—Ç–ª–∞–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
      `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalCount}\n` +
      `–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayCount}\n\n` +
      `–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Å–æ–ª–∏`
    );

  } catch (error) {
    console.error('üîç [DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    Alert.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: ${error}`);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export async function debugOrdersByStatus(): Promise<void> {
  try {
    console.log('üîç [DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º...');

    const authState = authService.getAuthState();
    if (!authState.isAuthenticated || !authState.user) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    const today = new Date().toISOString().split('T')[0];

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
    const statuses = ['new', 'response_received', 'in_progress', 'completed', 'cancelled'];

    for (const status of statuses) {
      const { data: orders, error } = await supabase
        .from('orders')
        .select('id, title, service_date')
        .eq('customer_id', authState.user.id)
        .eq('status', status)
        .eq('service_date', today);

      if (!error) {
        console.log(`üîç [DEBUG] –°—Ç–∞—Ç—É—Å "${status}" –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${orders?.length || 0} –∑–∞–∫–∞–∑–æ–≤`);
        if (orders && orders.length > 0) {
          orders.forEach(order => {
            console.log(`  - ${order.id}: "${order.title}"`);
          });
        }
      }
    }

  } catch (error) {
    console.error('üîç [DEBUG] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', error);
  }
}
