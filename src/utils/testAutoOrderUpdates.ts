/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { orderService } from '../services/orderService';
import { supabase } from '../services/supabaseClient';

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
 */
export async function createTestOrdersForAutoUpdate(): Promise<void> {
  try {
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    const today = new Date().toISOString().split('T')[0];

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const testOrders = [
      {
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ - –ù–æ–≤—ã–π (–¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã)',
        description: '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –≤ 20:00',
        category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
        budget: 100000,
        workers_needed: 1,
        service_date: today,
        status: 'new',
        customer_id: 'test-customer-id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      },
      {
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ - –û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω (–¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã)',
        description: '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –≤ 20:00',
        category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
        budget: 150000,
        workers_needed: 1,
        service_date: today,
        status: 'response_received',
        customer_id: 'test-customer-id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      },
      {
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ - –í —Ä–∞–±–æ—Ç–µ (–¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)',
        description: '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ 20:00',
        category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
        budget: 200000,
        workers_needed: 1,
        service_date: today,
        status: 'in_progress',
        customer_id: 'test-customer-id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    ];

    for (const order of testOrders) {
      const { data, error } = await supabase
        .from('orders')
        .insert(order)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
      } else {
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: ${data.id} - ${data.title}`);
      }
    }

    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
 * (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏)
 */
export async function forceAutoOrderUpdate(): Promise<void> {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');

    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
    const originalAutoComplete = orderService.autoCompleteOrders;

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    const testAutoComplete = async function (this: typeof orderService): Promise<void> {
      try {
        console.log('[TEST] üîÑ –¢–ï–°–¢–û–í–´–ô —Ä–µ–∂–∏–º: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        const today = new Date().toISOString().split('T')[0];
        console.log(`[TEST] üìÖ –ò—â–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –¥–∞—Ç—É: ${today}`);

        // 1. –ò—â–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_progress' –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const { data: ordersToComplete, error: completeError } = await supabase
          .from('orders')
          .select('id, customer_id, title')
          .eq('status', 'in_progress')
          .eq('service_date', today);

        if (completeError) {
          console.error('[TEST] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', completeError);
        } else {
          if (ordersToComplete && ordersToComplete.length > 0) {
            console.log(`[TEST] üìã –ù–∞–π–¥–µ–Ω–æ ${ordersToComplete.length} –∑–∞–∫–∞–∑–æ–≤ "–í —Ä–∞–±–æ—Ç–µ" –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`);

            for (const order of ordersToComplete) {
              console.log(`[TEST] üîÑ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${order.id}`);

              const { error: updateError } = await supabase
                .from('orders')
                .update({
                  status: 'completed',
                  auto_completed: true,
                  updated_at: new Date().toISOString()
                })
                .eq('id', order.id);

              if (updateError) {
                console.error(`[TEST] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, updateError);
              } else {
                console.log(`[TEST] ‚úÖ –ó–∞–∫–∞–∑ ${order.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω`);
              }
            }
          } else {
            console.log('[TEST] ‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ "–í —Ä–∞–±–æ—Ç–µ" –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
          }
        }

        // 2. –ò—â–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new' –∏ 'response_received' –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
        const { data: ordersToCancel, error: cancelError } = await supabase
          .from('orders')
          .select('id, customer_id, title, status')
          .in('status', ['new', 'response_received'])
          .eq('service_date', today);

        if (cancelError) {
          console.error('[TEST] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã:', cancelError);
        } else {
          if (ordersToCancel && ordersToCancel.length > 0) {
            console.log(`[TEST] üìã –ù–∞–π–¥–µ–Ω–æ ${ordersToCancel.length} –∑–∞–∫–∞–∑–æ–≤ "–ù–æ–≤—ã–π"/"–û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω" –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã`);

            for (const order of ordersToCancel) {
              console.log(`[TEST] üîÑ –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: ${order.id} (—Å—Ç–∞—Ç—É—Å: ${order.status})`);

              const { error: updateError } = await supabase
                .from('orders')
                .update({
                  status: 'cancelled',
                  auto_cancelled: true,
                  updated_at: new Date().toISOString()
                })
                .eq('id', order.id);

              if (updateError) {
                console.error(`[TEST] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, updateError);
              } else {
                console.log(`[TEST] ‚úÖ –ó–∞–∫–∞–∑ ${order.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω`);
              }
            }
          } else {
            console.log('[TEST] ‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ "–ù–æ–≤—ã–π"/"–û—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω" –¥–ª—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã');
          }
        }

        console.log('[TEST] ‚úÖ –¢–ï–°–¢–û–í–û–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

      } catch (error) {
        console.error('[TEST] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:', error);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    await testAutoComplete.call(orderService);

    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
 */
export async function cleanupTestOrders(): Promise<void> {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');

    const { error } = await supabase
      .from('orders')
      .delete()
      .like('title', '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑%');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
 */
export async function checkAutoUpdateResults(): Promise<void> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

    const today = new Date().toISOString().split('T')[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const { data: completedOrders, error: completedError } = await supabase
      .from('orders')
      .select('id, title, status, auto_completed')
      .eq('service_date', today)
      .eq('auto_completed', true);

    if (completedError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', completedError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${completedOrders?.length || 0} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:`);
      completedOrders?.forEach(order => {
        console.log(`  - ${order.id}: ${order.title} (${order.status})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const { data: cancelledOrders, error: cancelledError } = await supabase
      .from('orders')
      .select('id, title, status, auto_cancelled')
      .eq('service_date', today)
      .eq('auto_cancelled', true);

    if (cancelledError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', cancelledError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cancelledOrders?.length || 0} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:`);
      cancelledOrders?.forEach(order => {
        console.log(`  - ${order.id}: ${order.title} (${order.status})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
  }
}
