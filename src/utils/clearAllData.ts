import AsyncStorage from '@react-native-async-storage/async-storage';
import { authService } from '../services/authService';
import { orderService } from '../services/orderService';

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£–¥–∞–ª—è–µ—Ç:
 * - –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ Supabase
 * - –í—Å–µ –∑–∞—è–≤–∫–∏/–∑–∞–∫–∞–∑—ã –∏–∑ Supabase
 * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * - –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export async function clearAllUserData(): Promise<void> {
  try {
    console.log('[ClearData] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...');

    // 1. –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ Supabase
    await orderService.clearAllOrders();
    console.log('[ClearData] ‚úÖ –ó–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã –≤ Supabase');

    // 2. –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ Supabase
    await orderService.clearAllApplicants();
    console.log('[ClearData] ‚úÖ –û—Ç–∫–ª–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã –≤ Supabase');

    // 3. –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase –∏ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
    await authService.clearAllData();
    console.log('[ClearData] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã –≤ Supabase');

    // 4. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    await AsyncStorage.removeItem('@temp_profile_data');
    console.log('[ClearData] ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—á–∏—â–µ–Ω—ã');

    // 5. –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    // –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ authService.clearAllData()
    const allKeys = await AsyncStorage.getAllKeys();
    const tempKeys = allKeys.filter(key =>
      key.startsWith('@temp_') ||
      key.startsWith('@osonish_temp') ||
      key.includes('temp_profile')
    );

    if (tempKeys.length > 0) {
      await AsyncStorage.multiRemove(tempKeys);
      console.log(`[ClearData] ‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: ${tempKeys.join(', ')}`);
    }

    console.log('[ClearData] üéâ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('[ClearData] üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Supabase');
  } catch (error) {
    console.error('[ClearData] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
 */
export async function getDataStats(): Promise<{
  users: number;
  orders: number;
  storageKeys: string[];
  supabaseOnly: boolean;
}> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase
    const orderStats = await orderService.getOrdersStats();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
    const users = await authService.getAllUsersFromSupabase();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const allKeys = await AsyncStorage.getAllKeys();
    const tempKeys = allKeys.filter(key =>
      key.startsWith('@temp_') ||
      key.startsWith('@osonish_temp') ||
      key.startsWith('@osonish_session') ||
      key.includes('temp_profile')
    );

    return {
      users: users.length,
      orders: orderStats.total,
      storageKeys: tempKeys,
      supabaseOnly: true // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Supabase
    };
  } catch (error) {
    console.error('[ClearData] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return {
      users: 0,
      orders: 0,
      storageKeys: [],
      supabaseOnly: true
    };
  }
} 