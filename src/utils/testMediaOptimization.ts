/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
 */

import { mediaService } from '../services/mediaService';

export interface OptimizationTestResult {
  originalSize: number;
  optimizedSize: number;
  compressionRatio: number;
  qualityAcceptable: boolean;
  testPassed: boolean;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
 */
export const testMediaOptimization = async (
  testFiles: Array<{ uri: string, type: 'image' | 'video', name: string, size: number }>
): Promise<OptimizationTestResult[]> => {
  console.log('[MediaOptimizationTest] üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');

  const results: OptimizationTestResult[] = [];

  for (const file of testFiles) {
    try {
      console.log(`[MediaOptimizationTest] üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${file.name}`);
      console.log(`[MediaOptimizationTest] üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(1)} KB`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞ —Å–µ—Ä–≤–∏—Å (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π)
      const uploadResult = await mediaService.uploadMediaFiles([file]);

      if (uploadResult.success) {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        // –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Supabase, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É

        const estimatedCompressionRatio = file.type === 'image' ? 30 : 0; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const estimatedOptimizedSize = file.size * (1 - estimatedCompressionRatio / 100);

        const result: OptimizationTestResult = {
          originalSize: file.size,
          optimizedSize: estimatedOptimizedSize,
          compressionRatio: estimatedCompressionRatio,
          qualityAcceptable: true, // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          testPassed: uploadResult.success
        };

        results.push(result);

        console.log(`[MediaOptimizationTest] ‚úÖ –§–∞–π–ª ${file.name} —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        console.log(`[MediaOptimizationTest] üìâ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ: ${estimatedCompressionRatio}%`);

      } else {
        console.error(`[MediaOptimizationTest] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, uploadResult.error);

        const result: OptimizationTestResult = {
          originalSize: file.size,
          optimizedSize: file.size,
          compressionRatio: 0,
          qualityAcceptable: false,
          testPassed: false
        };

        results.push(result);
      }

    } catch (error) {
      console.error(`[MediaOptimizationTest] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}:`, error);

      const result: OptimizationTestResult = {
        originalSize: file.size,
        optimizedSize: file.size,
        compressionRatio: 0,
        qualityAcceptable: false,
        testPassed: false
      };

      results.push(result);
    }
  }

  // –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalOriginalSize = results.reduce((sum, r) => sum + r.originalSize, 0);
  const totalOptimizedSize = results.reduce((sum, r) => sum + r.optimizedSize, 0);
  const overallCompressionRatio = totalOriginalSize > 0 ?
    ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize * 100) : 0;

  console.log('\n[MediaOptimizationTest] üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`[MediaOptimizationTest] üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.length}`);
  console.log(`[MediaOptimizationTest] üìè –û–±—â–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(1)} MB`);
  console.log(`[MediaOptimizationTest] üìâ –û–±—â–∏–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOptimizedSize / 1024 / 1024).toFixed(1)} MB`);
  console.log(`[MediaOptimizationTest] üéØ –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${overallCompressionRatio.toFixed(1)}%`);
  console.log(`[MediaOptimizationTest] ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${results.filter(r => r.testPassed).length}/${results.length}`);

  return results;
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const showOptimizationSettings = (): void => {
  const settings = mediaService.getOptimizationSettings();

  console.log('\n[MediaOptimizationTest] ‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
  console.log(`[MediaOptimizationTest] üñºÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${settings.maxImageWidth}px`);
  console.log(`[MediaOptimizationTest] üñºÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${settings.maxImageHeight}px`);
  console.log(`[MediaOptimizationTest] üé® –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${(settings.imageQuality * 100).toFixed(0)}%`);
  console.log(`[MediaOptimizationTest] üé• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: ${(settings.maxVideoSize / 1024 / 1024).toFixed(0)} MB`);
  console.log(`[MediaOptimizationTest] üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: ${settings.enableOptimization ? '–î–∞' : '–ù–µ—Ç'}`);
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const updateOptimizationForTesting = (testMode: 'aggressive' | 'balanced' | 'conservative'): void => {
  console.log(`[MediaOptimizationTest] üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${testMode}`);

  switch (testMode) {
    case 'aggressive':
      mediaService.updateOptimizationSettings({
        maxImageWidth: 1280,
        maxImageHeight: 720,
        imageQuality: 0.6,
        maxVideoSize: 10 * 1024 * 1024, // 10 MB
        enableOptimization: true
      });
      break;

    case 'balanced':
      mediaService.updateOptimizationSettings({
        maxImageWidth: 1920,
        maxImageHeight: 1080,
        imageQuality: 0.8,
        maxVideoSize: 20 * 1024 * 1024, // 20 MB
        enableOptimization: true
      });
      break;

    case 'conservative':
      mediaService.updateOptimizationSettings({
        maxImageWidth: 2560,
        maxImageHeight: 1440,
        imageQuality: 0.9,
        maxVideoSize: 50 * 1024 * 1024, // 50 MB
        enableOptimization: true
      });
      break;
  }

  showOptimizationSettings();
};
