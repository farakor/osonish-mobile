import { notificationService } from '../services/notificationService';

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ Expo Go
 */
export const quickNotificationTest = {

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π push —Ç–æ–∫–µ–Ω
   */
  getToken: () => {
    const token = notificationService.getCurrentPushToken();
    console.log('üé´ –¢–µ–∫—É—â–∏–π push —Ç–æ–∫–µ–Ω:', token);
    console.log('üìã –ü–û–õ–ù–´–ô –¢–û–ö–ï–ù –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:', token);
    if (token) {
      console.log('üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç');
    }
    return token;
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API
   */
  sendTest: async (token?: string) => {
    const pushToken = token || notificationService.getCurrentPushToken();

    if (!pushToken) {
      console.error('‚ùå Push —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
    console.log('üé´ –¢–æ–∫–µ–Ω:', pushToken.substring(0, 30) + '...');

    try {
      const message = {
        to: pushToken,
        sound: 'default',
        title: '–¢–µ—Å—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        body: `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`,
        data: { test: true },
        priority: 'high',
        channelId: 'default',
      };

      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç Expo:', JSON.stringify(result, null, 2));

      if (result.data && result.data.status === 'ok') {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', result);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      return false;
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  checkPermissions: async () => {
    try {
      const Notifications = require('expo-notifications');
      const { status } = await Notifications.getPermissionsAsync();

      console.log('üîê –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', status);

      if (status !== 'granted') {
        console.log('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º...');
        const { status: newStatus } = await Notifications.requestPermissionsAsync();
        console.log('üîê –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', newStatus);
        return newStatus === 'granted';
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  },

  /**
   * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
   */
  diagnose: async () => {
    console.log('\nüîç === –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    const token = quickNotificationTest.getToken();

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const hasPermissions = await quickNotificationTest.checkPermissions();
    console.log('üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏—è:', hasPermissions ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const Device = require('expo-device');
    console.log('üì± –†–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', Device.isDevice ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç (—Å–∏–º—É–ª—è—Ç–æ—Ä)');

    // 4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (token && hasPermissions) {
      console.log('\nüß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
      await quickNotificationTest.sendTest(token);
    } else {
      console.log('‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
    }

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
};

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
if (__DEV__) {
  (global as any).quickTest = quickNotificationTest;
  console.log('üß™ quickTest –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏');
  console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: quickTest.diagnose()');
}
