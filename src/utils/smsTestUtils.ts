/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMS —Å–µ—Ä–≤–∏—Å–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Eskiz.uz –∏ Twilio –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import { eskizSMSService } from '../services/eskizSMSService';
import { smsService } from '../services/smsService';
import { supabaseAuthService } from '../services/supabaseAuthService';
import { smsConfig } from '../config/smsConfig';
import { handleSMSError } from './smsErrorHandler';

export interface TestResult {
  success: boolean;
  message: string;
  details?: any;
  error?: string;
}

export interface SMSTestSuite {
  configurationTest: TestResult;
  authenticationTest: TestResult;
  balanceTest?: TestResult;
  sendSMSTest?: TestResult;
  verificationTest?: TestResult;
  supabaseIntegrationTest?: TestResult;
}

class SMSTestUtils {
  /**
   * –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
   */
  private readonly TEST_PHONES = {
    valid: '+998901234567',
    invalid: '123456',
    uzbek: '+998971234567',
    international: '+1234567890'
  };

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private readonly TEST_CODES = {
    valid: '123456',
    invalid: '000000',
    expired: '999999'
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SMS —Å–µ—Ä–≤–∏—Å–∞
   */
  async testConfiguration(): Promise<TestResult> {
    try {
      console.log('[SMSTest] üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

      const provider = smsConfig.provider;

      if (!provider) {
        return {
          success: false,
          message: 'SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞'
        };
      }

      let configValid = false;
      let details: any = { provider };

      switch (provider) {
        case 'eskiz':
          if (smsConfig.eskiz?.email && smsConfig.eskiz?.password) {
            configValid = true;
            details.eskiz = {
              email: smsConfig.eskiz.email,
              baseUrl: smsConfig.eskiz.baseUrl,
              hasPassword: !!smsConfig.eskiz.password
            };
          }
          break;

        case 'twilio':
          if (smsConfig.twilio?.accountSid && smsConfig.twilio?.authToken) {
            configValid = true;
            details.twilio = {
              accountSid: smsConfig.twilio.accountSid,
              fromNumber: smsConfig.twilio.fromNumber,
              hasAuthToken: !!smsConfig.twilio.authToken
            };
          }
          break;
      }

      return {
        success: configValid,
        message: configValid ?
          `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${provider} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞` :
          `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${provider} –Ω–µ–ø–æ–ª–Ω–∞—è`,
        details
      };

    } catch (error) {
      const smsError = handleSMSError(error, 'Configuration Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        error: smsError.message
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ SMS —Å–µ—Ä–≤–∏—Å–µ
   */
  async testAuthentication(): Promise<TestResult> {
    try {
      console.log('[SMSTest] üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

      switch (smsConfig.provider) {
        case 'eskiz':
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Eskiz —Å–µ—Ä–≤–∏—Å–∞
          const eskizStatus = await eskizSMSService.checkServiceStatus();

          return {
            success: eskizStatus.success && eskizStatus.authenticated,
            message: eskizStatus.success ?
              '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Eskiz —É—Å–ø–µ—à–Ω–∞' :
              '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Eskiz',
            details: {
              authenticated: eskizStatus.authenticated,
              balance: eskizStatus.balance
            },
            error: eskizStatus.error
          };

        case 'twilio':
          // –î–ª—è Twilio –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          return {
            success: true,
            message: 'Twilio –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞',
            details: { provider: 'twilio' }
          };

        default:
          return {
            success: false,
            message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä',
            error: `–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${smsConfig.provider} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`
          };
      }

    } catch (error) {
      const smsError = handleSMSError(error, 'Authentication Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        error: smsError.message
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async testBalance(): Promise<TestResult> {
    try {
      console.log('[SMSTest] üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...');

      switch (smsConfig.provider) {
        case 'eskiz':
          const balanceResult = await eskizSMSService.getBalance();

          return {
            success: balanceResult.success,
            message: balanceResult.success ?
              `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balanceResult.balance}` :
              '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
            details: { balance: balanceResult.balance },
            error: balanceResult.error
          };

        case 'twilio':
          return {
            success: true,
            message: 'Twilio –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API',
            details: { provider: 'twilio' }
          };

        default:
          return {
            success: false,
            message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞'
          };
      }

    } catch (error) {
      const smsError = handleSMSError(error, 'Balance Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
        error: smsError.message
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async testSendSMS(testPhone?: string): Promise<TestResult> {
    try {
      console.log('[SMSTest] üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS...');

      const phone = testPhone || this.TEST_PHONES.valid;

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SMS –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      if (!__DEV__) {
        return {
          success: true,
          message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMS –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ',
          details: { phone, mode: 'production' }
        };
      }

      let result;
      switch (smsConfig.provider) {
        case 'eskiz':
          result = await eskizSMSService.sendVerificationCode(phone);
          break;
        case 'twilio':
          result = await smsService.sendVerificationCode(phone);
          break;
        default:
          return {
            success: false,
            message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS'
          };
      }

      return {
        success: result.success,
        message: result.success ?
          'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' :
          '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
        details: { phone, provider: smsConfig.provider },
        error: result.error
      };

    } catch (error) {
      const smsError = handleSMSError(error, 'Send SMS Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
        error: smsError.message
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async testVerification(testPhone?: string, testCode?: string): Promise<TestResult> {
    try {
      console.log('[SMSTest] üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞...');

      const phone = testPhone || this.TEST_PHONES.valid;
      const code = testCode || this.TEST_CODES.valid;

      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
      if (!__DEV__ && !testCode) {
        return {
          success: true,
          message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ',
          details: { phone, mode: 'production' }
        };
      }

      let result;
      switch (smsConfig.provider) {
        case 'eskiz':
          result = await eskizSMSService.verifyCode(phone, code);
          break;
        case 'twilio':
          result = await smsService.verifyCode(phone, code);
          break;
        default:
          return {
            success: false,
            message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
          };
      }

      return {
        success: result.success,
        message: result.success ?
          '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ' :
          '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞',
        details: { phone, code, provider: smsConfig.provider },
        error: result.error
      };

    } catch (error) {
      const smsError = handleSMSError(error, 'Verification Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        error: smsError.message
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase Auth
   */
  async testSupabaseIntegration(testPhone?: string): Promise<TestResult> {
    try {
      console.log('[SMSTest] üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase...');

      const phone = testPhone || this.TEST_PHONES.valid;

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS —á–µ—Ä–µ–∑ Supabase Auth Service
      const sendResult = await supabaseAuthService.signInWithPhone({ phone });

      if (!sendResult.success) {
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ Supabase Auth',
          error: sendResult.error
        };
      }

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (__DEV__) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const verifyResult = await supabaseAuthService.verifyOtp({
          phone,
          token: this.TEST_CODES.valid
        });

        return {
          success: verifyResult.success,
          message: verifyResult.success ?
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç' :
            '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Supabase',
          details: {
            phone,
            sendSuccess: sendResult.success,
            verifySuccess: verifyResult.success,
            userId: verifyResult.user?.id
          },
          error: verifyResult.error
        };
      }

      return {
        success: true,
        message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Supabase Auth —É—Å–ø–µ—à–Ω–æ',
        details: { phone, sendSuccess: true }
      };

    } catch (error) {
      const smsError = handleSMSError(error, 'Supabase Integration Test');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase',
        error: smsError.message
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
   */
  async runFullTestSuite(testPhone?: string): Promise<SMSTestSuite> {
    console.log('[SMSTest] üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ SMS...');

    const results: SMSTestSuite = {
      configurationTest: await this.testConfiguration(),
      authenticationTest: await this.testAuthentication(),
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    if (results.configurationTest.success && results.authenticationTest.success) {
      results.balanceTest = await this.testBalance();

      // –¢–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (__DEV__) {
        results.sendSMSTest = await this.testSendSMS(testPhone);
        results.verificationTest = await this.testVerification(testPhone);
      }

      results.supabaseIntegrationTest = await this.testSupabaseIntegration(testPhone);
    }

    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.logTestSummary(results);

    return results;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
   */
  private logTestSummary(results: SMSTestSuite): void {
    console.log('\n[SMSTest] üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    const tests = [
      { name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', result: results.configurationTest },
      { name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', result: results.authenticationTest },
      { name: '–ë–∞–ª–∞–Ω—Å', result: results.balanceTest },
      { name: '–û—Ç–ø—Ä–∞–≤–∫–∞ SMS', result: results.sendSMSTest },
      { name: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', result: results.verificationTest },
      { name: 'Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', result: results.supabaseIntegrationTest }
    ];

    tests.forEach(test => {
      if (test.result) {
        const status = test.result.success ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${test.name}: ${test.result.message}`);
        if (test.result.error) {
          console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${test.result.error}`);
        }
      }
    });

    const totalTests = tests.filter(t => t.result).length;
    const passedTests = tests.filter(t => t.result?.success).length;

    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);

    if (passedTests === totalTests) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã SMS —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SMS —Å–µ—Ä–≤–∏—Å–∞
   */
  async quickHealthCheck(): Promise<{ healthy: boolean; issues: string[] }> {
    const issues: string[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const configTest = await this.testConfiguration();
      if (!configTest.success) {
        issues.push(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${configTest.message}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const authTest = await this.testAuthentication();
      if (!authTest.success) {
        issues.push(`–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${authTest.message}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Eskiz)
      if (smsConfig.provider === 'eskiz') {
        const balanceTest = await this.testBalance();
        if (!balanceTest.success) {
          issues.push(`–ë–∞–ª–∞–Ω—Å: ${balanceTest.message}`);
        }
      }

    } catch (error) {
      issues.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }

    return {
      healthy: issues.length === 0,
      issues
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const smsTestUtils = new SMSTestUtils();

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export const runSMSTests = (testPhone?: string) => smsTestUtils.runFullTestSuite(testPhone);
export const checkSMSHealth = () => smsTestUtils.quickHealthCheck();
