import { useState, useCallback } from 'react';
import { Alert } from 'react-native';
import { orderService } from '../services/orderService';
import { supabase } from '../services/supabaseClient';
import { authService } from '../services/authService';

export interface TestOrder {
  id: string;
  title: string;
  status: string;
  service_date: string;
  auto_completed?: boolean;
  auto_cancelled?: boolean;
}

export const useAutoOrderTest = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [testOrders, setTestOrders] = useState<TestOrder[]>([]);

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   */
  const createTestOrders = useCallback(async () => {
    setIsLoading(true);
    try {
      const today = new Date().toISOString().split('T')[0];

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ authService
      const authState = authService.getAuthState();
      console.log('üß™ [TEST] Auth state:', {
        isAuthenticated: authState.isAuthenticated,
        hasUser: !!authState.user,
        userId: authState.user?.id
      });

      if (!authState.isAuthenticated || !authState.user) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        return;
      }

      const user = authState.user;
      console.log('üß™ [TEST] Creating test orders for user:', user.id);

      const testOrdersData = [
        {
          title: 'üß™ –¢–ï–°–¢: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω)',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã',
          category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
          budget: 100000,
          workers_needed: 1,
          service_date: today,
          status: 'new',
          customer_id: user.id,
        },
        {
          title: 'üß™ –¢–ï–°–¢: –ó–∞–∫–∞–∑ —Å –æ—Ç–∫–ª–∏–∫–æ–º (–±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω)',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã',
          category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
          budget: 150000,
          workers_needed: 1,
          service_date: today,
          status: 'response_received',
          customer_id: user.id,
        },
        {
          title: 'üß™ –¢–ï–°–¢: –ó–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ (–±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω)',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
          category: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
          budget: 200000,
          workers_needed: 1,
          service_date: today,
          status: 'in_progress',
          customer_id: user.id,
        },
      ];

      const createdOrders: TestOrder[] = [];

      for (const orderData of testOrdersData) {
        const { data, error } = await supabase
          .from('orders')
          .insert(orderData)
          .select('id, title, status, service_date')
          .single();

        if (error) {
          console.error('üß™ [TEST] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
          Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: ${orderData.title}\n\n–û—à–∏–±–∫–∞: ${error.message}`);
        } else {
          console.log('üß™ [TEST] –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data.id);
          createdOrders.push(data);
        }
      }

      setTestOrders(createdOrders);
      Alert.alert('–£—Å–ø–µ—Ö', `–°–æ–∑–¥–∞–Ω–æ ${createdOrders.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
    } finally {
      setIsLoading(false);
    }
  }, []);

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è)
   * @param allOrders - –µ—Å–ª–∏ true, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∑–∞–∫–∞–∑—ã, –µ—Å–ª–∏ false - —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ
   */
  const runAutoUpdate = useCallback(async (allOrders: boolean = false) => {
    setIsLoading(true);
    try {
      if (allOrders) {
        console.log('üß™ –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏...');
        await orderService.autoCompleteOrdersForTesting();
        Alert.alert('–£—Å–ø–µ—Ö', '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.');
      } else {
        console.log('üß™ –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏...');
        await orderService.autoCompleteTestOrdersOnly();
        Alert.alert('–£—Å–ø–µ—Ö', '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.');
      }

    } catch (error) {
      console.error('üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    } finally {
      setIsLoading(false);
    }
  }, []);

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const checkResults = useCallback(async () => {
    setIsLoading(true);
    try {
      const today = new Date().toISOString().split('T')[0];

      const { data: results, error } = await supabase
        .from('orders')
        .select('id, title, status, auto_completed, auto_cancelled, updated_at')
        .eq('service_date', today)
        .like('title', 'üß™ –¢–ï–°–¢:%')
        .order('updated_at', { ascending: false });

      if (error) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        return;
      }

      setTestOrders(results || []);

      const completed = results?.filter(o => o.auto_completed).length || 0;
      const cancelled = results?.filter(o => o.auto_cancelled).length || 0;

      Alert.alert(
        '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
        `–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed}\n–ê–≤—Ç–æ–æ—Ç–º–µ–Ω–µ–Ω–æ: ${cancelled}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ`
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    } finally {
      setIsLoading(false);
    }
  }, []);

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
   */
  const cleanupTestOrders = useCallback(async () => {
    setIsLoading(true);
    try {
      const { error } = await supabase
        .from('orders')
        .delete()
        .like('title', 'üß™ –¢–ï–°–¢:%');

      if (error) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
      } else {
        setTestOrders([]);
        Alert.alert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
    } finally {
      setIsLoading(false);
    }
  }, []);

  return {
    isLoading,
    testOrders,
    createTestOrders,
    runAutoUpdate,
    checkResults,
    cleanupTestOrders,
  };
};
