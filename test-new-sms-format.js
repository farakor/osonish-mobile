/**
 * –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è
 * –ó–∞–ø—É—Å–∫: node test-new-sms-format.js +998548754545
 */

require('dotenv').config();

const testNewSMSFormat = async (phoneNumber) => {
  console.log('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ SMS...\n');

  if (!phoneNumber) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä: node test-new-sms-format.js +998901234567');
    process.exit(1);
  }

  const email = process.env.ESKIZ_EMAIL;
  const password = process.env.ESKIZ_PASSWORD;
  const baseUrl = process.env.ESKIZ_BASE_URL || 'https://notify.eskiz.uz/api';

  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    const formattedPhone = phoneNumber.replace(/\D/g, '');
    let finalPhone = formattedPhone;
    
    if (formattedPhone.startsWith('998')) {
      finalPhone = formattedPhone;
    } else if (formattedPhone.startsWith('8') && formattedPhone.length === 10) {
      finalPhone = '998' + formattedPhone.slice(1);
    } else if (formattedPhone.startsWith('9') && formattedPhone.length === 9) {
      finalPhone = '998' + formattedPhone;
    }

    console.log(`üìû –ù–æ–º–µ—Ä: ${finalPhone}`);

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
    const authResponse = await fetch(`${baseUrl}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    });

    const authData = await authResponse.json();
    if (!authResponse.ok || !authData.data?.token) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authData);
      return;
    }

    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testCode = Math.floor(100000 + Math.random() * 900000).toString();
    const newMessage = `–≠—Ç–æ —Ç–µ—Å—Ç –æ—Ç Eskiz`;

    console.log(`\nüìù –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:`);
    console.log(`"${newMessage}"`);
    console.log(`üî¢ –ö–æ–¥: ${testCode}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS...');
    
    const smsResponse = await fetch(`${baseUrl}/message/sms/send`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authData.data.token}`,
      },
      body: JSON.stringify({
        mobile_phone: finalPhone,
        message: newMessage,
        from: process.env.SMS_SENDER_NAME || 'OsonIsh'
      }),
    });

    const smsData = await smsResponse.json();
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', smsData);

    if (smsResponse.ok && smsData.id) {
      console.log('\nüéâ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      console.log(`üìß ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${smsData.id}`);
      console.log(`üì± –ù–æ–º–µ—Ä: +${finalPhone}`);
      console.log(`üî¢ –ö–æ–¥: ${testCode}`);
      console.log('\n‚è∞ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const balanceResponse = await fetch(`${baseUrl}/user/get-limit`, {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${authData.data.token}` },
      });

      if (balanceResponse.ok) {
        const balanceData = await balanceResponse.json();
        console.log(`üí∞ –û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: ${balanceData.balance} SMS`);
      }

    } else {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', smsData);
      
      if (smsData.message && smsData.message.includes('–º–æ–¥–µ—Ä–∞—Ü–∏—é')) {
        console.log('\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å:');
        console.log('1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ my.eskiz.uz');
        console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–°–ú–°" ‚Üí "–ú–æ–∏ —Ç–µ–∫—Å—Ç—ã"');
        console.log('3. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω:');
        console.log(`   "${newMessage.replace(testCode, '{code}')}"`);
        console.log('4. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
};

const phoneNumber = process.argv[2];
testNewSMSFormat(phoneNumber);
